
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1291] =
    {   0,
        1,  119,    1,  119,  125,  124,    1,  124,  122,  124,
        5,  124,    6,  124,  119,  124,  119,  121,  124,  124,
      124,  117,  119,  124,  117,  119,  124,  120,  121,  124,
      120,  121,  124,  120,  124,  120,  121,  124,  120,  121,
      124,  120,  121,  124,  120,  121,  124,  120,  121,  124,
      120,  121,  124,  120,  121,  124,  120,  121,  124,  120,
      121,  124,  120,  121,  124,  120,  121,  124,  120,  121,
      124,  120,  121,  124,  120,  121,  124,  120,  121,  124,
      120,  121,  124,  120,  121,  124,  120,  121,  124,  120,
      121,  124,  120,  121,  124,  120,  121,  124,  120,  121,

      124,    1,    5,  117,  119,  121,  121,  117,  119,  121,
      121,  119,    4,  120,  121,  121,  119,  120,  121,  120,
      120,  121,  120,  121,  120,  121,   55,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,   66,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,   80,  120,
      121,  120,  121,   83,  120,  121,   87,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,   92,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  119,  119,  121,  119,  121,    4,
      118,  120,  121,   53,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,

      120,  121,  120,  121,   62,  120,  121,   64,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
       75,  120,  121,  120,  121,  120,  121,  120,  121,   29,
      120,  121,   30,  120,  121,   31,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,   37,  120,  121,  120,  121,  120,
      121,   90,  120,  121,   91,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,   39,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  108,  120,  121,  120,  121,  120,  121,  120,
      121,  110,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,    2,  120,
      121,   54,  120,  121,  120,  121,  120,  121,  120,  121,
       27,  120,  121,  120,  121,   28,  120,  121,   58,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,   67,  120,  121,   68,  120,  121,   47,  120,  121,
      120,  121,   71,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,   79,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,   38,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,   93,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,

      120,  121,  120,  121,  104,  120,  121,  120,  121,  120,
      121,  107,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,   26,  120,  121,  120,  121,  120,  121,  114,
      120,  121,  120,  121,  120,  121,    3,    2,  123,  120,
      121,  120,  121,   51,  120,  121,  120,  121,   57,  120,
      121,   59,  120,  121,  120,  121,   48,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   72,  120,  121,  120,  121,   74,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   95,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,   98,  120,  121,  120,
      121,  120,  121,  120,  121,   36,  120,  121,  120,  121,
      120,  121,   35,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  105,  120,  121,
      120,  121,  120,  121,  115,  120,  121,  120,  121,  120,
      121,  120,  121,  113,  120,  121,  120,  121,  120,  121,
      120,  121,  116,  120,  121,    3,  123,    2,  123,  120,

      121,   56,  120,  121,   34,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   65,  120,  121,   32,  120,  121,   69,
      120,  121,   70,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   78,  120,  121,  120,  121,   82,  120,
      121,  120,  121,   84,  120,  121,  120,  121,  120,  121,
      120,  121,   88,  120,  121,  120,  121,   89,  120,  121,
       40,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   94,  120,  121,  120,  121,  120,  121,
       99,  120,  121,  120,  121,  120,  121,  100,  120,  121,

      120,  121,  101,  120,  121,   33,  120,  121,   42,  120,
      121,  102,  120,  121,  120,  121,   45,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  123,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,   61,  120,  121,   63,  120,  121,
      120,  121,   44,  120,  121,   73,  120,  121,   76,  120,
      121,  120,  121,  120,  121,   25,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,   96,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,   46,  120,  121,  120,  121,  120,  121,
      120,  121,   41,  120,  121,  120,  121,  111,  120,  121,
      120,  121,   20,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   52,  120,  121,  120,  121,   60,  120,
      121,  120,  121,  120,  121,   10,  120,  121,  120,  121,
      120,  121,   77,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   50,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,   49,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  109,  120,  121,
      112,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,   43,
      120,  121,  120,  121,  120,  121,   86,  120,  121,  120,
      121,    7,  120,  121,  120,  121,  120,  121,   97,  120,
      121,   15,  120,  121,  120,  121,  120,  121,  120,  121,
      106,  120,  121,   24,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
       81,  120,  121,   85,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,    9,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,   12,  120,  121,  120,  121,  120,  121,
       11,  120,  121,   16,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  103,  120,  121,  120,  121,   22,
      120,  121,   21,  120,  121,    8,  120,  121,  120,  121,
       14,  120,  121,  120,  121,  120,  121,  120,  121,   23,
      120,  121,  120,  121,   17,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,   13,  120,  121,
      120,  121,   19,  120,  121,  120,  121,   18,  120,  121
    } ;

static yyconst flex_int16_t yy_accept[610] =
    {   0,
        1,    3,    5,    6,    7,    9,   11,   13,   15,   17,
       20,   21,   22,   25,   28,   31,   34,   36,   39,   42,
       45,   48,   51,   54,   57,   60,   63,   66,   69,   72,
       75,   78,   81,   84,   87,   90,   93,   96,   99,  102,
      103,  104,  104,  106,  106,  107,  108,  111,  112,  113,
      113,  114,  114,  116,  116,  117,  120,  121,  123,  125,
      127,  130,  132,  134,  136,  138,  140,  142,  144,  146,
      148,  150,  153,  155,  157,  159,  161,  163,  165,  167,
      169,  171,  173,  175,  177,  179,  182,  184,  187,  190,
      192,  194,  196,  198,  200,  202,  204,  206,  208,  211,

      213,  215,  217,  219,  221,  223,  225,  227,  229,  231,
      233,  235,  237,  239,  241,  243,  245,  247,  249,  251,
      253,  255,  257,  259,  261,  263,  265,  266,  268,  270,
      270,  270,  271,  272,  274,  277,  279,  281,  283,  285,
      287,  289,  291,  293,  295,  297,  299,  301,  303,  305,
      308,  311,  313,  315,  317,  319,  321,  323,  325,  327,
      329,  331,  334,  336,  338,  340,  343,  346,  349,  351,
      353,  355,  357,  359,  361,  363,  365,  368,  370,  372,
      375,  378,  380,  382,  384,  386,  388,  390,  392,  394,
      396,  398,  400,  402,  404,  406,  408,  411,  413,  415,

      417,  419,  421,  423,  425,  427,  429,  431,  433,  436,
      438,  440,  442,  445,  447,  449,  451,  453,  455,  457,
      459,  459,  459,  459,  459,  459,  460,  462,  465,  467,
      469,  471,  474,  476,  479,  482,  484,  486,  488,  490,
      492,  494,  496,  498,  500,  502,  505,  508,  511,  513,
      516,  518,  520,  522,  524,  526,  528,  530,  533,  535,
      537,  539,  541,  543,  545,  547,  549,  552,  554,  556,
      558,  560,  563,  565,  567,  569,  571,  573,  575,  577,
      579,  581,  583,  585,  587,  589,  591,  593,  595,  597,
      599,  601,  603,  605,  608,  610,  612,  615,  617,  619,

      621,  623,  626,  628,  630,  633,  635,  637,  637,  637,
      638,  638,  638,  638,  638,  640,  642,  644,  647,  649,
      652,  655,  657,  660,  662,  664,  666,  668,  670,  672,
      674,  676,  678,  680,  682,  684,  687,  689,  692,  694,
      696,  698,  700,  702,  704,  706,  708,  710,  712,  714,
      716,  718,  720,  722,  724,  726,  729,  731,  733,  735,
      737,  740,  742,  744,  746,  749,  751,  753,  756,  758,
      760,  762,  764,  766,  768,  771,  773,  775,  778,  780,
      782,  784,  787,  789,  791,  793,  796,  796,  797,  797,
      798,  798,  800,  802,  805,  808,  810,  812,  814,  816,

      818,  820,  822,  824,  827,  830,  833,  836,  838,  840,
      842,  844,  847,  849,  852,  854,  857,  859,  861,  863,
      866,  868,  871,  874,  876,  878,  880,  882,  884,  887,
      889,  891,  894,  896,  898,  901,  903,  906,  909,  912,
      915,  917,  920,  922,  924,  926,  928,  930,  932,  934,
      936,  938,  940,  941,  943,  945,  947,  949,  951,  953,
      955,  958,  961,  963,  966,  969,  972,  974,  976,  979,
      981,  983,  985,  987,  989,  991,  993,  996,  998, 1000,
     1002, 1004, 1007, 1009, 1011, 1013, 1016, 1018, 1021, 1023,
     1026, 1028, 1030, 1032, 1034, 1037, 1039, 1042, 1044, 1046,

     1049, 1051, 1053, 1056, 1058, 1060, 1062, 1064, 1066, 1069,
     1071, 1073, 1075, 1077, 1080, 1082, 1084, 1086, 1088, 1091,
     1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1113,
     1115, 1117, 1120, 1122, 1125, 1127, 1129, 1132, 1135, 1137,
     1139, 1141, 1144, 1147, 1149, 1151, 1153, 1155, 1157, 1159,
     1161, 1164, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181,
     1183, 1185, 1187, 1190, 1192, 1194, 1196, 1198, 1200, 1202,
     1204, 1206, 1208, 1210, 1212, 1214, 1217, 1219, 1221, 1224,
     1227, 1229, 1231, 1233, 1235, 1238, 1240, 1243, 1246, 1249,
     1251, 1254, 1256, 1258, 1260, 1263, 1265, 1268, 1270, 1272,

     1274, 1276, 1278, 1281, 1283, 1286, 1288, 1291, 1291
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   19,   19,   19,   20,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
        6,    1,    6,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    4,    5,
        1,    6,    6,    6,    6,    6,    6,    6,    7,    8,
        9,    9,    7,    7,    7,    7,    8,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[623] =
    {   0,
        0,    0, 1344, 1345,   47, 1345,    0, 1345,   41,   59,
       40,   52,   60, 1297, 1333,   99,    0,   57,   87,  110,
       51,   48,  112,   55,  147,   76,  100,   81,  113,   92,
      144,  136,  183,  155,   74,  149,  111,   96,   94,  136,
        0,  191, 1295,  160,    0,  219,  228,  248,   75, 1333,
        0,    0, 1330,  255,  168,  181,    0,  120,  172,  164,
      206,  161,  117,  169,   58,  185,  143,  191,   53,  190,
      249,  241,  245,  242,  266,  215,  203,  192,  212,  269,
      250,  270,  204,  280,  272, 1329,  271,  273, 1328,  281,
      283,  286,  288,  287,  290,  291,  292,  294, 1327,  293,

      297,  301,  307,  304,  295,  311,  312,  321,  322,  302,
      315,  332,  334,  338,  323,  339,  340,  314,  344,  331,
      351,  347,  357,  352,  356,  359,  383,  392,  364,  212,
      369,    0,    0,  375, 1326,  380,  384,  383,  403,  381,
      404,  405,  407,  394,  409,  411,  414,  415,  413,  416,
      421,  419,  422,  424,  420,  431,  432,  433,  428,  436,
      440,  435,  445,  447,  452, 1325, 1324, 1323,  456,  457,
      455,  458,  465,  459,  463,  464, 1322,  467,  466, 1321,
     1320,  468,  470,  469,  471,  474,  472,  475,  486,  476,
      489,  479,  490,  493,  494,  495, 1319,  498,  500,  509,

      503,  505,  510,  506,  512,  514,  518,  515, 1318,  517,
      519,  526, 1317,  520,  523,  537,  525,  538,  541,  546,
     1318,  554,  559, 1317,  560, 1312,  529, 1313,  549,  563,
      555, 1312,  564, 1311, 1310,  565,  567,  566,  568,  569,
      570,  573,  572,  574,  575, 1309,  576, 1308,  582, 1307,
      577,  585,  583,  584,  578,  589,  595, 1306,  594,  593,
      605,  610,  613,  614,  615,  616, 1305,  618,  619,  620,
      621, 1304,  623,  625,  626,  629,  630,  631,  632,  638,
      635,  640,  642,  641,  644,  646,  647,  651,  661,  658,
      662,  663,  665, 1303,  664,  669, 1302,  670,  668,  672,

      673, 1301,  675,  681, 1300,  677,  689,  686,  692, 1345,
      695,  700,  711,  712, 1345,  682,  703, 1299,  711, 1298,
     1297,  712, 1296,  715,  716,  717,  718,  719,  720,  721,
      722,  723,  726,  724,  727, 1295,  728, 1294,  734,  730,
      729,  732,  733,  738,  747,  735,  759,  739,  760,  761,
      763,  737,  764,  767,  769, 1293,  770,  771,  772,  776,
     1292,  773,  779,  780, 1291,  782,  786, 1290,  777,  784,
      789,  785,  792,  794,  795,  797,  799, 1289,  801,  802,
      808, 1288,  811,  812,  814, 1287, 1284, 1283,  822, 1345,
     1282, 1281,  815, 1282, 1281,  821,  822,  823,  829,  832,

      833,  835,  837, 1280, 1279, 1278,  838,  840,  841,  842,
      845, 1277,  847, 1276,  848, 1275,  851,  854,  857, 1274,
      862, 1273, 1272,  864,  869,  849,  859,  852, 1271,  858,
      880, 1270,  874,  881, 1269,  882, 1268, 1267, 1266, 1265,
      884, 1264,  886,  887,  889,  890,  891,  893,  894,  895,
      897,  900, 1261,  901,  905,  902,  903,  908,  911,  910,
     1262, 1261,  913, 1214, 1202, 1199,  917,  919, 1178,  914,
      909,  923,  924,  930,  931,  935, 1168,  938,  942,  943,
      945, 1165,  948,  949,  950, 1164,  951, 1163,  952, 1162,
      954,  957,  958,  959, 1160,  961, 1159,  962,  963, 1158,

      964,  965, 1157,  966,  969,  972,  974,  982, 1155,  980,
      984,  986,  987, 1154,  988,  989,  993,  991, 1153, 1152,
      994, 1001, 1007, 1002, 1008, 1011, 1009, 1010, 1150, 1012,
     1018, 1149, 1017, 1148, 1020, 1014, 1147, 1146, 1019, 1022,
     1023, 1145, 1144, 1025, 1032, 1029, 1039, 1040, 1041, 1042,
     1143, 1141, 1045, 1046, 1049, 1048, 1052, 1053, 1050, 1057,
     1059, 1067, 1140, 1069, 1070, 1072, 1074, 1075, 1079, 1080,
     1076, 1078, 1083, 1087, 1084, 1138, 1088, 1086, 1137, 1136,
     1096, 1097, 1089, 1098, 1135, 1100, 1134, 1133, 1131, 1103,
     1130, 1101, 1108, 1110,  368, 1111,  358, 1112, 1120, 1121,

     1123, 1124,  202, 1125,  148, 1128,   56, 1345, 1175, 1180,
     1185, 1191, 1196, 1203, 1204, 1212, 1221, 1225, 1233, 1242,
     1251, 1260
    } ;

static yyconst flex_int16_t yy_def[623] =
    {   0,
      608,    1,  608,  608,  608,  608,  609,  608,  610,  611,
      608,  608,  610,   13,  612,  612,  613,  612,  612,  612,
      612,   16,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  608,
      609,  608,   13,  614,  611,  611,  611,  611,  615,  616,
      617,  618,  612,  608,   48,   16,  613,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  608,   47,   48,  619,
      620,  617,  618,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      619,  621,  619,  620,  622,  608,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  619,  619,  608,
      619,  622,  620,  620,  608,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  608,  608,  620,  608,
      608,  608,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  608,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,    0,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608
    } ;

static yyconst flex_int16_t yy_nxt[1394] =
    {   0,
        4,    5,    5,    6,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   15,   16,
       15,   17,   18,   19,   20,   21,   22,   23,   24,   15,
       25,   26,   15,   27,   28,   29,   30,   31,   15,   32,
       33,   34,   35,   36,   37,   38,   39,   15,   40,   40,
       42,   49,   49,   49,   49,   49,   49,   49,   50,   45,
       44,   45,   51,   45,   45,   45,   45,   44,   46,   42,
       47,   47,   47,   47,   47,   47,   47,   71,   48,   44,
       58,   73,   45,   74,   45,   48,   44,   72,   81,   45,
      147,   82,   59,   75,   44,   45,   60,   61,   90,  142,

       45,   44,   45,   93,   45,   52,   54,   55,   45,  119,
       56,   56,   56,   56,   56,   56,   56,   62,   45,   45,
       45,   45,   91,   63,  126,   45,   64,   97,   45,   98,
       92,   99,   66,   65,   76,   94,  125,   40,   40,   95,
      123,  124,   77,   67,   45,   78,   68,   69,   79,   96,
       70,   45,   45,  140,   80,   45,   45,   45,  106,   83,
      134,   84,  107,   45,   85,  144,  100,   54,   54,   45,
      101,  120,   45,  102,   86,  608,   45,   45,  108,  121,
       45,   87,   88,  103,  116,  122,  104,   89,  608,   45,
      105,   45,  136,   45,  117,  141,  139,  135,   45,   45,

       45,  118,   49,   49,   49,   49,   49,   49,   49,  109,
       45,   45,   45,  110,   45,  145,  111,  112,  222,  148,
       45,  166,  223,   45,  113,  143,  146,  114,  161,  115,
      128,  128,  128,  128,  128,  128,  128,   46,  160,   47,
       47,   47,   47,   47,   47,   47,  137,   48,  159,   45,
       45,  162,  138,   45,   48,   54,   55,   45,   45,  129,
      129,  129,  129,  129,  129,  129,  127,  127,  127,  127,
      127,  127,  127,  149,   45,  153,  150,   45,   45,   45,
       45,   45,  151,  152,  155,  154,  164,  168,   45,   45,
      156,   45,  157,  167,   45,   45,   45,  170,   45,   45,

       45,   45,   45,   45,  163,   45,  171,  158,  169,   45,
       45,  165,   45,  172,  173,   45,  190,  175,  182,   45,
       45,  178,   45,   45,  174,  177,  176,  189,  179,   45,
       45,   45,  181,  184,  180,  183,  185,  187,  186,   45,
       45,  191,   45,  188,  194,  199,   45,   45,   45,  198,
      192,  210,   45,  193,  200,   45,  201,  195,  204,   45,
       45,  196,  207,  197,   45,   45,   45,   45,  203,  205,
      213,  608,   45,  202,  211,  225,   45,  215,  206,  226,
      216,  219,  208,   45,  212,  220,  209,  217,   45,   45,
      214,   45,   45,  218,  127,  127,  127,  127,  127,  127,

      127,   45,   45,  128,  128,  128,  128,  128,  128,  128,
      229,   45,   45,   45,  232,   45,  227,   45,  230,   45,
      228,   45,   45,   45,   45,  231,  233,   45,   45,   45,
       45,  234,   45,  235,  236,  240,   45,  241,  243,   45,
       45,   45,  245,   45,   45,  237,  242,  244,   45,  246,
      247,  238,  239,   45,  248,   45,  250,  249,  253,  251,
       45,  255,  254,   45,   45,   45,   45,   45,  252,  256,
      257,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  265,   45,   45,   45,  262,  266,   45,  258,  259,
      261,  264,  260,  268,   45,  274,  269,   45,   45,  263,

      271,   45,   45,   45,  273,  267,   45,  275,   45,  272,
      279,   45,  270,   45,   45,  276,  277,   45,   45,  278,
       45,  281,   45,   45,  286,   45,   45,   45,   45,  280,
      293,   45,  282,   45,   45,  290,  284,   45,  285,  283,
      287,  297,  288,  298,  289,   45,   45,  291,  302,   45,
      295,  292,  294,  296,   45,  299,  300,   45,  304,  303,
      309,  301,  306,   45,  310,  222,  314,  305,  316,  311,
      315,   45,   45,   45,   45,   45,   45,   45,   45,  307,
       45,   45,   45,   45,   45,   45,   45,  318,  317,  322,
       45,   45,   45,   45,  319,  329,  320,   45,  324,  325,

      339,   45,   45,   45,  326,  321,  333,  323,  332,  328,
      327,  336,  335,   45,  330,  331,  337,  341,   45,  334,
      342,   45,   45,   45,   45,  338,   45,   45,   45,   45,
      340,   45,  343,   45,   45,  346,  348,   45,   45,   45,
       45,  349,  352,   45,  354,  345,   45,  344,   45,   45,
       45,  357,   45,  347,   45,   45,  358,  353,  350,   45,
      355,  359,  351,  364,  361,  362,   45,  356,  360,   45,
       45,   45,   45,   45,  366,  365,   45,   45,   45,  363,
       45,   45,  367,   45,  369,   45,  372,  373,  368,   45,
       45,  370,  222,  371,  374,  377,  387,   45,  222,  383,

      379,  222,  388,  378,  393,  311,  389,  382,  375,  376,
      390,   45,  384,  385,  386,  380,  381,  312,  225,   45,
       45,  391,  392,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,  396,   45,   45,   45,   45,   45,  399,
       45,   45,   45,   45,  394,   45,   45,   45,  404,  405,
      397,  398,  408,  406,  403,   45,  401,  395,  410,  402,
      411,  409,  412,  415,  400,  407,  413,   45,   45,   45,
      417,   45,   45,  416,  414,   45,  419,   45,   45,   45,
       45,   45,  420,  423,   45,   45,  418,   45,   45,  422,
       45,  426,   45,   45,   45,  428,  429,   45,  421,  424,

       45,  430,   45,   45,  425,   45,  434,   45,  437,   45,
       45,  427,  431,  435,  432,  433,   45,  438,  436,   45,
       45,  440,   45,   45,  446,  444,  439,  443,  312,   45,
       45,   45,  453,  441,  450,  442,  445,   45,  447,  454,
       45,   45,  451,   45,  448,   45,   45,  457,   45,   45,
       45,  452,  449,   45,  460,   45,   45,   45,  455,   45,
       45,  461,   45,  458,  456,   45,   45,   45,  463,  459,
       45,  466,   45,  468,  469,  470,  471,   45,  462,  472,
      464,  467,   45,  476,  473,  477,  474,  465,   45,   45,
       45,  475,   45,  478,   45,   45,  481,   45,   45,   45,

      479,   45,   45,   45,  483,   45,  480,  482,   45,   45,
       45,   45,  485,   45,  486,  487,   45,   45,   45,   45,
      484,   45,   45,  488,  489,   45,  490,   45,  497,  492,
      493,   45,   45,  506,  499,  491,  498,  500,   45,   45,
      505,  494,  495,   45,  496,  501,   45,  507,  508,  502,
       45,   45,  503,   45,  504,  510,   45,   45,   45,   45,
       45,  511,   45,  509,  512,   45,   45,   45,  514,   45,
       45,   45,   45,   45,   45,  513,  519,   45,  520,  515,
       45,  516,   45,  522,  517,  518,  528,  525,   45,  524,
       45,  523,   45,  521,   45,   45,   45,   45,  532,   45,

      529,   45,   45,  527,  526,  531,  533,  530,  534,   45,
       45,  537,  535,  538,  539,   45,   45,   45,   45,   45,
       45,  540,   45,  541,  536,   45,   45,   45,   45,  545,
       45,   45,  542,   45,  543,  547,  548,   45,  546,  553,
       45,  544,  554,  557,  550,  552,  549,   45,   45,   45,
       45,  555,  551,   45,   45,  560,   45,   45,   45,  556,
       45,   45,  559,  564,  561,   45,  563,   45,  565,  562,
      558,  568,  573,  566,  567,   45,  570,   45,   45,  572,
       45,  575,   45,   45,   45,  569,   45,   45,   45,  571,
      574,   45,   45,  577,   45,   45,   45,   45,  579,  581,

      580,  582,  583,  585,   45,   45,   45,  586,   45,   45,
      578,   45,  576,  587,  589,  584,   45,  588,   45,   45,
       45,  592,  591,  590,  594,  596,  595,  597,   45,   45,
      593,   45,   45,   45,  598,  600,   45,  599,   45,   45,
      601,   45,   45,   45,   45,   45,   45,  603,   45,   45,
      602,   45,   45,   45,   45,   45,   45,   45,   45,  604,
       45,   45,   45,   45,  606,   45,   45,   45,   45,  605,
       45,   45,   45,   45,  607,   41,   45,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   45,   43,   45,   45,
       45,   45,   45,   45,   53,   53,   53,   53,   53,   53,

       57,   57,   57,   57,   57,  127,  127,   45,  127,   49,
       45,   49,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  132,   45,  132,  132,  132,  132,  132,  132,  132,
      133,  133,  133,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      313,  313,  313,  313,  313,  313,  313,  313,  313,   45,
       45,  313,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  313,  313,  308,  308,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,  313,  312,  222,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  131,
      608,   45,  608,  608,    3,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608

    } ;

static yyconst flex_int16_t yy_chk[1394] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        9,   11,   11,   11,   11,   11,   11,   11,   12,   21,
        9,   69,   12,   24,  607,   18,   65,    9,   10,   13,
       10,   10,   10,   10,   10,   10,   10,   21,   10,   13,
       18,   22,   35,   22,   26,   10,   13,   21,   24,   28,
       69,   24,   18,   22,   49,   19,   18,   18,   26,   65,

       30,   49,   39,   28,   38,   13,   16,   16,   27,   35,
       16,   16,   16,   16,   16,   16,   16,   19,   20,   37,
       23,   29,   27,   19,   39,   63,   19,   30,   58,   30,
       27,   30,   20,   19,   23,   29,   38,   40,   40,   29,
       37,   37,   23,   20,   32,   23,   20,   20,   23,   29,
       20,   67,   31,   63,   23,   25,  605,   36,   32,   25,
       58,   25,   32,   34,   25,   67,   31,   44,   44,   62,
       31,   36,   60,   31,   25,   55,   55,   64,   32,   36,
       59,   25,   25,   31,   34,   36,   31,   25,   56,   56,
       31,   33,   60,   66,   34,   64,   62,   59,   70,   68,

       78,   34,   42,   42,   42,   42,   42,   42,   42,   33,
      603,   77,   83,   33,   61,   68,   33,   33,  130,   70,
       79,   83,  130,   76,   33,   66,   68,   33,   78,   33,
       46,   46,   46,   46,   46,   46,   46,   47,   77,   47,
       47,   47,   47,   47,   47,   47,   61,   47,   76,   72,
       74,   79,   61,   73,   47,   48,   48,   71,   81,   48,
       48,   48,   48,   48,   48,   48,   54,   54,   54,   54,
       54,   54,   54,   71,   75,   73,   71,   80,   82,   87,
       85,   88,   71,   72,   74,   73,   81,   85,   84,   90,
       75,   91,   75,   84,   92,   94,   93,   88,   95,   96,

       97,  100,   98,  105,   80,  101,   88,   75,   87,  102,
      110,   82,  104,   88,   88,  103,  105,   91,   97,  106,
      107,   94,  118,  111,   90,   93,   92,  104,   94,  108,
      109,  115,   96,  100,   95,   98,  101,  103,  102,  120,
      112,  106,  113,  103,  108,  111,  114,  116,  117,  110,
      107,  118,  119,  107,  112,  122,  113,  109,  115,  121,
      124,  109,  117,  109,  125,  123,  597,  126,  114,  116,
      120,  129,  129,  113,  119,  131,  595,  122,  116,  131,
      122,  125,  117,  134,  119,  126,  117,  123,  136,  140,
      121,  138,  137,  124,  127,  127,  127,  127,  127,  127,

      127,  128,  144,  128,  128,  128,  128,  128,  128,  128,
      137,  139,  141,  142,  140,  143,  134,  145,  138,  146,
      136,  149,  147,  148,  150,  139,  141,  152,  155,  151,
      153,  142,  154,  143,  144,  147,  159,  148,  150,  156,
      157,  158,  152,  162,  160,  145,  149,  151,  161,  153,
      154,  146,  146,  163,  155,  164,  157,  156,  160,  158,
      165,  162,  161,  171,  169,  170,  172,  174,  159,  163,
      164,  175,  176,  173,  179,  178,  182,  184,  183,  185,
      187,  174,  186,  188,  190,  171,  175,  192,  165,  169,
      170,  173,  169,  178,  189,  186,  179,  191,  193,  172,

      183,  194,  195,  196,  185,  176,  198,  187,  199,  184,
      190,  201,  182,  202,  204,  187,  188,  200,  203,  189,
      205,  192,  206,  208,  198,  210,  207,  211,  214,  191,
      204,  215,  193,  217,  212,  202,  195,  227,  196,  194,
      199,  208,  200,  210,  201,  216,  218,  202,  215,  219,
      206,  203,  205,  207,  220,  211,  212,  229,  217,  216,
      222,  214,  219,  231,  222,  223,  225,  218,  227,  223,
      225,  230,  233,  236,  238,  237,  239,  240,  241,  220,
      243,  242,  244,  245,  247,  251,  255,  230,  229,  237,
      249,  253,  254,  252,  231,  242,  233,  256,  239,  240,

      255,  260,  259,  257,  240,  236,  247,  238,  245,  241,
      240,  252,  251,  261,  243,  244,  253,  257,  262,  249,
      259,  263,  264,  265,  266,  254,  268,  269,  270,  271,
      256,  273,  260,  274,  275,  263,  265,  276,  277,  278,
      279,  266,  270,  281,  273,  262,  280,  261,  282,  284,
      283,  276,  285,  264,  286,  287,  277,  271,  268,  288,
      274,  278,  269,  283,  280,  281,  290,  275,  279,  289,
      291,  292,  295,  293,  285,  284,  299,  296,  298,  282,
      300,  301,  286,  303,  288,  306,  291,  292,  287,  304,
      316,  289,  308,  290,  293,  298,  308,  307,  309,  306,

      300,  311,  309,  299,  316,  311,  312,  304,  295,  296,
      312,  317,  306,  306,  307,  301,  303,  313,  314,  319,
      322,  313,  314,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  334,  322,  333,  335,  337,  341,  340,  326,
      342,  343,  339,  346,  317,  352,  344,  348,  331,  332,
      324,  325,  335,  333,  330,  345,  328,  319,  339,  329,
      340,  337,  341,  344,  327,  334,  342,  347,  349,  350,
      346,  351,  353,  345,  343,  354,  348,  355,  357,  358,
      359,  362,  349,  352,  360,  369,  347,  363,  364,  351,
      366,  355,  370,  372,  367,  358,  359,  371,  350,  353,

      373,  360,  374,  375,  354,  376,  366,  377,  370,  379,
      380,  357,  362,  367,  363,  364,  381,  371,  369,  383,
      384,  373,  385,  393,  380,  377,  372,  376,  389,  396,
      397,  398,  389,  374,  384,  375,  379,  399,  381,  393,
      400,  401,  384,  402,  383,  403,  407,  398,  408,  409,
      410,  385,  383,  411,  401,  413,  415,  426,  396,  417,
      428,  402,  418,  399,  397,  419,  430,  427,  407,  400,
      421,  410,  424,  413,  415,  417,  418,  425,  403,  419,
      408,  411,  433,  426,  421,  427,  424,  409,  431,  434,
      436,  425,  441,  428,  443,  444,  433,  445,  446,  447,

      430,  448,  449,  450,  436,  451,  431,  434,  452,  454,
      456,  457,  443,  455,  444,  445,  458,  471,  460,  459,
      441,  463,  470,  446,  447,  467,  448,  468,  456,  450,
      451,  472,  473,  471,  458,  449,  457,  459,  474,  475,
      470,  452,  454,  476,  455,  460,  478,  472,  473,  463,
      479,  480,  467,  481,  468,  475,  483,  484,  485,  487,
      489,  476,  491,  474,  478,  492,  493,  494,  480,  496,
      498,  499,  501,  502,  504,  479,  487,  505,  489,  481,
      506,  483,  507,  492,  484,  485,  501,  496,  510,  494,
      508,  493,  511,  491,  512,  513,  515,  516,  506,  518,

      502,  517,  521,  499,  498,  505,  507,  504,  508,  522,
      524,  512,  510,  513,  515,  523,  525,  527,  528,  526,
      530,  516,  536,  517,  511,  533,  531,  539,  535,  523,
      540,  541,  518,  544,  521,  525,  526,  546,  524,  533,
      545,  522,  535,  540,  528,  531,  527,  547,  548,  549,
      550,  536,  530,  553,  554,  545,  556,  555,  559,  539,
      557,  558,  544,  549,  546,  560,  548,  561,  550,  547,
      541,  555,  559,  553,  554,  562,  557,  564,  565,  558,
      566,  561,  567,  568,  571,  556,  572,  569,  570,  557,
      560,  573,  575,  564,  578,  574,  577,  583,  566,  568,

      567,  569,  570,  572,  581,  582,  584,  573,  586,  592,
      565,  590,  562,  574,  577,  571,  593,  575,  594,  596,
      598,  582,  581,  578,  584,  590,  586,  592,  599,  600,
      583,  601,  602,  604,  593,  596,  606,  594,  591,  589,
      598,  588,  587,  585,  580,  579,  576,  600,  563,  552,
      599,  551,  543,  542,  538,  537,  534,  532,  529,  601,
      520,  519,  514,  509,  604,  503,  500,  497,  495,  602,
      490,  488,  486,  482,  606,  609,  477,  609,  609,  609,
      609,  609,  609,  609,  610,  610,  469,  610,  611,  611,
      611,  611,  611,  611,  612,  612,  612,  612,  612,  612,

      613,  613,  613,  613,  613,  614,  614,  466,  614,  615,
      465,  615,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  617,  464,  617,  617,  617,  617,  617,  617,  617,
      618,  618,  618,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  462,
      461,  453,  442,  440,  439,  438,  437,  435,  432,  429,
      423,  422,  420,  416,  414,  412,  406,  405,  404,  395,
      394,  392,  391,  388,  387,  386,  382,  378,  368,  365,

      361,  356,  338,  336,  323,  321,  320,  318,  305,  302,
      297,  294,  272,  267,  258,  250,  248,  246,  235,  234,
      232,  228,  226,  224,  221,  213,  209,  197,  181,  180,
      177,  168,  167,  166,  135,   99,   89,   86,   53,   50,
       43,   15,   14,    3,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/**
 * Copyright (c) 2006- Facebook
 * Distributed under the Thrift Software License
 *
 * See accompanying file LICENSE or visit the Thrift site at:
 * http://developers.facebook.com/thrift/
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 16 "thriftl.ll"

#include <string>
#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1195 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 65 "thriftl.ll"


#line 1380 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 609 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1345 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 67 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 69 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 71 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 73 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 275 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 288 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2189 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 609 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 609 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 608);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 288 "thriftl.ll"



/* vim: filetype=lex
*/

