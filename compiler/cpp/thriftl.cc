
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1641] =
    {   0,
        1,  160,    1,  160,  167,  165,  166,    1,  165,  166,
        1,  166,  163,  165,  166,    5,  165,  166,    6,  165,
      166,  160,  165,  166,  160,  162,  165,  166,  165,  166,
      165,  166,  158,  160,  165,  166,  158,  160,  165,  166,
      161,  162,  165,  166,  161,  162,  165,  166,  161,  162,
      165,  166,  161,  165,  166,  161,  162,  165,  166,  161,
      162,  165,  166,  161,  162,  165,  166,  161,  162,  165,
      166,  161,  162,  165,  166,  161,  162,  165,  166,  161,
      162,  165,  166,  161,  162,  165,  166,  161,  162,  165,
      166,  161,  162,  165,  166,  161,  162,  165,  166,  161,

      162,  165,  166,  161,  162,  165,  166,  161,  162,  165,
      166,  161,  162,  165,  166,  161,  162,  165,  166,  161,
      162,  165,  166,  161,  162,  165,  166,  161,  162,  165,
      166,  161,  162,  165,  166,  161,  162,  165,  166,  161,
      162,  165,  166,    1,    5,  158,  160,  162,  162,  158,
      160,  162,  162,  160,    4,  161,  162,  161,  162,  162,
      160,  161,  162,  161,  162,  161,  161,  161,  162,  161,
      162,  161,  162,  161,  162,   66,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,

       80,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  104,  161,  162,  161,  162,  107,  161,  162,  111,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  119,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  160,  160,  162,
      160,  162,    4,  159,  161,  162,   54,  161,  162,  161,
      161,  161,  161,  161,  161,  161,  162,  161,  162,   64,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,   76,  161,  162,   78,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,

       86,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,   99,
      161,  162,  161,  162,  161,  162,  161,  162,   29,  161,
      162,   30,  161,  162,   31,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,   37,  161,  162,  161,  162,  161,  162,
      161,  162,  115,  161,  162,  161,  162,  117,  161,  162,
      118,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,   39,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      143,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  149,  161,  162,  150,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  156,  161,  162,  161,  162,  161,  162,
        2,  161,  162,  161,  161,  161,  161,  161,  161,  161,
      161,  162,  161,  162,   65,  161,  162,  161,  162,  161,

      162,  161,  162,  161,  162,   27,  161,  162,  161,  162,
       28,  161,  162,   70,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   82,  161,  162,   83,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   48,  161,  162,  161,  162,   95,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  103,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,   38,  161,  162,  161,  162,  161,  162,
      161,  162,  116,  161,  162,  161,  162,  161,  162,  120,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  127,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  132,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  138,  161,
      162,  139,  161,  162,  161,  162,  161,  162,  142,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,  161,  162,   26,  161,  162,  161,  162,
      153,  161,  162,  161,  162,  155,  161,  162,  161,  162,
      161,  162,    3,    2,  164,   53,  161,  162,  161,  161,
      161,  161,  161,  161,  161,  161,  162,   63,  161,  162,
      161,  162,   52,  161,  162,   68,  161,  162,  161,  162,
       69,  161,  162,   71,  161,  162,   72,  161,  162,   73,
      161,  162,  161,  162,   49,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,   85,
      161,  162,  161,  162,  161,  162,   90,  161,  162,  161,

      162,  161,  162,  161,  162,  161,  162,  161,  162,   96,
      161,  162,  161,  162,   98,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  122,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  126,  161,  162,  161,  162,  161,
      162,  161,  162,  129,  161,  162,  161,  162,  161,  162,
       36,  161,  162,  161,  162,  161,  162,   35,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  135,  161,

      162,  161,  162,  161,  162,  140,  161,  162,  161,  162,
      161,  162,  144,  161,  162,   43,  145,  161,  162,  161,
      162,  161,  162,  148,  161,  162,  161,  162,  161,  162,
      154,  161,  162,  161,  162,  161,  162,  161,  162,  157,
      161,  162,    3,  164,    2,  164,  161,  161,  161,  161,
      161,  161,  161,  161,  162,   67,  161,  162,   34,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,   79,  161,  162,
       32,  161,  162,  161,  162,   84,  161,  162,  161,  162,
       88,  161,  162,  161,  162,  161,  162,   93,  161,  162,

       94,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  102,  161,  162,  161,  162,  106,  161,  162,  161,
      162,  108,  161,  162,  161,  162,  161,  162,  161,  162,
      112,  161,  162,  113,  161,  162,  161,  162,  114,  161,
      162,   40,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  121,  125,  161,  162,  161,  162,
      161,  162,  161,  162,  128,  161,  162,  131,  161,  162,
      161,  162,  161,  162,  133,  161,  162,  161,  162,  134,
      161,  162,   33,  161,  162,   42,  161,  162,  136,  161,
      162,  161,  162,   46,  161,  162,  161,  162,  161,  162,

      146,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  164,
      161,   56,  161,  161,  161,  161,  161,  161,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   75,  161,  162,   77,  161,  162,   81,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,   45,  161,  162,   97,  161,  162,  100,  161,  162,
      161,  162,  161,  162,   25,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  123,  161,  162,  161,  162,  161,  162,  161,  162,

      161,  162,  161,  162,   47,  161,  162,  161,  162,  161,
      162,  161,  162,   41,  161,  162,  161,  162,  151,  161,
      162,  161,  162,   20,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,   57,  161,  161,   59,  161,
      161,  161,   62,  161,  162,  161,  162,   74,  161,  162,
      161,  162,  161,  162,   10,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,   92,  161,  162,  161,  162,
      101,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,   51,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  130,  161,  162,   50,  161,  162,

      161,  162,  161,  162,  161,  162,  161,  162,  147,  161,
      162,  152,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   55,  161,  161,  161,  161,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,   91,
      161,  162,   44,  161,  162,  161,  162,  161,  162,  110,
      161,  162,  161,  162,    7,  161,  162,  161,  162,  161,
      162,  124,  161,  162,   15,  161,  162,  161,  162,  161,
      162,  161,  162,  141,  161,  162,   24,  161,  162,  161,
      162,  161,  162,  161,  162,  161,   60,  161,  161,  161,
      162,  161,  162,  161,  162,  161,  162,   87,  161,  162,

       89,  161,  162,  105,  161,  162,  109,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  161,  161,
      162,    9,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,   58,  161,
      161,   12,  161,  162,  161,  162,  161,  162,   11,  161,
      162,   16,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  137,  161,  162,  161,  162,   22,  161,  162,
       21,  161,  162,   61,  161,    8,  161,  162,  161,  162,

       14,  161,  162,  161,  162,  161,  162,  161,  162,   23,
      161,  162,  161,  162,   17,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,   13,  161,  162,
      161,  162,   19,  161,  162,  161,  162,   18,  161,  162
    } ;

static yyconst flex_int16_t yy_accept[772] =
    {   0,
        1,    3,    5,    6,    8,   11,   13,   16,   19,   22,
       25,   29,   31,   33,   37,   41,   45,   49,   53,   56,
       60,   64,   68,   72,   76,   80,   84,   88,   92,   96,
      100,  104,  108,  112,  116,  120,  124,  128,  132,  136,
      140,  144,  145,  146,  146,  148,  148,  149,  150,  153,
      154,  155,  155,  156,  156,  158,  160,  160,  161,  164,
      166,  167,  168,  170,  172,  174,  176,  179,  181,  183,
      185,  187,  189,  191,  193,  195,  197,  199,  201,  204,
      206,  208,  210,  212,  214,  216,  218,  220,  222,  224,
      226,  228,  230,  232,  235,  237,  240,  243,  245,  247,

      249,  251,  253,  255,  257,  259,  261,  263,  265,  268,
      270,  272,  274,  276,  278,  280,  282,  284,  286,  288,
      290,  292,  294,  296,  298,  300,  302,  304,  306,  308,
      310,  312,  314,  316,  318,  320,  322,  324,  326,  328,
      329,  331,  333,  333,  333,  334,  335,  337,  340,  341,
      342,  343,  344,  345,  346,  348,  350,  353,  355,  357,
      359,  361,  363,  365,  367,  369,  371,  373,  375,  377,
      379,  381,  383,  385,  387,  390,  393,  395,  397,  399,
      401,  404,  406,  408,  410,  412,  414,  416,  418,  420,
      423,  425,  427,  429,  432,  435,  438,  440,  442,  444,

      446,  448,  450,  452,  454,  457,  459,  461,  463,  466,
      468,  471,  474,  476,  478,  480,  482,  484,  486,  488,
      490,  492,  494,  496,  498,  500,  502,  504,  506,  508,
      510,  512,  515,  517,  519,  521,  523,  525,  527,  529,
      531,  533,  535,  537,  539,  541,  544,  546,  548,  550,
      552,  554,  556,  559,  562,  564,  566,  568,  570,  572,
      574,  577,  579,  581,  581,  581,  581,  581,  581,  582,
      584,  585,  586,  587,  588,  589,  590,  591,  593,  595,
      598,  600,  602,  604,  606,  609,  611,  614,  617,  619,
      621,  623,  625,  627,  629,  631,  633,  635,  637,  639,

      641,  643,  646,  649,  651,  653,  655,  657,  659,  661,
      663,  666,  668,  671,  673,  675,  677,  679,  681,  683,
      685,  688,  690,  692,  694,  696,  698,  700,  702,  704,
      707,  709,  711,  713,  716,  718,  720,  723,  725,  727,
      729,  731,  733,  735,  737,  739,  742,  744,  746,  748,
      750,  752,  754,  757,  759,  761,  763,  765,  767,  769,
      771,  773,  775,  777,  779,  782,  785,  787,  789,  792,
      794,  796,  798,  800,  802,  804,  806,  809,  811,  814,
      816,  819,  821,  823,  823,  823,  824,  824,  824,  824,
      824,  826,  829,  830,  831,  832,  833,  834,  835,  836,

      838,  841,  843,  846,  849,  851,  854,  857,  860,  863,
      865,  868,  870,  872,  874,  876,  878,  880,  882,  884,
      886,  888,  890,  893,  895,  897,  900,  902,  904,  906,
      908,  910,  913,  915,  918,  920,  922,  924,  926,  928,
      930,  932,  934,  936,  938,  940,  942,  944,  946,  948,
      950,  952,  954,  957,  959,  961,  963,  965,  968,  970,
      972,  974,  977,  979,  981,  984,  986,  988,  991,  993,
      995,  997,  999, 1002, 1004, 1006, 1009, 1011, 1013, 1016,
     1020, 1022, 1024, 1027, 1029, 1031, 1034, 1036, 1038, 1040,
     1043, 1043, 1044, 1044, 1045, 1045, 1047, 1048, 1049, 1050,

     1051, 1052, 1053, 1054, 1056, 1059, 1062, 1064, 1066, 1068,
     1070, 1072, 1074, 1076, 1078, 1081, 1084, 1086, 1089, 1091,
     1094, 1096, 1098, 1101, 1104, 1106, 1108, 1110, 1112, 1115,
     1117, 1120, 1122, 1125, 1127, 1129, 1131, 1134, 1137, 1139,
     1142, 1145, 1147, 1149, 1151, 1153, 1155, 1159, 1161, 1163,
     1165, 1168, 1171, 1173, 1175, 1178, 1180, 1183, 1186, 1189,
     1192, 1194, 1197, 1199, 1201, 1204, 1206, 1208, 1210, 1212,
     1214, 1216, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227,
     1228, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1246,
     1249, 1252, 1254, 1256, 1258, 1260, 1262, 1265, 1268, 1271,

     1273, 1275, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292,
     1295, 1297, 1299, 1301, 1303, 1305, 1308, 1310, 1312, 1314,
     1317, 1319, 1322, 1324, 1327, 1329, 1331, 1333, 1335, 1336,
     1338, 1339, 1341, 1342, 1343, 1346, 1348, 1351, 1353, 1355,
     1358, 1360, 1362, 1364, 1366, 1369, 1371, 1374, 1376, 1378,
     1380, 1382, 1384, 1387, 1389, 1391, 1393, 1395, 1398, 1401,
     1403, 1405, 1407, 1409, 1412, 1415, 1417, 1419, 1421, 1423,
     1425, 1426, 1427, 1428, 1430, 1432, 1434, 1436, 1438, 1440,
     1443, 1446, 1448, 1450, 1453, 1455, 1458, 1460, 1462, 1465,
     1468, 1470, 1472, 1474, 1477, 1480, 1482, 1484, 1486, 1487,

     1489, 1490, 1492, 1494, 1496, 1498, 1501, 1504, 1507, 1510,
     1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1529,
     1530, 1532, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549,
     1551, 1553, 1555, 1557, 1559, 1561, 1562, 1565, 1567, 1569,
     1572, 1575, 1577, 1579, 1581, 1583, 1586, 1588, 1591, 1594,
     1596, 1599, 1601, 1604, 1606, 1608, 1610, 1613, 1615, 1618,
     1620, 1622, 1624, 1626, 1628, 1631, 1633, 1636, 1638, 1641,
     1641
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   28,   28,   28,   28,   28,
        6,    1,    6,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[783] =
    {   0,
        0,    0, 1643, 1644,   63,   65, 1644,    0, 1644,   59,
       93,   58,   70,   69, 1580, 1632,   71,  129, 1602,   77,
      105,  112,   87,  162,  144,   69,  175,   74,   76,   79,
      163,  155,  190,  146,  204,  172,  130,  191,   78,  164,
       81,   95,    0,  256, 1577,  267,    0,  274,  283,  295,
      302, 1631,    0,    0, 1628,   75,  315,  322,  313,   82,
        0,  320,   92,  145,   84,   90,  177,  111,  187,  148,
      199,  206,  296,  213,  314,  150,  211,  337,  186,  189,
      315,  334,  339,  228,  250,  241,  338,  343,  347,  348,
      349,  234,  352, 1627,  350,  351, 1626,  355,  360,  361,

      362,  214,  368,  370,  364,  365,  374,  375, 1625,  377,
      379,  376,  389,  380,  222,  381,  396,  387,  394,  393,
      390,  401,  404,  412,  398,  403,  415,  420,  413,  430,
      438,  439,  440,  447,  455,  416,  452,  216,  456,  497,
      504,  516,  156,  462,    0,    0,  459, 1624, 1603, 1604,
      448, 1603, 1606, 1609,  467,  454, 1618,  469,  461,  483,
      491,  497,  473,  498,  481,  496,  531,  492,  494,  532,
      533,  535,  536,  534,  539,  543,  541,  544,  545,  549,
      551,  542,  546,  556,  547,  557,  548,  555,  565,  559,
      562,  567,  553, 1617, 1616, 1615,  560,  561,  568,  558,

      571,  570,  578,  573, 1614,  608,  610,  611, 1613,  612,
     1612, 1611,  613,  614,  615,  616,  617,  619,  618,  623,
      624,  620,  625,  621,  626,  628,  627,  629,  636,  630,
      631, 1610,  638,  633,  632,  635,  637,  645,  639,  653,
      643,  641,  634,  647,  691, 1609,  692,  693,  650,  695,
      696,  697, 1608, 1607,  651,  698,  702,  656,  701,  703,
     1606,  704,  705, 1607,  552,  708, 1606,  709, 1601,  708,
     1592, 1576, 1580, 1577, 1576, 1570, 1575,  709,  712, 1595,
      714,  713,  715,  716, 1594,  717, 1593, 1592,  718,  719,
      720,  721,  722,  724,  736,  723,  738,  728,  737,  739,

      741, 1591,  743,  747,  750,  744,  752,  748,  753,  749,
     1590,  759, 1589,  764,  765,  769,  766,  772,  773,  775,
     1588,  777,  776,  789,  791,  794,  793,  792,  795, 1587,
      797,  798,  801, 1586,  803,  806, 1585,  808,  812,  809,
      813,  814,  816,  817,  819, 1584,  818,  825,  820,  826,
      827,  830, 1583,  829,  831,  832,  835,  836,  841,  842,
      849,  844,  851,  845, 1582, 1581,  847,  856, 1580,  857,
      860,  862,  864,  865,  867,  868, 1579,  872, 1578,  873,
     1577,  886,  878,  890,  891, 1644,  896,  898,  904,  911,
     1644, 1576, 1549, 1545, 1559, 1560, 1557, 1553, 1555,  887,

     1568,  875, 1567, 1566,  897, 1565, 1564, 1563, 1562,  903,
     1561,  910,  914,  915,  919,  920,  922,  923,  925,  926,
      928,  927, 1560,  931,  933, 1559,  934,  936,  937,  935,
      942, 1558,  938, 1557,  944,  939,  940,  941,  943,  949,
      952,  946,  950,  948,  958,  956,  954,  961,  947,  955,
      967,  970, 1556,  968,  978,  987,  991, 1555,  994,  997,
      996, 1554, 1002, 1003, 1553, 1004, 1005, 1552, 1006, 1007,
     1011, 1008, 1551, 1013, 1009, 1014, 1015, 1018, 1550, 1549,
     1016, 1020, 1548, 1021, 1022, 1547, 1025, 1029, 1023, 1546,
     1543, 1542, 1029, 1644, 1541, 1540, 1515, 1511, 1510, 1511,

     1508, 1513, 1509, 1026, 1534, 1533, 1028, 1032, 1033, 1034,
     1035, 1041, 1037, 1038, 1532, 1531, 1049, 1530, 1042, 1054,
     1048, 1061, 1529, 1069, 1072, 1075, 1077, 1078, 1528, 1079,
     1527, 1084, 1526, 1085, 1086, 1089, 1525, 1524, 1091, 1523,
     1522, 1093, 1094, 1090, 1092, 1095, 1521, 1096, 1099, 1100,
     1520, 1519, 1098, 1101, 1518, 1106, 1517, 1516, 1515, 1514,
     1103, 1513, 1104, 1105, 1512, 1108, 1109, 1110, 1111, 1112,
     1115, 1125, 1127, 1509, 1481,    0, 1480, 1490, 1478, 1493,
     1481, 1130, 1131, 1137, 1139, 1141, 1143, 1145, 1504, 1503,
     1502, 1153, 1154, 1149, 1148, 1155, 1501, 1500, 1499, 1158,

     1159, 1498, 1156, 1160, 1162, 1163, 1164, 1165, 1169, 1497,
     1170, 1167, 1168, 1173, 1172, 1461, 1185, 1174, 1186, 1431,
     1187, 1428, 1189, 1427, 1191, 1193, 1196, 1198, 1397,    0,
     1401,    0, 1394, 1412, 1421, 1200, 1419, 1207, 1210, 1418,
     1209, 1212, 1211, 1213, 1417, 1218, 1416, 1216, 1219, 1221,
     1222, 1230, 1414, 1228, 1224, 1233, 1235, 1413, 1412, 1240,
     1231, 1232, 1241, 1411, 1410, 1225, 1244, 1245, 1242,    0,
     1387, 1379, 1395, 1246, 1247, 1248, 1249, 1251, 1252, 1406,
     1404, 1253, 1260, 1400, 1254, 1399, 1267, 1276, 1397, 1395,
     1256, 1277, 1278, 1394, 1391, 1279, 1282, 1283, 1360,    0,

     1372, 1287, 1288, 1298, 1296, 1385, 1384, 1383, 1382, 1299,
     1300, 1302, 1294, 1305, 1307, 1308, 1303, 1310, 1352, 1351,
     1309, 1378, 1311, 1312, 1314, 1315, 1319, 1316, 1317, 1318,
     1320, 1323, 1327, 1329,    0, 1348,  655, 1334, 1331,  654,
      648, 1345, 1342, 1352, 1354,  642, 1356,  640,  552,    0,
      482, 1357,  480, 1358, 1359, 1363,  475, 1364,  268, 1366,
     1367, 1369, 1371, 1372,  252, 1373,   86, 1375,   80, 1644,
     1438, 1442, 1445, 1450, 1454, 1461, 1468, 1471, 1477, 1484,
     1491, 1498
    } ;

static yyconst flex_int16_t yy_def[783] =
    {   0,
      770,    1,  770,  770,  770,  770,  770,  771,  770,  772,
      773,  770,  770,  772,   14,  774,  774,  774,  775,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  770,  771,  770,   14,  770,  773,  773,  773,  773,
      770,  776,  777,  778,  774,  774,  770,  773,   24,  774,
      775,  775,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  770,
      773,  773,  779,  780,  777,  778,  774,  774,  775,  775,
      775,  775,  775,  775,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  779,  781,  779,  780,  782,  770,  774,
      775,  775,  775,  775,  775,  775,  775,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  779,  779,  770,  779,  782,  780,  780,
      770,  774,  775,  775,  775,  775,  775,  775,  775,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      770,  770,  780,  770,  770,  770,  775,  775,  775,  775,

      775,  775,  775,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  770,  775,  775,  775,  775,  775,  775,
      775,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  775,  775,
      775,  775,  775,  775,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  775,  775,

      775,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  775,  775,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  775,  775,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,    0,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770
    } ;

static yyconst flex_int16_t yy_nxt[1709] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,   10,   11,   12,
       13,   14,   15,   15,   15,   15,   15,   15,   16,   17,
       16,   16,   18,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   19,   20,   21,
       22,   23,   24,   25,   26,   16,   27,   28,   16,   29,
       30,   31,   32,   33,   16,   34,   35,   36,   37,   38,
       39,   40,   41,   16,   42,   42,   42,   42,   44,   51,
       51,   51,   51,   51,   51,   51,   52,   47,   44,   47,
       53,   46,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   46,   47,   56,   47,   47,   42,   42,   47,  147,

       47,   46,   48,  148,   49,   49,   49,   49,   49,   49,
       49,   46,   98,   47,   99,   50,   63,  101,   89,   47,
       47,   90,  100,  135,  136,  157,   64,  139,   65,   78,
       54,  102,   66,   67,  158,   50,   57,   58,   47,   79,
       59,   59,   59,   59,   59,   59,   59,   68,  155,   80,
       73,   69,   47,   47,   47,  161,   47,   70,   47,   60,
       71,   74,  265,   47,   75,   76,  266,   72,   77,   57,
       58,   47,   47,   59,   59,   59,   59,   59,   59,   59,
       47,  130,   84,   47,  116,   47,  131,   91,  117,   92,
       85,  156,   93,   86,   47,   47,   87,   47,   47,   47,

      163,  103,   88,  172,  118,  104,  107,   47,  108,  105,
      109,   81,   47,   82,   47,  106,  137,  127,   94,   47,
      138,   47,   47,   83,   47,   95,   96,  128,  110,  132,
       47,   97,  111,  159,  129,  112,   47,  133,  162,  160,
      178,  164,   47,  134,  177,  113,  119,  195,  114,   47,
      120,  168,  115,  121,  122,  206,  173,  262,   47,  221,
       47,  123,  124,  165,  125,  169,  126,   51,   51,   51,
       51,   51,   51,   51,   57,   57,   47,  187,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  141,  141,  141,
      141,  141,   48,  189,   49,   49,   49,   49,   49,   49,

       49,  188,   57,   58,   47,   50,  142,  142,  142,  142,
      142,  142,  142,   51,   51,   51,   51,   51,   51,   51,
      770,   47,   47,   47,   46,   50,  140,  140,  140,  140,
      140,  140,  140,  142,  142,  142,  142,  142,  142,  142,
      149,  150,   47,  151,   46,   47,   47,   47,  152,  153,
      154,   47,  166,  167,  170,   47,   47,   47,   47,   47,
       47,  179,   55,   47,   55,  171,  194,  196,   47,   47,
       47,  180,   47,   47,   55,  181,   47,  174,   47,  184,
      175,  185,   47,   47,   47,   47,  176,   47,   47,   47,
      182,  198,  183,  190,  191,   47,  186,   47,   47,  192,

      199,   47,   47,  197,   47,  193,   47,  200,  201,   47,
      203,   47,   47,  211,  202,  205,  213,  204,  207,  220,
       47,   47,  212,   47,   47,  208,  228,  222,   47,  217,
      209,  210,  214,  215,  216,  218,  234,  223,   47,  235,
      224,  219,  236,  229,  239,  230,   47,   47,   47,  231,
      225,  232,  226,  227,  240,   47,  233,  241,  244,  237,
       47,  242,   47,   47,   47,  238,  247,   47,  268,   47,
      243,  248,  269,  260,  273,   47,  249,   47,  245,  250,
      253,   47,  246,   47,  274,  270,  251,  252,   47,   47,
       47,   47,  279,  256,  254,  255,  257,  258,  263,   47,

       47,  259,   47,  281,   47,   47,   47,  261,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  141,  141,  141,
      141,  141,  285,  287,  278,  280,   50,  142,  142,  142,
      142,  142,  142,  142,  282,  284,  286,  283,  288,   47,
       47,   47,   47,   47,   47,  291,   50,   47,  290,   47,
       47,   47,   47,   47,   47,   47,   47,   47,  385,   47,
       47,   47,  386,   47,   47,   47,   47,   47,   47,   47,
       47,  289,  295,   47,  296,   47,   47,  298,   47,   47,
      300,   47,  301,  297,  292,  299,   47,  313,  302,  293,
      294,  303,  305,  316,  306,  304,  311,  307,  312,  314,

      310,  318,  319,  317,  315,  321,  320,  308,  328,  322,
      324,  309,  323,  327,  325,  326,   47,  329,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
      330,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,  332,   47,  339,   47,   47,  333,   47,   47,
      336,   47,   47,   47,   47,  338,  331,  347,  349,  334,
      340,  337,  343,  335,  344,  342,  345,  346,  341,  353,
      356,  358,  350,  360,  348,  351,  367,  362,  354,  357,
      355,  352,  359,  364,  365,  361,  363,  366,  368,   47,

       47,   47,  372,   47,   47,   47,   47,  379,  376,   47,
       47,   47,   47,   47,  265,  390,   47,   47,  387,  391,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,  369,  370,  371,   47,  373,  392,  377,
      378,  382,  374,  375,   47,   47,   47,   47,  381,   47,
      380,   47,   47,  403,  383,   47,   47,   47,   47,  410,
       47,   47,  409,  407,  400,  406,  404,   47,  401,  402,
      412,  405,   47,   47,   47,  408,  417,   47,  416,  411,
       47,   47,  413,   47,   47,   47,  418,  414,  420,  422,
      423,  421,  424,  415,  419,  426,  425,   47,  428,   47,

       47,   47,   47,   47,  429,   47,   47,  432,  427,   47,
      435,   47,  430,  437,   47,  431,   47,   47,  433,  438,
       47,   47,   47,  434,   47,   47,   47,   47,   47,  444,
      436,  439,  442,   47,   47,   47,  445,   47,   47,   47,
       47,  449,  441,   47,   47,  451,  446,  440,  443,   47,
       47,  454,   47,   47,  447,   47,  455,   47,  450,   47,
      448,  458,  456,  452,   47,   47,  453,  464,   47,  457,
       47,  460,   47,   47,  459,   47,   47,  466,  461,  465,
       47,   47,  463,   47,  467,  469,   47,  470,  462,  472,
      475,  474,  468,  471,   47,   47,  265,  265,  478,  473,

      491,  492,  265,  479,  493,   47,  387,  476,  494,  482,
      388,   47,  477,  480,  495,  486,  483,  268,   47,  490,
      481,  496,   47,   47,  487,  504,  484,   47,   47,  485,
       47,   47,  505,   47,   47,   47,   47,  488,  489,   47,
      507,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,  510,   47,   47,   47,   47,   47,  506,
       47,  508,   47,   47,   47,  509,   47,  515,  516,   47,
      518,  519,  514,  512,  517,   47,   47,  513,   47,  523,
      521,  511,  522,  525,  527,  528,   47,  526,  520,  529,
      532,  530,  524,  535,  533,   47,  537,  534,  538,   47,

      531,  536,   47,  540,   47,   47,  542,  539,  544,  541,
       47,   47,   47,   47,   47,   47,   47,   47,  546,   47,
      543,   47,   47,   47,   47,  545,   47,  547,   47,   47,
       47,   47,  548,   47,   47,  388,   47,   47,  551,  574,
       47,   47,   47,   47,  554,   47,   47,  557,  555,   47,
       47,  549,  550,  552,  553,  558,   47,   47,  560,  567,
      564,  563,   47,  556,  561,  559,  582,  571,  568,   47,
      562,  566,  565,  585,  569,  572,  573,   47,  588,  589,
       47,  583,  570,   47,  586,   47,   47,   47,  587,  591,
      584,  592,   47,   47,   47,  590,  593,   47,   47,   47,

       47,   47,   47,   47,   47,  594,   47,   47,   47,   47,
      595,   47,   47,   47,   47,  596,   47,   47,   47,   47,
       47,  601,  599,   47,  604,  603,  602,  605,  597,  606,
      600,  607,  608,   47,  610,   47,  615,  598,   47,   47,
      609,  613,  614,  616,  617,   47,  619,   47,  620,   47,
      621,   47,  611,   47,  612,  618,   47,   47,  622,  623,
      624,   47,   47,   47,   47,  626,   47,   47,   47,  625,
       47,   47,   47,   47,  627,   47,   47,   47,   47,  637,
       47,   47,   47,  639,  628,  640,  636,  635,  638,  644,
      645,  642,  643,   47,   47,   47,  641,   47,  649,   47,

      650,   47,  651,  652,   47,  654,   47,  646,   47,  647,
      648,  655,  656,  653,  659,   47,  657,   47,   47,   47,
       47,   47,  660,  658,   47,  662,   47,   47,  664,   47,
       47,  665,   47,   47,  661,  667,   47,  663,   47,   47,
       47,   47,  674,   47,  669,  668,  666,  677,   47,   47,
       47,  679,   47,   47,   47,   47,   47,   47,  680,   47,
       47,   47,   47,  684,   47,  675,  676,  678,   47,  681,
      685,  683,  686,  682,  689,   47,  687,  690,  693,  692,
      688,  695,  691,  697,   47,   47,   47,   47,  703,  702,
       47,   47,  710,  706,  698,   47,   47,  707,  694,  705,

      696,  704,   47,  709,   47,  711,   47,   47,   47,  708,
       47,   47,  713,   47,  714,   47,   47,   47,   47,   47,
       47,  717,   47,   47,   47,   47,   47,   47,   47,  712,
      722,   47,  716,  721,  718,   47,  723,   47,  724,   47,
      727,  715,   47,  725,  726,  729,  732,  728,  734,  731,
       47,  738,  733,   47,  743,  744,  740,  741,  730,  742,
       47,  746,   47,  747,   47,   47,   47,   47,  739,  748,
      737,   47,   47,  745,   47,   47,  751,   47,  749,   47,
       47,   47,  754,   47,  752,  750,   47,  753,  736,  735,
       47,   47,   47,   47,  720,  758,  756,  719,  757,   47,

      759,  760,   47,   47,  762,   47,  761,   47,   47,  755,
      763,  765,   47,  764,   47,  701,  700,  699,   47,   47,
       47,   47,   47,  766,   47,   47,   47,   47,  768,   47,
      673,  672,  671,  767,  670,   47,   47,  769,   43,   47,
       43,   43,   43,   43,   43,   45,   45,   47,   47,   47,
       47,   47,   55,   55,   55,   55,   55,   61,   61,   61,
       61,  143,  143,  143,  143,  143,  143,  143,  145,   47,
      145,  145,  145,  145,  145,  146,  146,  264,  264,  264,
      264,  264,  264,  264,  267,  267,  267,  267,  267,  267,
      267,  384,  384,  384,  384,  384,  384,  384,  389,  389,

      389,  389,  389,  389,  389,   47,   47,   47,   47,   47,
       47,   47,   47,  634,  633,  632,  631,  630,  629,  389,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,  581,  580,  579,  578,  577,  576,  575,
      389,  389,  384,  384,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,  503,  502,  501,
      500,  499,  498,  497,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,  399,  398,  397,  396,  395,  394,
      393,  389,  388,  265,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,  277,  276,  275,
      272,  271,   47,   47,   47,   47,   47,  144,  770,   62,
       47,  770,  770,    3,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770
    } ;

static yyconst flex_int16_t yy_chk[1709] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,   10,   12,
       12,   12,   12,   12,   12,   12,   13,   26,   14,   17,
       13,   10,   28,   56,   29,   20,   39,   30,  769,   41,
       60,   14,   65,   17,  767,   23,   42,   42,   66,   56,

       63,   10,   11,   60,   11,   11,   11,   11,   11,   11,
       11,   14,   28,   21,   29,   11,   20,   30,   26,   68,
       22,   26,   29,   39,   39,   65,   20,   41,   20,   23,
       14,   30,   20,   20,   66,   11,   18,   18,   37,   23,
       18,   18,   18,   18,   18,   18,   18,   21,   63,   23,
       22,   21,   25,   64,   34,   68,   70,   21,   76,   18,
       21,   22,  143,   32,   22,   22,  143,   21,   22,   24,
       24,   31,   40,   24,   24,   24,   24,   24,   24,   24,
       36,   37,   25,   27,   34,   67,   37,   27,   34,   27,
       25,   64,   27,   25,   79,   69,   25,   80,   33,   38,

       70,   31,   25,   76,   34,   31,   32,   71,   32,   31,
       32,   24,   35,   24,   72,   31,   40,   36,   27,   77,
       40,   74,  102,   24,  138,   27,   27,   36,   33,   38,
      115,   27,   33,   67,   36,   33,   84,   38,   69,   67,
       80,   71,   92,   38,   79,   33,   35,   92,   33,   86,
       35,   74,   33,   35,   35,  102,   77,  138,   85,  115,
      765,   35,   35,   72,   35,   74,   35,   44,   44,   44,
       44,   44,   44,   44,   46,   46,  759,   84,   46,   46,
       46,   46,   46,   46,   46,   48,   48,   48,   48,   48,
       48,   48,   49,   86,   49,   49,   49,   49,   49,   49,

       49,   85,   50,   50,   73,   49,   50,   50,   50,   50,
       50,   50,   50,   51,   51,   51,   51,   51,   51,   51,
       59,   59,   75,   81,   51,   49,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       62,   62,   82,   62,   51,   78,   87,   83,   62,   62,
       62,   88,   73,   73,   75,   89,   90,   91,   95,   96,
       93,   81,   59,   98,   59,   75,   91,   93,   99,  100,
      101,   81,  105,  106,   59,   82,  103,   78,  104,   83,
       78,   83,  107,  108,  112,  110,   78,  111,  114,  116,
       82,   96,   82,   87,   88,  118,   83,  113,  121,   89,

       96,  120,  119,   95,  117,   90,  125,   96,   96,  122,
       99,  126,  123,  105,   98,  101,  107,  100,  103,  114,
      124,  129,  106,  127,  136,  103,  118,  116,  128,  112,
      104,  104,  108,  110,  111,  113,  121,  117,  130,  122,
      117,  113,  123,  119,  125,  119,  131,  132,  133,  119,
      117,  119,  117,  117,  126,  134,  120,  127,  128,  123,
      137,  127,  156,  135,  139,  124,  129,  147,  144,  159,
      127,  130,  144,  136,  151,  155,  130,  158,  128,  130,
      131,  163,  128,  757,  151,  147,  130,  130,  753,  165,
      751,  160,  156,  134,  132,  133,  134,  135,  139,  161,

      168,  135,  169,  159,  166,  162,  164,  137,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  141,  141,  141,
      141,  141,  163,  165,  155,  158,  141,  142,  142,  142,
      142,  142,  142,  142,  160,  162,  164,  161,  166,  167,
      170,  171,  174,  172,  173,  169,  141,  175,  168,  177,
      182,  176,  178,  179,  183,  185,  187,  180,  265,  181,
      749,  193,  265,  188,  184,  186,  200,  190,  197,  198,
      191,  167,  172,  189,  173,  192,  199,  175,  202,  201,
      177,  204,  178,  174,  170,  176,  203,  185,  179,  171,
      171,  180,  181,  188,  181,  180,  183,  181,  184,  186,

      182,  190,  191,  189,  187,  193,  192,  181,  202,  197,
      198,  181,  197,  201,  199,  200,  206,  203,  207,  208,
      210,  213,  214,  215,  216,  217,  219,  218,  222,  224,
      204,  220,  221,  223,  225,  227,  226,  228,  230,  231,
      235,  234,  243,  236,  229,  237,  233,  239,  748,  242,
      746,  241,  207,  238,  217,  244,  741,  208,  249,  255,
      214,  240,  740,  737,  258,  216,  206,  224,  226,  210,
      218,  215,  220,  213,  221,  219,  222,  223,  218,  229,
      233,  235,  227,  237,  225,  227,  243,  238,  230,  234,
      231,  228,  236,  240,  241,  237,  239,  242,  244,  245,

      247,  248,  249,  250,  251,  252,  256,  258,  255,  259,
      257,  260,  262,  263,  266,  268,  270,  278,  266,  268,
      279,  282,  281,  283,  284,  286,  289,  290,  291,  292,
      293,  296,  294,  245,  247,  248,  298,  250,  270,  256,
      257,  262,  251,  252,  295,  299,  297,  300,  260,  301,
      259,  303,  306,  282,  263,  304,  308,  310,  305,  292,
      307,  309,  291,  289,  278,  286,  283,  312,  279,  281,
      294,  284,  314,  315,  317,  290,  297,  316,  296,  293,
      318,  319,  295,  320,  323,  322,  298,  295,  300,  303,
      304,  301,  305,  295,  299,  307,  306,  324,  309,  325,

      328,  327,  326,  329,  310,  331,  332,  315,  308,  333,
      318,  335,  312,  320,  336,  314,  338,  340,  316,  322,
      339,  341,  342,  317,  343,  344,  347,  345,  349,  328,
      319,  323,  326,  348,  350,  351,  329,  354,  352,  355,
      356,  335,  325,  357,  358,  338,  331,  324,  327,  359,
      360,  341,  362,  364,  332,  367,  342,  361,  336,  363,
      333,  345,  343,  339,  368,  370,  340,  352,  371,  344,
      372,  348,  373,  374,  347,  375,  376,  355,  349,  354,
      378,  380,  351,  402,  356,  358,  383,  359,  350,  361,
      364,  363,  357,  360,  382,  400,  384,  385,  370,  362,

      384,  385,  387,  371,  388,  405,  387,  367,  388,  374,
      389,  410,  368,  372,  389,  380,  375,  390,  412,  383,
      373,  390,  413,  414,  382,  400,  376,  415,  416,  378,
      417,  418,  402,  419,  420,  422,  421,  382,  382,  424,
      410,  425,  427,  430,  428,  429,  433,  436,  437,  438,
      431,  439,  435,  414,  442,  449,  444,  440,  443,  405,
      441,  412,  447,  450,  446,  413,  445,  419,  420,  448,
      422,  424,  418,  416,  421,  451,  454,  417,  452,  429,
      427,  415,  428,  431,  435,  436,  455,  433,  425,  437,
      440,  438,  430,  443,  441,  456,  445,  442,  446,  457,

      439,  444,  459,  448,  461,  460,  450,  447,  452,  449,
      463,  464,  466,  467,  469,  470,  472,  475,  455,  471,
      451,  474,  476,  477,  481,  454,  478,  456,  482,  484,
      485,  489,  457,  487,  504,  493,  507,  488,  461,  493,
      508,  509,  510,  511,  466,  513,  514,  470,  467,  512,
      519,  459,  460,  463,  464,  471,  521,  517,  474,  484,
      478,  477,  520,  469,  475,  472,  504,  488,  485,  522,
      476,  482,  481,  509,  487,  488,  489,  524,  512,  513,
      525,  507,  487,  526,  510,  527,  528,  530,  511,  517,
      508,  519,  532,  534,  535,  514,  520,  536,  544,  539,

      545,  542,  543,  546,  548,  521,  553,  549,  550,  554,
      522,  561,  563,  564,  556,  524,  566,  567,  568,  569,
      570,  530,  527,  571,  535,  534,  532,  536,  525,  539,
      528,  542,  543,  572,  545,  573,  553,  526,  582,  583,
      544,  549,  550,  554,  556,  584,  563,  585,  564,  586,
      566,  587,  546,  588,  548,  561,  595,  594,  567,  568,
      569,  592,  593,  596,  603,  571,  600,  601,  604,  570,
      605,  606,  607,  608,  572,  612,  613,  609,  611,  584,
      615,  614,  618,  586,  573,  587,  583,  582,  585,  594,
      595,  592,  593,  617,  619,  621,  588,  623,  603,  625,

      604,  626,  605,  606,  627,  608,  628,  596,  636,  600,
      601,  609,  611,  607,  614,  638,  612,  641,  639,  643,
      642,  644,  615,  613,  648,  618,  646,  649,  621,  650,
      651,  623,  655,  666,  617,  626,  654,  619,  652,  661,
      662,  656,  636,  657,  628,  627,  625,  641,  660,  663,
      669,  643,  667,  668,  674,  675,  676,  677,  644,  678,
      679,  682,  685,  650,  691,  638,  639,  642,  683,  646,
      651,  649,  652,  648,  656,  687,  654,  657,  662,  661,
      655,  666,  660,  668,  688,  692,  693,  696,  675,  674,
      697,  698,  685,  678,  669,  702,  703,  679,  663,  677,

      667,  676,  713,  683,  705,  687,  704,  710,  711,  682,
      712,  717,  691,  714,  692,  715,  716,  721,  718,  723,
      724,  697,  725,  726,  728,  729,  730,  727,  731,  688,
      703,  732,  696,  702,  698,  733,  704,  734,  705,  739,
      712,  693,  738,  710,  711,  714,  716,  713,  718,  715,
      743,  723,  717,  742,  728,  729,  725,  726,  714,  727,
      744,  731,  745,  732,  747,  752,  754,  755,  724,  733,
      721,  756,  758,  730,  760,  761,  738,  762,  734,  763,
      764,  766,  743,  768,  739,  736,  722,  742,  720,  719,
      709,  708,  707,  706,  701,  752,  745,  699,  747,  695,

      754,  755,  694,  690,  758,  689,  756,  686,  684,  744,
      760,  762,  681,  761,  680,  673,  672,  671,  665,  664,
      659,  658,  653,  763,  647,  645,  640,  637,  766,  635,
      634,  633,  631,  764,  629,  624,  622,  768,  771,  620,
      771,  771,  771,  771,  771,  772,  772,  773,  773,  773,
      773,  773,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  776,  776,  776,  776,  776,  776,  776,  777,  616,
      777,  777,  777,  777,  777,  778,  778,  779,  779,  779,
      779,  779,  779,  779,  780,  780,  780,  780,  780,  780,
      780,  781,  781,  781,  781,  781,  781,  781,  782,  782,

      782,  782,  782,  782,  782,  610,  602,  599,  598,  597,
      591,  590,  589,  581,  580,  579,  578,  577,  575,  574,
      565,  562,  560,  559,  558,  557,  555,  552,  551,  547,
      541,  540,  538,  537,  533,  531,  529,  523,  518,  516,
      515,  506,  505,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  492,  491,  490,  486,  483,  480,  479,  473,
      468,  465,  462,  458,  453,  434,  432,  426,  423,  411,
      409,  408,  407,  406,  404,  403,  401,  399,  398,  397,
      396,  395,  394,  393,  392,  381,  379,  377,  369,  366,
      365,  353,  346,  337,  334,  330,  321,  313,  311,  302,

      288,  287,  285,  280,  277,  276,  275,  274,  273,  272,
      271,  269,  267,  264,  261,  254,  253,  246,  232,  212,
      211,  209,  205,  196,  195,  194,  157,  154,  153,  152,
      150,  149,  148,  109,   97,   94,   55,   52,   45,   19,
       16,   15,    3,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[167] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "thriftl.ll"

#include <string>
#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1375 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 81 "thriftl.ll"


#line 1560 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 771 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1644 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 83 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 85 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 257 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 266 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 276 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 281 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 332 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 345 "thriftl.ll"
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 350 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2582 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 771 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 771 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 770);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 350 "thriftl.ll"



/* vim: filetype=lex
*/

