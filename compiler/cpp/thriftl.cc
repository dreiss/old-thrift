
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1293] =
    {   0,
        1,  119,    1,  119,  126,  125,    1,  125,  125,    5,
      125,  125,    6,  125,  119,  125,  119,  121,  125,  125,
      125,  117,  119,  125,  117,  119,  125,  120,  121,  125,
      120,  121,  125,  120,  125,  120,  121,  125,  120,  121,
      125,  120,  121,  125,  120,  121,  125,  120,  121,  125,
      120,  121,  125,  120,  121,  125,  120,  121,  125,  120,
      121,  125,  120,  121,  125,  120,  121,  125,  120,  121,
      125,  120,  121,  125,  120,  121,  125,  120,  121,  125,
      120,  121,  125,  120,  121,  125,  120,  121,  125,  120,
      121,  125,  120,  121,  125,  120,  121,  125,  120,  121,

      125,    1,  122,    5,  123,  117,  119,  121,  121,  117,
      119,  121,  121,  119,    4,  120,  121,  121,  119,  120,
      121,  120,  120,  121,  120,  121,  120,  121,   55,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,   66,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
       80,  120,  121,  120,  121,   83,  120,  121,   87,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,   92,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  119,  119,  121,  119,
      121,    4,  118,  120,  121,   53,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,

      120,  121,  120,  121,  120,  121,   62,  120,  121,   64,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,   75,  120,  121,  120,  121,  120,  121,  120,
      121,   29,  120,  121,   30,  120,  121,   31,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,   37,  120,  121,  120,
      121,  120,  121,   90,  120,  121,   91,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,   39,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  108,  120,  121,  120,  121,  120,
      121,  120,  121,  110,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
        2,  120,  121,   54,  120,  121,  120,  121,  120,  121,
      120,  121,   27,  120,  121,  120,  121,   28,  120,  121,
       58,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,   67,  120,  121,   68,  120,  121,   47,
      120,  121,  120,  121,   71,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,   79,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
       38,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,   93,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,

      120,  121,  120,  121,  120,  121,  104,  120,  121,  120,
      121,  120,  121,  107,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,   26,  120,  121,  120,  121,  120,
      121,  114,  120,  121,  120,  121,  120,  121,    3,    2,
      124,  120,  121,  120,  121,   51,  120,  121,  120,  121,
       57,  120,  121,   59,  120,  121,  120,  121,   48,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   72,  120,  121,  120,  121,
       74,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,   95,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,   98,  120,
      121,  120,  121,  120,  121,  120,  121,   36,  120,  121,
      120,  121,  120,  121,   35,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  105,
      120,  121,  120,  121,  120,  121,  115,  120,  121,  120,
      121,  120,  121,  120,  121,  113,  120,  121,  120,  121,
      120,  121,  120,  121,  116,  120,  121,    3,  124,    2,

      124,  120,  121,   56,  120,  121,   34,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   65,  120,  121,   32,  120,
      121,   69,  120,  121,   70,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   78,  120,  121,  120,  121,
       82,  120,  121,  120,  121,   84,  120,  121,  120,  121,
      120,  121,  120,  121,   88,  120,  121,  120,  121,   89,
      120,  121,   40,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   94,  120,  121,  120,  121,
      120,  121,   99,  120,  121,  120,  121,  120,  121,  100,

      120,  121,  120,  121,  101,  120,  121,   33,  120,  121,
       42,  120,  121,  102,  120,  121,  120,  121,   45,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  124,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,   61,  120,  121,   63,
      120,  121,  120,  121,   44,  120,  121,   73,  120,  121,
       76,  120,  121,  120,  121,  120,  121,   25,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,   96,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,   46,  120,  121,  120,  121,
      120,  121,  120,  121,   41,  120,  121,  120,  121,  111,
      120,  121,  120,  121,   20,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   52,  120,  121,  120,  121,
       60,  120,  121,  120,  121,  120,  121,   10,  120,  121,
      120,  121,  120,  121,   77,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,   50,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,   49,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  109,
      120,  121,  112,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,   43,  120,  121,  120,  121,  120,  121,   86,  120,
      121,  120,  121,    7,  120,  121,  120,  121,  120,  121,
       97,  120,  121,   15,  120,  121,  120,  121,  120,  121,
      120,  121,  106,  120,  121,   24,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,   81,  120,  121,   85,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,    9,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,

      121,  120,  121,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  120,  121,   12,  120,  121,  120,  121,
      120,  121,   11,  120,  121,   16,  120,  121,  120,  121,
      120,  121,  120,  121,  120,  121,  103,  120,  121,  120,
      121,   22,  120,  121,   21,  120,  121,    8,  120,  121,
      120,  121,   14,  120,  121,  120,  121,  120,  121,  120,
      121,   23,  120,  121,  120,  121,   17,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,   13,
      120,  121,  120,  121,   19,  120,  121,  120,  121,   18,
      120,  121

    } ;

static yyconst flex_int16_t yy_accept[615] =
    {   0,
        1,    3,    5,    6,    7,    9,   10,   12,   13,   15,
       17,   20,   21,   22,   25,   28,   31,   34,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  103,  103,  104,  105,  105,  106,  106,  108,  108,
      109,  110,  113,  114,  115,  115,  116,  116,  118,  118,
      119,  122,  123,  125,  127,  129,  132,  134,  136,  138,
      140,  142,  144,  146,  148,  150,  152,  155,  157,  159,
      161,  163,  165,  167,  169,  171,  173,  175,  177,  179,
      181,  184,  186,  189,  192,  194,  196,  198,  200,  202,

      204,  206,  208,  210,  213,  215,  217,  219,  221,  223,
      225,  227,  229,  231,  233,  235,  237,  239,  241,  243,
      245,  247,  249,  251,  253,  255,  257,  259,  261,  263,
      265,  267,  268,  270,  272,  272,  272,  273,  274,  276,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  305,  307,  310,  313,  315,  317,  319,
      321,  323,  325,  327,  329,  331,  333,  336,  338,  340,
      342,  345,  348,  351,  353,  355,  357,  359,  361,  363,
      365,  367,  370,  372,  374,  377,  380,  382,  384,  386,
      388,  390,  392,  394,  396,  398,  400,  402,  404,  406,

      408,  410,  413,  415,  417,  419,  421,  423,  425,  427,
      429,  431,  433,  435,  438,  440,  442,  444,  447,  449,
      451,  453,  455,  457,  459,  461,  461,  461,  461,  461,
      461,  462,  464,  467,  469,  471,  473,  476,  478,  481,
      484,  486,  488,  490,  492,  494,  496,  498,  500,  502,
      504,  507,  510,  513,  515,  518,  520,  522,  524,  526,
      528,  530,  532,  535,  537,  539,  541,  543,  545,  547,
      549,  551,  554,  556,  558,  560,  562,  565,  567,  569,
      571,  573,  575,  577,  579,  581,  583,  585,  587,  589,
      591,  593,  595,  597,  599,  601,  603,  605,  607,  610,

      612,  614,  617,  619,  621,  623,  625,  628,  630,  632,
      635,  637,  639,  639,  639,  640,  640,  640,  640,  640,
      642,  644,  646,  649,  651,  654,  657,  659,  662,  664,
      666,  668,  670,  672,  674,  676,  678,  680,  682,  684,
      686,  689,  691,  694,  696,  698,  700,  702,  704,  706,
      708,  710,  712,  714,  716,  718,  720,  722,  724,  726,
      728,  731,  733,  735,  737,  739,  742,  744,  746,  748,
      751,  753,  755,  758,  760,  762,  764,  766,  768,  770,
      773,  775,  777,  780,  782,  784,  786,  789,  791,  793,
      795,  798,  798,  799,  799,  800,  800,  802,  804,  807,

      810,  812,  814,  816,  818,  820,  822,  824,  826,  829,
      832,  835,  838,  840,  842,  844,  846,  849,  851,  854,
      856,  859,  861,  863,  865,  868,  870,  873,  876,  878,
      880,  882,  884,  886,  889,  891,  893,  896,  898,  900,
      903,  905,  908,  911,  914,  917,  919,  922,  924,  926,
      928,  930,  932,  934,  936,  938,  940,  942,  943,  945,
      947,  949,  951,  953,  955,  957,  960,  963,  965,  968,
      971,  974,  976,  978,  981,  983,  985,  987,  989,  991,
      993,  995,  998, 1000, 1002, 1004, 1006, 1009, 1011, 1013,
     1015, 1018, 1020, 1023, 1025, 1028, 1030, 1032, 1034, 1036,

     1039, 1041, 1044, 1046, 1048, 1051, 1053, 1055, 1058, 1060,
     1062, 1064, 1066, 1068, 1071, 1073, 1075, 1077, 1079, 1082,
     1084, 1086, 1088, 1090, 1093, 1096, 1098, 1100, 1102, 1104,
     1106, 1108, 1110, 1112, 1115, 1117, 1119, 1122, 1124, 1127,
     1129, 1131, 1134, 1137, 1139, 1141, 1143, 1146, 1149, 1151,
     1153, 1155, 1157, 1159, 1161, 1163, 1166, 1169, 1171, 1173,
     1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1192, 1194,
     1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214,
     1216, 1219, 1221, 1223, 1226, 1229, 1231, 1233, 1235, 1237,
     1240, 1242, 1245, 1248, 1251, 1253, 1256, 1258, 1260, 1262,

     1265, 1267, 1270, 1272, 1274, 1276, 1278, 1280, 1283, 1285,
     1288, 1290, 1293, 1293
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   18,   18,    7,    7,    7,
        7,    7,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        7,    1,    7,    1,   23,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[50] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        5,    1,    6,    6,    6,    6,    6,    6,    6,    7,
        8,    9,    9,    7,    7,    7,    7,    8,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[630] =
    {   0,
        0,    0, 1367, 1368,   48, 1362,    0, 1359, 1368,   41,
       59,   40,   52,   60, 1317, 1353,   99,    0,   57,   87,
      110,   51,   48,  112,   55,  147,   76,  100,   81,  113,
       92,  144,  136,  183,  155,   74,  149,  111,   96,   94,
      137, 1358, 1368,    0, 1355, 1368,  191, 1313,  160,    0,
      219,  228,  248,   75, 1351,    0,    0, 1348,  255,  168,
      181,    0,  120,  172,  164,  206,  161,  117,  169,   58,
      185,  143,  191,   53,  190,  249,  241,  245,  242,  266,
      215,  203,  192,  212,  269,  250,  270,  204,  280,  272,
     1347,  271,  273, 1346,  281,  283,  286,  288,  287,  290,

      291,  292,  294, 1345,  293,  297,  301,  307,  304,  295,
      311,  312,  321,  322,  302,  315,  332,  334,  338,  323,
      339,  340,  314,  344,  331,  351,  347,  357,  352,  356,
      359,  383,  392,  364,  212,  369,    0,    0,  375, 1344,
      380,  384,  383,  403,  381,  404,  405,  407,  394,  409,
      411,  414,  415,  413,  416,  421,  419,  422,  424,  420,
      431,  432,  433,  428,  436,  440,  435,  445,  447,  452,
     1343, 1342, 1341,  456,  457,  455,  458,  465,  459,  463,
      464, 1340,  467,  466, 1339, 1338,  468,  470,  469,  471,
      474,  472,  475,  486,  476,  489,  479,  490,  493,  494,

      495, 1337,  498,  500,  509,  503,  505,  510,  506,  512,
      514,  518,  515, 1336,  517,  519,  526, 1335,  520,  523,
      537,  525,  538,  541,  546, 1336,  554,  559, 1335,  560,
     1330,  529, 1331,  549,  563,  555, 1330,  564, 1329, 1328,
      565,  567,  566,  568,  569,  570,  573,  572,  574,  575,
     1327,  576, 1326,  582, 1325,  577,  585,  583,  584,  578,
      589,  595, 1324,  594,  593,  605,  610,  613,  614,  615,
      616, 1323,  618,  619,  620,  621, 1322,  623,  625,  626,
      629,  630,  631,  632,  638,  635,  640,  642,  641,  644,
      646,  647,  651,  661,  658,  662,  663,  665, 1321,  664,

      669, 1320,  670,  668,  672,  673, 1319,  675,  681, 1318,
      677,  689,  686,  692, 1368,  695,  700,  711,  712, 1368,
      682,  703, 1317,  711, 1316, 1315,  712, 1314,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  726,  724,  727,
     1313,  728, 1312,  734,  730,  729,  732,  733,  738,  747,
      735,  759,  739,  760,  761,  763,  737,  764,  767,  769,
     1311,  770,  771,  772,  776, 1310,  773,  779,  780, 1309,
      782,  786, 1308,  777,  784,  789,  785,  792,  794,  795,
      797,  799, 1307,  801,  802,  808, 1306,  811,  812,  814,
     1305, 1302, 1301,  822, 1368, 1300, 1299,  815, 1300, 1299,

      821,  822,  823,  829,  832,  833,  835,  837, 1298, 1297,
     1296,  838,  840,  841,  842,  845, 1295,  847, 1294,  848,
     1293,  851,  854,  857, 1292,  862, 1291, 1290,  864,  869,
      849,  859,  852, 1289,  858,  880, 1288,  874,  881, 1287,
      882, 1286, 1285, 1284, 1283,  884, 1282,  886,  887,  889,
      890,  891,  893,  894,  895,  897,  900, 1279,  901,  905,
      902,  903,  908,  911,  910, 1280, 1279,  913, 1232, 1220,
     1217,  917,  919, 1196,  914,  909,  923,  924,  930,  931,
      935, 1177,  938,  942,  943,  945, 1165,  948,  949,  950,
     1164,  951, 1163,  952, 1162,  954,  957,  958,  959, 1160,

      961, 1159,  962,  963, 1158,  964,  965, 1157,  966,  969,
      972,  974,  982, 1155,  980,  984,  986,  987, 1154,  988,
      989,  993,  991, 1153, 1152,  994, 1001, 1007, 1002, 1008,
     1011, 1009, 1010, 1150, 1012, 1018, 1149, 1017, 1148, 1020,
     1014, 1147, 1146, 1019, 1022, 1023, 1145, 1144, 1025, 1032,
     1029, 1039, 1040, 1041, 1042, 1143, 1141, 1045, 1046, 1049,
     1048, 1052, 1053, 1050, 1057, 1059, 1067, 1140, 1069, 1070,
     1072, 1074, 1075, 1079, 1080, 1076, 1078, 1083, 1087, 1084,
     1138, 1088, 1086, 1137, 1136, 1096, 1097, 1089, 1098, 1135,
     1100, 1134, 1133, 1131, 1103, 1130, 1101, 1108, 1110,  368,

     1111,  358, 1112, 1120, 1121, 1123, 1124,  202, 1125,  148,
     1128,   56, 1368, 1176, 1185, 1194, 1199, 1204, 1210, 1215,
     1222, 1223, 1231, 1240, 1244, 1252, 1261, 1270, 1279
    } ;

static yyconst flex_int16_t yy_def[630] =
    {   0,
      613,    1,  613,  613,  613,  614,  615,  616,  613,  617,
      618,  613,  613,  617,   14,  619,  619,  620,  619,  619,
      619,  619,   17,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      613,  614,  613,  615,  616,  613,  613,   14,  621,  618,
      618,  618,  618,  622,  623,  624,  625,  619,  613,   53,
       17,  620,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  613,   52,   53,  626,  627,  624,  625,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  626,  628,  626,  627,  629,
      613,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  626,  626,  613,  626,  629,  627,  627,  613,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  613,  613,  627,  613,  613,  613,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  613,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,    0,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613
    } ;

static yyconst flex_int16_t yy_nxt[1418] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   15,   15,   15,   15,   15,   16,
       17,   16,   18,   19,   20,   21,   22,   23,   24,   25,
       16,   26,   27,   16,   28,   29,   30,   31,   32,   16,
       33,   34,   35,   36,   37,   38,   39,   40,   16,   41,
       41,   47,   54,   54,   54,   54,   54,   54,   54,   55,
       50,   49,   50,   56,   50,   50,   50,   50,   49,   51,
       47,   52,   52,   52,   52,   52,   52,   52,   76,   53,
       49,   63,   78,   50,   79,   50,   53,   49,   77,   86,
       50,  152,   87,   64,   80,   49,   50,   65,   66,   95,

      147,   50,   49,   50,   98,   50,   57,   59,   60,   50,
      124,   61,   61,   61,   61,   61,   61,   61,   67,   50,
       50,   50,   50,   96,   68,  131,   50,   69,  102,   50,
      103,   97,  104,   71,   70,   81,   99,  130,   41,   41,
      100,  128,  129,   82,   72,   50,   83,   73,   74,   84,
      101,   75,   50,   50,  145,   85,   50,   50,   50,  111,
       88,  139,   89,  112,   50,   90,  149,  105,   59,   59,
       50,  106,  125,   50,  107,   91,  613,   50,   50,  113,
      126,   50,   92,   93,  108,  121,  127,  109,   94,  613,
       50,  110,   50,  141,   50,  122,  146,  144,  140,   50,

       50,   50,  123,   54,   54,   54,   54,   54,   54,   54,
      114,   50,   50,   50,  115,   50,  150,  116,  117,  227,
      153,   50,  171,  228,   50,  118,  148,  151,  119,  166,
      120,  133,  133,  133,  133,  133,  133,  133,   51,  165,
       52,   52,   52,   52,   52,   52,   52,  142,   53,  164,
       50,   50,  167,  143,   50,   53,   59,   60,   50,   50,
      134,  134,  134,  134,  134,  134,  134,  132,  132,  132,
      132,  132,  132,  132,  154,   50,  158,  155,   50,   50,
       50,   50,   50,  156,  157,  160,  159,  169,  173,   50,
       50,  161,   50,  162,  172,   50,   50,   50,  175,   50,

       50,   50,   50,   50,   50,  168,   50,  176,  163,  174,
       50,   50,  170,   50,  177,  178,   50,  195,  180,  187,
       50,   50,  183,   50,   50,  179,  182,  181,  194,  184,
       50,   50,   50,  186,  189,  185,  188,  190,  192,  191,
       50,   50,  196,   50,  193,  199,  204,   50,   50,   50,
      203,  197,  215,   50,  198,  205,   50,  206,  200,  209,
       50,   50,  201,  212,  202,   50,   50,   50,   50,  208,
      210,  218,  613,   50,  207,  216,  230,   50,  220,  211,
      231,  221,  224,  213,   50,  217,  225,  214,  222,   50,
       50,  219,   50,   50,  223,  132,  132,  132,  132,  132,

      132,  132,   50,   50,  133,  133,  133,  133,  133,  133,
      133,  234,   50,   50,   50,  237,   50,  232,   50,  235,
       50,  233,   50,   50,   50,   50,  236,  238,   50,   50,
       50,   50,  239,   50,  240,  241,  245,   50,  246,  248,
       50,   50,   50,  250,   50,   50,  242,  247,  249,   50,
      251,  252,  243,  244,   50,  253,   50,  255,  254,  258,
      256,   50,  260,  259,   50,   50,   50,   50,   50,  257,
      261,  262,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,  270,   50,   50,   50,  267,  271,   50,  263,
      264,  266,  269,  265,  273,   50,  279,  274,   50,   50,

      268,  276,   50,   50,   50,  278,  272,   50,  280,   50,
      277,  284,   50,  275,   50,   50,  281,  282,   50,   50,
      283,   50,  286,   50,   50,  291,   50,   50,   50,   50,
      285,  298,   50,  287,   50,   50,  295,  289,   50,  290,
      288,  292,  302,  293,  303,  294,   50,   50,  296,  307,
       50,  300,  297,  299,  301,   50,  304,  305,   50,  309,
      308,  314,  306,  311,   50,  315,  227,  319,  310,  321,
      316,  320,   50,   50,   50,   50,   50,   50,   50,   50,
      312,   50,   50,   50,   50,   50,   50,   50,  323,  322,
      327,   50,   50,   50,   50,  324,  334,  325,   50,  329,

      330,  344,   50,   50,   50,  331,  326,  338,  328,  337,
      333,  332,  341,  340,   50,  335,  336,  342,  346,   50,
      339,  347,   50,   50,   50,   50,  343,   50,   50,   50,
       50,  345,   50,  348,   50,   50,  351,  353,   50,   50,
       50,   50,  354,  357,   50,  359,  350,   50,  349,   50,
       50,   50,  362,   50,  352,   50,   50,  363,  358,  355,
       50,  360,  364,  356,  369,  366,  367,   50,  361,  365,
       50,   50,   50,   50,   50,  371,  370,   50,   50,   50,
      368,   50,   50,  372,   50,  374,   50,  377,  378,  373,
       50,   50,  375,  227,  376,  379,  382,  392,   50,  227,

      388,  384,  227,  393,  383,  398,  316,  394,  387,  380,
      381,  395,   50,  389,  390,  391,  385,  386,  317,  230,
       50,   50,  396,  397,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,  401,   50,   50,   50,   50,   50,
      404,   50,   50,   50,   50,  399,   50,   50,   50,  409,
      410,  402,  403,  413,  411,  408,   50,  406,  400,  415,
      407,  416,  414,  417,  420,  405,  412,  418,   50,   50,
       50,  422,   50,   50,  421,  419,   50,  424,   50,   50,
       50,   50,   50,  425,  428,   50,   50,  423,   50,   50,
      427,   50,  431,   50,   50,   50,  433,  434,   50,  426,

      429,   50,  435,   50,   50,  430,   50,  439,   50,  442,
       50,   50,  432,  436,  440,  437,  438,   50,  443,  441,
       50,   50,  445,   50,   50,  451,  449,  444,  448,  317,
       50,   50,   50,  458,  446,  455,  447,  450,   50,  452,
      459,   50,   50,  456,   50,  453,   50,   50,  462,   50,
       50,   50,  457,  454,   50,  465,   50,   50,   50,  460,
       50,   50,  466,   50,  463,  461,   50,   50,   50,  468,
      464,   50,  471,   50,  473,  474,  475,  476,   50,  467,
      477,  469,  472,   50,  481,  478,  482,  479,  470,   50,
       50,   50,  480,   50,  483,   50,   50,  486,   50,   50,

       50,  484,   50,   50,   50,  488,   50,  485,  487,   50,
       50,   50,   50,  490,   50,  491,  492,   50,   50,   50,
       50,  489,   50,   50,  493,  494,   50,  495,   50,  502,
      497,  498,   50,   50,  511,  504,  496,  503,  505,   50,
       50,  510,  499,  500,   50,  501,  506,   50,  512,  513,
      507,   50,   50,  508,   50,  509,  515,   50,   50,   50,
       50,   50,  516,   50,  514,  517,   50,   50,   50,  519,
       50,   50,   50,   50,   50,   50,  518,  524,   50,  525,
      520,   50,  521,   50,  527,  522,  523,  533,  530,   50,
      529,   50,  528,   50,  526,   50,   50,   50,   50,  537,

       50,  534,   50,   50,  532,  531,  536,  538,  535,  539,
       50,   50,  542,  540,  543,  544,   50,   50,   50,   50,
       50,   50,  545,   50,  546,  541,   50,   50,   50,   50,
      550,   50,   50,  547,   50,  548,  552,  553,   50,  551,
      558,   50,  549,  559,  562,  555,  557,  554,   50,   50,
       50,   50,  560,  556,   50,   50,  565,   50,   50,   50,
      561,   50,   50,  564,  569,  566,   50,  568,   50,  570,
      567,  563,  573,  578,  571,  572,   50,  575,   50,   50,
      577,   50,  580,   50,   50,   50,  574,   50,   50,   50,
      576,  579,   50,   50,  582,   50,   50,   50,   50,  584,

      586,  585,  587,  588,  590,   50,   50,   50,  591,   50,
       50,  583,   50,  581,  592,  594,  589,   50,  593,   50,
       50,   50,  597,  596,  595,  599,  601,  600,  602,   50,
       50,  598,   50,   50,   50,  603,  605,   50,  604,   50,
       50,  606,   50,   50,   50,   50,   50,   50,  608,   50,
       50,  607,   50,   50,   50,   50,   50,   50,   50,   50,
      609,   50,   50,   50,   50,  611,   50,   50,   50,   50,
      610,   50,   50,   50,   50,  612,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   44,   50,   44,   44,   44,
       44,   44,   44,   44,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   48,   48,   50,   48,   50,   50,   50,
       50,   50,   50,   58,   58,   58,   58,   58,   58,   62,
       62,   62,   62,   62,  132,  132,   50,  132,   54,   50,
       54,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      137,   50,  137,  137,  137,  137,  137,  137,  137,  138,
      138,  138,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  318,
      318,  318,  318,  318,  318,  318,  318,  318,   50,   50,
      318,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
      318,  318,  313,  313,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  318,  317,  227,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,  136,  613,
       46,   43,   50,  613,   46,   43,  613,    3,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613
    } ;

static yyconst flex_int16_t yy_chk[1418] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,   10,   12,   12,   12,   12,   12,   12,   12,   13,
       22,   10,   74,   13,   25,  612,   19,   70,   10,   11,
       14,   11,   11,   11,   11,   11,   11,   11,   22,   11,
       14,   19,   23,   36,   23,   27,   11,   14,   22,   25,
       29,   74,   25,   19,   23,   54,   20,   19,   19,   27,

       70,   31,   54,   40,   29,   39,   14,   17,   17,   28,
       36,   17,   17,   17,   17,   17,   17,   17,   20,   21,
       38,   24,   30,   28,   20,   40,   68,   20,   31,   63,
       31,   28,   31,   21,   20,   24,   30,   39,   41,   41,
       30,   38,   38,   24,   21,   33,   24,   21,   21,   24,
       30,   21,   72,   32,   68,   24,   26,  610,   37,   33,
       26,   63,   26,   33,   35,   26,   72,   32,   49,   49,
       67,   32,   37,   65,   32,   26,   60,   60,   69,   33,
       37,   64,   26,   26,   32,   35,   37,   32,   26,   61,
       61,   32,   34,   65,   71,   35,   69,   67,   64,   75,

       73,   83,   35,   47,   47,   47,   47,   47,   47,   47,
       34,  608,   82,   88,   34,   66,   73,   34,   34,  135,
       75,   84,   88,  135,   81,   34,   71,   73,   34,   83,
       34,   51,   51,   51,   51,   51,   51,   51,   52,   82,
       52,   52,   52,   52,   52,   52,   52,   66,   52,   81,
       77,   79,   84,   66,   78,   52,   53,   53,   76,   86,
       53,   53,   53,   53,   53,   53,   53,   59,   59,   59,
       59,   59,   59,   59,   76,   80,   78,   76,   85,   87,
       92,   90,   93,   76,   77,   79,   78,   86,   90,   89,
       95,   80,   96,   80,   89,   97,   99,   98,   93,  100,

      101,  102,  105,  103,  110,   85,  106,   93,   80,   92,
      107,  115,   87,  109,   93,   93,  108,  110,   96,  102,
      111,  112,   99,  123,  116,   95,   98,   97,  109,   99,
      113,  114,  120,  101,  105,  100,  103,  106,  108,  107,
      125,  117,  111,  118,  108,  113,  116,  119,  121,  122,
      115,  112,  123,  124,  112,  117,  127,  118,  114,  120,
      126,  129,  114,  122,  114,  130,  128,  602,  131,  119,
      121,  125,  134,  134,  118,  124,  136,  600,  127,  121,
      136,  127,  130,  122,  139,  124,  131,  122,  128,  141,
      145,  126,  143,  142,  129,  132,  132,  132,  132,  132,

      132,  132,  133,  149,  133,  133,  133,  133,  133,  133,
      133,  142,  144,  146,  147,  145,  148,  139,  150,  143,
      151,  141,  154,  152,  153,  155,  144,  146,  157,  160,
      156,  158,  147,  159,  148,  149,  152,  164,  153,  155,
      161,  162,  163,  157,  167,  165,  150,  154,  156,  166,
      158,  159,  151,  151,  168,  160,  169,  162,  161,  165,
      163,  170,  167,  166,  176,  174,  175,  177,  179,  164,
      168,  169,  180,  181,  178,  184,  183,  187,  189,  188,
      190,  192,  179,  191,  193,  195,  176,  180,  197,  170,
      174,  175,  178,  174,  183,  194,  191,  184,  196,  198,

      177,  188,  199,  200,  201,  190,  181,  203,  192,  204,
      189,  195,  206,  187,  207,  209,  192,  193,  205,  208,
      194,  210,  197,  211,  213,  203,  215,  212,  216,  219,
      196,  209,  220,  198,  222,  217,  207,  200,  232,  201,
      199,  204,  213,  205,  215,  206,  221,  223,  207,  220,
      224,  211,  208,  210,  212,  225,  216,  217,  234,  222,
      221,  227,  219,  224,  236,  227,  228,  230,  223,  232,
      228,  230,  235,  238,  241,  243,  242,  244,  245,  246,
      225,  248,  247,  249,  250,  252,  256,  260,  235,  234,
      242,  254,  258,  259,  257,  236,  247,  238,  261,  244,

      245,  260,  265,  264,  262,  245,  241,  252,  243,  250,
      246,  245,  257,  256,  266,  248,  249,  258,  262,  267,
      254,  264,  268,  269,  270,  271,  259,  273,  274,  275,
      276,  261,  278,  265,  279,  280,  268,  270,  281,  282,
      283,  284,  271,  275,  286,  278,  267,  285,  266,  287,
      289,  288,  281,  290,  269,  291,  292,  282,  276,  273,
      293,  279,  283,  274,  288,  285,  286,  295,  280,  284,
      294,  296,  297,  300,  298,  290,  289,  304,  301,  303,
      287,  305,  306,  291,  308,  293,  311,  296,  297,  292,
      309,  321,  294,  313,  295,  298,  303,  313,  312,  314,

      311,  305,  316,  314,  304,  321,  316,  317,  309,  300,
      301,  317,  322,  311,  311,  312,  306,  308,  318,  319,
      324,  327,  318,  319,  329,  330,  331,  332,  333,  334,
      335,  336,  337,  339,  327,  338,  340,  342,  346,  345,
      331,  347,  348,  344,  351,  322,  357,  349,  353,  336,
      337,  329,  330,  340,  338,  335,  350,  333,  324,  344,
      334,  345,  342,  346,  349,  332,  339,  347,  352,  354,
      355,  351,  356,  358,  350,  348,  359,  353,  360,  362,
      363,  364,  367,  354,  357,  365,  374,  352,  368,  369,
      356,  371,  360,  375,  377,  372,  363,  364,  376,  355,

      358,  378,  365,  379,  380,  359,  381,  371,  382,  375,
      384,  385,  362,  367,  372,  368,  369,  386,  376,  374,
      388,  389,  378,  390,  398,  385,  382,  377,  381,  394,
      401,  402,  403,  394,  379,  389,  380,  384,  404,  386,
      398,  405,  406,  389,  407,  388,  408,  412,  403,  413,
      414,  415,  390,  388,  416,  406,  418,  420,  431,  401,
      422,  433,  407,  423,  404,  402,  424,  435,  432,  412,
      405,  426,  415,  429,  418,  420,  422,  423,  430,  408,
      424,  413,  416,  438,  431,  426,  432,  429,  414,  436,
      439,  441,  430,  446,  433,  448,  449,  438,  450,  451,

      452,  435,  453,  454,  455,  441,  456,  436,  439,  457,
      459,  461,  462,  448,  460,  449,  450,  463,  476,  465,
      464,  446,  468,  475,  451,  452,  472,  453,  473,  461,
      455,  456,  477,  478,  476,  463,  454,  462,  464,  479,
      480,  475,  457,  459,  481,  460,  465,  483,  477,  478,
      468,  484,  485,  472,  486,  473,  480,  488,  489,  490,
      492,  494,  481,  496,  479,  483,  497,  498,  499,  485,
      501,  503,  504,  506,  507,  509,  484,  492,  510,  494,
      486,  511,  488,  512,  497,  489,  490,  506,  501,  515,
      499,  513,  498,  516,  496,  517,  518,  520,  521,  511,

      523,  507,  522,  526,  504,  503,  510,  512,  509,  513,
      527,  529,  517,  515,  518,  520,  528,  530,  532,  533,
      531,  535,  521,  541,  522,  516,  538,  536,  544,  540,
      528,  545,  546,  523,  549,  526,  530,  531,  551,  529,
      538,  550,  527,  540,  545,  533,  536,  532,  552,  553,
      554,  555,  541,  535,  558,  559,  550,  561,  560,  564,
      544,  562,  563,  549,  554,  551,  565,  553,  566,  555,
      552,  546,  560,  564,  558,  559,  567,  562,  569,  570,
      563,  571,  566,  572,  573,  576,  561,  577,  574,  575,
      562,  565,  578,  580,  569,  583,  579,  582,  588,  571,

      573,  572,  574,  575,  577,  586,  587,  589,  578,  591,
      597,  570,  595,  567,  579,  582,  576,  598,  580,  599,
      601,  603,  587,  586,  583,  589,  595,  591,  597,  604,
      605,  588,  606,  607,  609,  598,  601,  611,  599,  596,
      594,  603,  593,  592,  590,  585,  584,  581,  605,  568,
      557,  604,  556,  548,  547,  543,  542,  539,  537,  534,
      606,  525,  524,  519,  514,  609,  508,  505,  502,  500,
      607,  495,  493,  491,  487,  611,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  615,  482,  615,  615,  615,
      615,  615,  615,  615,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  617,  617,  474,  617,  618,  618,  618,
      618,  618,  618,  619,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  621,  621,  471,  621,  622,  470,
      622,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      624,  469,  624,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  467,  466,
      458,  447,  445,  444,  443,  442,  440,  437,  434,  428,

      427,  425,  421,  419,  417,  411,  410,  409,  400,  399,
      397,  396,  393,  392,  391,  387,  383,  373,  370,  366,
      361,  343,  341,  328,  326,  325,  323,  310,  307,  302,
      299,  277,  272,  263,  255,  253,  251,  240,  239,  237,
      233,  231,  229,  226,  218,  214,  202,  186,  185,  182,
      173,  172,  171,  140,  104,   94,   91,   58,   55,   48,
       45,   42,   16,   15,    8,    6,    3,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[126] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 1, 1, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/**
 * Copyright (c) 2006- Facebook
 * Distributed under the Thrift Software License
 *
 * See accompanying file LICENSE or visit the Thrift site at:
 * http://developers.facebook.com/thrift/
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 16 "thriftl.ll"

#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1201 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 66 "thriftl.ll"


#line 1386 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 614 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1368 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 68 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 70 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 90 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 225 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 231 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 237 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 250 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2162 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 614 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 614 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 613);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "thriftl.ll"



