
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1282] =
    {   0,
        1,  118,    1,  118,  125,  124,    1,  124,  124,    5,
      124,  124,    6,  124,  118,  124,  118,  120,  124,  124,
      124,  116,  118,  124,  116,  118,  124,  119,  120,  124,
      119,  120,  124,  119,  124,  119,  120,  124,  119,  120,
      124,  119,  120,  124,  119,  120,  124,  119,  120,  124,
      119,  120,  124,  119,  120,  124,  119,  120,  124,  119,
      120,  124,  119,  120,  124,  119,  120,  124,  119,  120,
      124,  119,  120,  124,  119,  120,  124,  119,  120,  124,
      119,  120,  124,  119,  120,  124,  119,  120,  124,  119,
      120,  124,  119,  120,  124,  119,  120,  124,  119,  120,

      124,    1,  121,    5,  122,  116,  118,  120,  120,  116,
      118,  120,  120,  118,    4,  119,  120,  120,  118,  119,
      120,  119,  119,  120,  119,  120,  119,  120,   54,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,   65,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
       79,  119,  120,  119,  120,   82,  119,  120,   86,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,

      120,  119,  120,  119,  120,  119,  120,   91,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  118,  118,  120,  118,  120,    4,
      117,  119,  120,   52,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,

      119,  120,  119,  120,   61,  119,  120,   63,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
       74,  119,  120,  119,  120,  119,  120,  119,  120,   29,
      119,  120,   30,  119,  120,   31,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,   37,  119,  120,  119,  120,  119,
      120,   89,  119,  120,   90,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,

      120,  119,  120,  119,  120,   39,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      107,  119,  120,  119,  120,  119,  120,  119,  120,  109,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,    2,  119,  120,   53,
      119,  120,  119,  120,  119,  120,  119,  120,   27,  119,
      120,  119,  120,   28,  119,  120,   57,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,   66,

      119,  120,   67,  119,  120,   47,  119,  120,  119,  120,
       70,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,   78,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,   38,  119,  120,  119,
      120,  119,  120,  119,  120,   92,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,

      103,  119,  120,  119,  120,  119,  120,  106,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,   26,  119,
      120,  119,  120,  119,  120,  113,  119,  120,  119,  120,
      119,  120,    3,    2,  123,  119,  120,  119,  120,   40,
      119,  120,  119,  120,   56,  119,  120,   58,  119,  120,
      119,  120,   48,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,   71,
      119,  120,  119,  120,   73,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,

      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,   94,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
       97,  119,  120,  119,  120,  119,  120,  119,  120,   36,
      119,  120,  119,  120,  119,  120,   35,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  104,  119,  120,  119,  120,  119,  120,  114,  119,
      120,  119,  120,  119,  120,  119,  120,  112,  119,  120,
      119,  120,  119,  120,  119,  120,  115,  119,  120,    3,
      123,    2,  123,  119,  120,   55,  119,  120,   34,  119,

      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,   64,  119,  120,
       32,  119,  120,   68,  119,  120,   69,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,   77,  119,  120,
      119,  120,   81,  119,  120,  119,  120,   83,  119,  120,
      119,  120,  119,  120,  119,  120,   87,  119,  120,  119,
      120,   88,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,   93,  119,  120,  119,  120,  119,
      120,   98,  119,  120,  119,  120,  119,  120,   99,  119,
      120,  119,  120,  100,  119,  120,   33,  119,  120,   42,

      119,  120,  101,  119,  120,  119,  120,   45,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      123,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,   60,  119,  120,   62,  119,
      120,  119,  120,   44,  119,  120,   72,  119,  120,   75,
      119,  120,  119,  120,  119,  120,   25,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,   95,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,   46,  119,  120,  119,  120,  119,

      120,  119,  120,   41,  119,  120,  119,  120,  110,  119,
      120,  119,  120,   20,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,   51,  119,  120,  119,  120,   59,
      119,  120,  119,  120,  119,  120,   10,  119,  120,  119,
      120,  119,  120,   76,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,   50,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,   49,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  108,  119,
      120,  111,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,

       43,  119,  120,  119,  120,  119,  120,   85,  119,  120,
      119,  120,    7,  119,  120,  119,  120,  119,  120,   96,
      119,  120,   15,  119,  120,  119,  120,  119,  120,  119,
      120,  105,  119,  120,   24,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,   80,  119,  120,   84,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,    9,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,  119,  120,

      119,  120,  119,  120,   12,  119,  120,  119,  120,  119,
      120,   11,  119,  120,   16,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  102,  119,  120,  119,  120,
       22,  119,  120,   21,  119,  120,    8,  119,  120,  119,
      120,   14,  119,  120,  119,  120,  119,  120,  119,  120,
       23,  119,  120,  119,  120,   17,  119,  120,  119,  120,
      119,  120,  119,  120,  119,  120,  119,  120,   13,  119,
      120,  119,  120,   19,  119,  120,  119,  120,   18,  119,
      120
    } ;

static yyconst flex_int16_t yy_accept[610] =
    {   0,
        1,    3,    5,    6,    7,    9,   10,   12,   13,   15,
       17,   20,   21,   22,   25,   28,   31,   34,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  103,  103,  104,  105,  105,  106,  106,  108,  108,
      109,  110,  113,  114,  115,  115,  116,  116,  118,  118,
      119,  122,  123,  125,  127,  129,  132,  134,  136,  138,
      140,  142,  144,  146,  148,  150,  152,  155,  157,  159,
      161,  163,  165,  167,  169,  171,  173,  175,  177,  179,
      181,  184,  186,  189,  192,  194,  196,  198,  200,  202,

      204,  206,  208,  211,  213,  215,  217,  219,  221,  223,
      225,  227,  229,  231,  233,  235,  237,  239,  241,  243,
      245,  247,  249,  251,  253,  255,  257,  259,  261,  263,
      265,  266,  268,  270,  270,  270,  271,  272,  274,  277,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  305,  308,  311,  313,  315,  317,  319,
      321,  323,  325,  327,  329,  331,  334,  336,  338,  340,
      343,  346,  349,  351,  353,  355,  357,  359,  361,  363,
      365,  368,  370,  372,  375,  378,  380,  382,  384,  386,
      388,  390,  392,  394,  396,  398,  400,  402,  404,  406,

      409,  411,  413,  415,  417,  419,  421,  423,  425,  427,
      429,  431,  434,  436,  438,  440,  443,  445,  447,  449,
      451,  453,  455,  457,  457,  457,  457,  457,  457,  458,
      460,  463,  465,  467,  469,  472,  474,  477,  480,  482,
      484,  486,  488,  490,  492,  494,  496,  498,  500,  503,
      506,  509,  511,  514,  516,  518,  520,  522,  524,  526,
      528,  531,  533,  535,  537,  539,  541,  543,  545,  547,
      550,  552,  554,  556,  559,  561,  563,  565,  567,  569,
      571,  573,  575,  577,  579,  581,  583,  585,  587,  589,
      591,  593,  595,  597,  599,  601,  604,  606,  608,  611,

      613,  615,  617,  619,  622,  624,  626,  629,  631,  633,
      633,  633,  634,  634,  634,  634,  634,  636,  638,  640,
      643,  645,  648,  651,  653,  656,  658,  660,  662,  664,
      666,  668,  670,  672,  674,  676,  678,  680,  683,  685,
      688,  690,  692,  694,  696,  698,  700,  702,  704,  706,
      708,  710,  712,  714,  716,  718,  720,  723,  725,  727,
      729,  731,  734,  736,  738,  740,  743,  745,  747,  750,
      752,  754,  756,  758,  760,  762,  765,  767,  769,  772,
      774,  776,  778,  781,  783,  785,  787,  790,  790,  791,
      791,  792,  792,  794,  796,  799,  802,  804,  806,  808,

      810,  812,  814,  816,  818,  821,  824,  827,  830,  832,
      834,  836,  838,  841,  843,  846,  848,  851,  853,  855,
      857,  860,  862,  865,  867,  869,  871,  873,  875,  878,
      880,  882,  885,  887,  889,  892,  894,  897,  900,  903,
      906,  908,  911,  913,  915,  917,  919,  921,  923,  925,
      927,  929,  931,  932,  934,  936,  938,  940,  942,  944,
      946,  949,  952,  954,  957,  960,  963,  965,  967,  970,
      972,  974,  976,  978,  980,  982,  984,  987,  989,  991,
      993,  995,  998, 1000, 1002, 1004, 1007, 1009, 1012, 1014,
     1017, 1019, 1021, 1023, 1025, 1028, 1030, 1033, 1035, 1037,

     1040, 1042, 1044, 1047, 1049, 1051, 1053, 1055, 1057, 1060,
     1062, 1064, 1066, 1068, 1071, 1073, 1075, 1077, 1079, 1082,
     1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1104,
     1106, 1108, 1111, 1113, 1116, 1118, 1120, 1123, 1126, 1128,
     1130, 1132, 1135, 1138, 1140, 1142, 1144, 1146, 1148, 1150,
     1152, 1155, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172,
     1174, 1176, 1178, 1181, 1183, 1185, 1187, 1189, 1191, 1193,
     1195, 1197, 1199, 1201, 1203, 1205, 1208, 1210, 1212, 1215,
     1218, 1220, 1222, 1224, 1226, 1229, 1231, 1234, 1237, 1240,
     1242, 1245, 1247, 1249, 1251, 1254, 1256, 1259, 1261, 1263,

     1265, 1267, 1269, 1272, 1274, 1277, 1279, 1282, 1282
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   18,   18,    7,    7,    7,
        7,    7,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        7,    1,    7,    1,   23,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[50] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        5,    1,    6,    6,    6,    6,    6,    6,    6,    7,
        8,    9,    9,    7,    7,    7,    7,    8,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[625] =
    {   0,
        0,    0, 1357, 1358,   48, 1352,    0, 1349, 1358,   41,
       59,   40,   52,   60, 1307, 1343,   99,    0,   57,   87,
      110,   51,   48,  112,   55,  147,   76,  100,   81,  113,
       92,  144,  136,  183,  155,   74,  149,  111,   96,   94,
      127, 1348, 1358,    0, 1345, 1358,  191, 1303,  130,    0,
      219,  228,  248,   75, 1341,    0,    0, 1338,  255,  160,
      168,    0,  148,  152,  161,  172,  157,  117,  185,   58,
      188,  192,  191,   53,  143,  249,  211,  244,  238,  267,
      187,  190,  202,  240,  214,  215,  242,  269,  277,  273,
     1337,  250,  270, 1336,  281,  284,  287,  288,  289,  290,

      291,  292, 1335,  296,  298,  294,  299,  293,  301,  309,
      304,  297,  305,  306,  311,  330,  335,  318,  320,  339,
      341,  313,  346,  343,  350,  351,  358,  352,  348,  353,
      383,  392,  357,  361,  362,    0,    0,  369, 1334,  362,
      354,  377,  403,  382,  405,  406,  408,  383,  384,  409,
      410,  411,  413,  414,  416,  418,  420,  422,  421,  427,
      430,  431,  429,  436,  437,  435,  432,  443,  444, 1333,
     1332, 1331,  452,  454,  456,  455,  457,  459,  466,  460,
     1330,  464,  462, 1329, 1328,  463,  465,  467,  470,  468,
      469,  471,  474,  476,  486,  487,  489,  490,  491, 1327,

      494,  498,  504,  499,  501,  505,  506,  507,  509,  513,
      510, 1326,  515,  514,  519, 1325,  511,  517,  531,  518,
      525,  536,  547, 1326,  550,  552, 1325,  553, 1320,  553,
     1321,  556,  557,  558, 1320,  189, 1319, 1318,  559,  560,
      561,  563,  566,  564,  562,  567,  565,  571, 1317,  568,
     1316,  575, 1315,  570,  582,  577,  578,  569,  579,  592,
     1314,  603,  586,  580,  581,  605,  607,  609,  610, 1313,
      613,  615,  616, 1312,  618,  620,  623,  625,  624,  626,
      629,  628,  630,  632,  636,  633,  640,  637,  634,  635,
      651,  641,  653,  654,  643, 1311,  655,  658, 1310,  661,

      666,  672,  671, 1309,  674,  676, 1308,  675,  679,  679,
      682, 1358,  684,  685,  697,  699, 1358,  698,  685, 1307,
      688, 1306, 1305,  700, 1304,  704,  706,  708,  709,  710,
      711,  715,  714,  716,  717,  719,  720, 1303,  721, 1302,
      725,  723,  724,  727,  728,  738,  730,  729,  735,  743,
      744,  750,  751,  757,  759,  760, 1301,  762,  764,  765,
      766, 1300,  763,  770,  771, 1299,  773,  767, 1298,  768,
      775,  776,  777,  778,  782,  785,  787,  790, 1297,  792,
      793,  800, 1296,  802,  804,  803, 1295, 1292, 1291,  813,
     1358, 1290, 1289,  805, 1290, 1289,  812,  806,  814,  816,

      820,  823,  825,  824, 1288, 1287, 1286,  828,  829,  831,
      833,  834, 1285,  837, 1284,  838, 1283,  844,  839,  845,
     1282,  851, 1281,  852,  858,  847,  846,  848, 1280,  863,
      867, 1279,  868,  870, 1278,  875, 1277, 1276, 1275, 1274,
      871, 1273,  874,  876,  878,  877,  879,  880,  883,  884,
      886,  887, 1270,  890,  891,  894,  893,  901,  903,  898,
     1271, 1270,  900, 1269, 1268, 1267,  906,  907, 1266,  908,
      913,  914,  915,  917,  924,  909, 1219,  932,  935,  936,
      937, 1207,  939,  938,  941, 1204,  944, 1183,  948, 1164,
      943,  949,  945,  947, 1152,  954, 1151,  946,  951, 1150,

      957,  952, 1148,  955,  956,  958,  962,  959, 1147,  973,
      975,  978,  981, 1146,  982,  985,  989,  987, 1145, 1143,
      990,  991,  992,  993,  994,  998,  996, 1001, 1142, 1002,
     1005, 1141, 1003, 1140, 1004, 1008, 1139, 1137, 1010, 1016,
     1012, 1136, 1135, 1014, 1026, 1019, 1028, 1030, 1031, 1035,
     1134, 1133, 1032, 1036, 1033, 1038, 1039, 1040, 1049, 1044,
     1057, 1054, 1132, 1059, 1060, 1061, 1062, 1065, 1064, 1070,
     1066, 1072, 1074, 1076, 1073, 1131, 1077, 1082, 1129, 1128,
     1083, 1086, 1085, 1087, 1126, 1088, 1125, 1124, 1122, 1093,
     1121, 1096, 1099, 1100, 1116, 1104,  516, 1103, 1108, 1109,

     1110, 1112,  367, 1113,  307, 1115,   56, 1358, 1163, 1172,
     1181, 1186, 1191, 1197, 1202, 1209, 1210, 1218, 1227, 1231,
     1239, 1248, 1257, 1266
    } ;

static yyconst flex_int16_t yy_def[625] =
    {   0,
      608,    1,  608,  608,  608,  609,  610,  611,  608,  612,
      613,  608,  608,  612,   14,  614,  614,  615,  614,  614,
      614,  614,   17,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      608,  609,  608,  610,  611,  608,  608,   14,  616,  613,
      613,  613,  613,  617,  618,  619,  620,  614,  608,   53,
       17,  615,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      608,   52,   53,  621,  622,  619,  620,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  621,  623,  621,  622,  624,  608,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  621,
      621,  608,  621,  624,  622,  622,  608,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  608,  608,  622,
      608,  608,  608,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  608,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,    0,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608
    } ;

static yyconst flex_int16_t yy_nxt[1408] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   15,   15,   15,   15,   15,   16,
       17,   16,   18,   19,   20,   21,   22,   23,   24,   25,
       16,   26,   27,   16,   28,   29,   30,   31,   32,   16,
       33,   34,   35,   36,   37,   38,   39,   40,   16,   41,
       41,   47,   54,   54,   54,   54,   54,   54,   54,   55,
       50,   49,   50,   56,   50,   50,   50,   50,   49,   51,
       47,   52,   52,   52,   52,   52,   52,   52,   76,   53,
       49,   63,   78,   50,   79,   50,   53,   49,   77,   86,
       50,  151,   87,   64,   80,   49,   50,   65,   66,   95,

      146,   50,   49,   50,   98,   50,   57,   59,   60,   50,
      123,   61,   61,   61,   61,   61,   61,   61,   67,   50,
       50,   50,   50,   96,   68,  130,   50,   69,   41,   41,
      102,   97,  103,   71,   70,   81,   99,  129,   59,   59,
      100,  127,  128,   82,   72,   50,   83,   73,   74,   84,
      101,   75,   50,   50,  144,   85,   50,   50,   50,  110,
       88,   50,   89,  111,   50,   90,   50,  104,  608,   50,
       50,  105,  124,  152,  106,   91,  608,   50,  139,  112,
      125,   50,   92,   93,  107,  120,  126,  108,   94,  138,
      140,  109,   50,  143,   50,  121,   50,   50,   50,   50,

       50,   50,  122,   54,   54,   54,   54,   54,   54,   54,
      113,   50,  145,  141,  114,  148,  149,  115,  116,  142,
       50,  163,  322,   50,   50,  117,  164,  150,  118,  147,
      119,  132,  132,  132,  132,  132,  132,  132,   51,  165,
       52,   52,   52,   52,   52,   52,   52,   50,   53,   50,
      167,   50,  168,   50,  156,   53,   59,   60,   50,   50,
      133,  133,  133,  133,  133,  133,  133,  131,  131,  131,
      131,  131,  131,  131,  153,  157,   50,  154,   50,   50,
      166,  159,   50,  155,  169,  158,   50,  170,  173,  172,
       50,  171,  160,   50,  161,  174,   50,   50,   50,   50,

       50,   50,   50,   50,  175,   50,   50,   50,   50,  162,
       50,  176,  177,   50,   50,   50,   50,  192,   50,  179,
       50,  197,   50,  193,  182,  178,  181,   50,  180,   50,
      190,  183,  189,  185,  186,  184,  191,  187,  188,   50,
      194,  198,  202,  195,   50,  199,  196,  200,   50,  206,
       50,  213,   50,  203,  201,   50,  207,   50,  204,   50,
       50,   50,   50,   50,  210,  608,   50,   50,  225,  228,
      208,   50,  226,  229,  222,  205,   50,  214,   50,  209,
      223,  232,  218,  216,  211,  219,   50,  215,  212,  220,
      217,   50,   50,   50,  221,  131,  131,  131,  131,  131,

      131,  131,   50,  231,  132,  132,  132,  132,  132,  132,
      132,  230,   50,  233,   50,   50,  235,   50,   50,   50,
       50,  240,   50,   50,  239,   50,  234,   50,  236,   50,
       50,   50,  243,  237,  244,  238,   50,  246,   50,   50,
       50,   50,  248,  247,   50,   50,   50,  245,  249,  250,
      241,  242,   50,   50,  252,  253,  251,  259,  254,  256,
      257,   50,  258,   50,   50,   50,   50,  260,   50,   50,
      255,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  261,  268,   50,  267,   50,  262,  265,  264,  263,
      269,  271,  276,  272,  273,   50,   50,  266,   50,   50,

       50,  275,  270,   50,  277,  280,  274,   50,   50,  281,
       50,  279,  278,   50,   50,   50,   50,  282,   50,   50,
       50,  288,   50,   50,   50,   50,   50,   50,   50,  283,
      284,  295,  292,  286,   50,  287,  285,  299,  290,  289,
       50,  291,  300,  304,  293,   50,  297,  294,  296,  298,
      302,  301,  306,  303,  305,  307,   50,  311,  308,  225,
      316,  312,   50,  313,  317,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  309,  320,  324,   50,  331,   50,   50,   50,   50,
       50,   50,  341,  318,  326,   50,  319,  327,  321,  335,

      323,   50,  328,  325,  330,  334,  337,  333,  329,  338,
      332,  339,   50,  336,   50,  343,   50,  347,   50,   50,
      340,  342,   50,  346,   50,   50,  345,   50,  348,   50,
      344,  350,   50,   50,   50,   50,  351,   50,   50,   50,
      355,   50,   50,   50,   50,   50,   50,  349,  358,   50,
       50,  359,   50,  354,  352,  362,  356,  360,  365,  353,
       50,  363,   50,   50,   50,  357,  361,   50,  366,  370,
       50,  367,  364,  375,  368,   50,  369,  372,  373,  374,
       50,   50,  371,   50,   50,   50,  225,  378,   50,  225,
      388,  225,  390,  389,   50,  313,  391,   50,  384,  377,

      376,  380,  379,  383,  314,  387,  228,   50,  392,   50,
      393,  385,  386,   50,  381,   50,  382,   50,   50,   50,
       50,  394,  397,   50,   50,   50,   50,  395,   50,   50,
       50,  400,   50,   50,   50,  396,   50,   50,   50,   50,
      398,  405,  399,  406,   50,  407,  409,   50,  402,  404,
      411,  403,   50,   50,  412,  410,  401,  417,  413,   50,
       50,  408,  414,  419,  416,  418,   50,  421,   50,   50,
      415,   50,   50,   50,   50,   50,   50,   50,  423,   50,
       50,  420,   50,  426,   50,   50,   50,   50,  422,  428,
      429,   50,  430,  424,   50,  435,   50,  425,  434,   50,

      437,   50,   50,  431,  427,  438,  432,  433,  440,   50,
      436,   50,   50,   50,   50,   50,  446,  444,  443,  439,
      314,   50,  441,   50,  453,   50,  442,  450,  445,   50,
      454,  447,   50,   50,   50,  451,  448,   50,   50,  457,
       50,  452,   50,   50,  449,  460,   50,   50,   50,  456,
      455,  458,  461,   50,   50,   50,   50,   50,  459,  463,
       50,   50,  471,  466,  468,  469,  462,   50,  472,  470,
      464,  467,   50,  477,  473,  474,   50,   50,  465,   50,
       50,  475,  476,   50,   50,   50,   50,   50,   50,   50,
      478,  481,   50,   50,  480,   50,   50,  482,  483,   50,

       50,  485,   50,   50,  486,  487,  479,   50,  484,   50,
       50,  488,   50,  489,  490,   50,   50,   50,   50,  492,
      493,  497,   50,   50,   50,  491,   50,  498,  499,  494,
      500,  496,  495,   50,  501,  505,  511,  502,  506,  507,
      508,   50,  503,  504,   50,   50,   50,   50,   50,  510,
       50,  509,   50,   50,   50,   50,   50,   50,   50,  512,
       50,   50,  514,   50,   50,   50,   50,   50,   50,  513,
      519,   50,  515,  516,  517,  520,  522,  518,  524,  523,
      528,  525,   50,  521,   50,  532,  534,   50,  529,  526,
       50,   50,  527,  531,   50,  533,   50,  530,   50,   50,

       50,   50,   50,   50,  537,   50,  535,   50,  538,  539,
       50,   50,   50,   50,   50,  545,  536,   50,  540,   50,
      541,   50,  547,   50,  548,   50,  553,  554,   50,  542,
      546,  543,  544,  552,  549,   50,  550,   50,  557,   50,
       50,   50,   50,  551,   50,   50,  555,   50,   50,   50,
      560,  556,  559,   50,  564,  561,  568,  563,   50,  562,
      558,  566,  565,   50,  570,  567,   50,  572,   50,   50,
       50,   50,  573,   50,   50,   50,  569,  571,  574,   50,
      575,   50,   50,   50,  577,   50,   50,  582,  579,  580,
      581,   50,   50,  583,   50,   50,   50,   50,  585,  586,

      576,  578,   50,  587,  589,   50,  584,  588,   50,   50,
      591,  592,   50,   50,  594,  595,  596,   50,   50,   50,
      590,   50,   50,  597,   50,   50,  598,  593,  599,  600,
       50,   50,  601,   50,   50,   50,  603,   50,   50,  602,
       50,   50,   50,   50,   50,   50,   50,  604,   50,   50,
       50,   50,   50,  606,   50,   50,   50,   50,  605,   50,
       50,   50,  607,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   44,   50,   44,   44,   44,   44,   44,   44,
       44,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       48,   48,   50,   48,   50,   50,   50,   50,   50,   50,

       58,   58,   58,   58,   58,   58,   62,   62,   62,   62,
       62,  131,  131,   50,  131,   54,   50,   54,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  136,   50,  136,
      136,  136,  136,  136,  136,  136,  137,  137,  137,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  315,  315,  315,  315,
      315,  315,  315,  315,  315,   50,   50,   50,   50,   50,
       50,  315,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

      315,  315,  310,  310,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  315,  314,  225,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,  135,  608,
       46,   43,   50,  608,   46,   43,  608,    3,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608
    } ;

static yyconst flex_int16_t yy_chk[1408] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,   10,   12,   12,   12,   12,   12,   12,   12,   13,
       22,   10,   74,   13,   25,  607,   19,   70,   10,   11,
       14,   11,   11,   11,   11,   11,   11,   11,   22,   11,
       14,   19,   23,   36,   23,   27,   11,   14,   22,   25,
       29,   74,   25,   19,   23,   54,   20,   19,   19,   27,

       70,   31,   54,   40,   29,   39,   14,   17,   17,   28,
       36,   17,   17,   17,   17,   17,   17,   17,   20,   21,
       38,   24,   30,   28,   20,   40,   68,   20,   41,   41,
       31,   28,   31,   21,   20,   24,   30,   39,   49,   49,
       30,   38,   38,   24,   21,   33,   24,   21,   21,   24,
       30,   21,   75,   32,   68,   24,   26,   63,   37,   33,
       26,   64,   26,   33,   35,   26,   67,   32,   60,   60,
       65,   32,   37,   75,   32,   26,   61,   61,   64,   33,
       37,   66,   26,   26,   32,   35,   37,   32,   26,   63,
       65,   32,   34,   67,   69,   35,   81,   71,  236,   82,

       73,   72,   35,   47,   47,   47,   47,   47,   47,   47,
       34,   83,   69,   66,   34,   72,   73,   34,   34,   66,
       77,   81,  236,   85,   86,   34,   82,   73,   34,   71,
       34,   51,   51,   51,   51,   51,   51,   51,   52,   83,
       52,   52,   52,   52,   52,   52,   52,   79,   52,   84,
       85,   87,   86,   78,   77,   52,   53,   53,   76,   92,
       53,   53,   53,   53,   53,   53,   53,   59,   59,   59,
       59,   59,   59,   59,   76,   78,   80,   76,   88,   93,
       84,   79,   90,   76,   87,   78,   89,   88,   92,   90,
       95,   89,   80,   96,   80,   93,   97,   98,   99,  100,

      101,  102,  108,  106,   93,  104,  112,  105,  107,   80,
      109,   93,   93,  111,  113,  114,  605,  108,  110,   96,
      115,  112,  122,  109,   99,   95,   98,  118,   97,  119,
      107,   99,  106,  101,  102,  100,  107,  104,  105,  116,
      110,  113,  115,  111,  117,  113,  111,  113,  120,  118,
      121,  122,  124,  116,  114,  123,  119,  129,  117,  125,
      126,  128,  130,  141,  121,  133,  133,  127,  134,  135,
      120,  140,  134,  135,  129,  117,  603,  123,  138,  120,
      130,  141,  126,  124,  121,  126,  142,  123,  121,  127,
      125,  144,  148,  149,  128,  131,  131,  131,  131,  131,

      131,  131,  132,  140,  132,  132,  132,  132,  132,  132,
      132,  138,  143,  142,  145,  146,  144,  147,  150,  151,
      152,  149,  153,  154,  148,  155,  143,  156,  145,  157,
      159,  158,  151,  146,  152,  147,  160,  154,  163,  161,
      162,  167,  156,  155,  166,  164,  165,  153,  157,  158,
      150,  150,  168,  169,  160,  161,  159,  167,  162,  164,
      165,  173,  166,  174,  176,  175,  177,  168,  178,  180,
      163,  183,  186,  182,  187,  179,  188,  190,  191,  189,
      192,  169,  178,  193,  177,  194,  173,  175,  174,  173,
      179,  182,  189,  183,  186,  195,  196,  176,  197,  198,

      199,  188,  180,  201,  190,  192,  187,  202,  204,  193,
      205,  191,  190,  203,  206,  207,  208,  194,  209,  211,
      217,  201,  210,  214,  213,  597,  218,  220,  215,  195,
      196,  207,  205,  198,  221,  199,  197,  211,  203,  202,
      219,  204,  213,  218,  205,  222,  209,  206,  208,  210,
      215,  214,  220,  217,  219,  221,  223,  225,  222,  226,
      228,  225,  230,  226,  228,  232,  233,  234,  239,  240,
      241,  245,  242,  244,  247,  243,  246,  250,  258,  254,
      248,  223,  233,  240,  252,  245,  256,  257,  259,  264,
      265,  255,  258,  230,  242,  263,  232,  243,  234,  250,

      239,  260,  243,  241,  244,  248,  254,  247,  243,  255,
      246,  256,  262,  252,  266,  260,  267,  265,  268,  269,
      257,  259,  271,  264,  272,  273,  263,  275,  266,  276,
      262,  268,  277,  279,  278,  280,  269,  282,  281,  283,
      275,  284,  286,  289,  290,  285,  288,  267,  278,  287,
      292,  279,  295,  273,  271,  282,  276,  280,  285,  272,
      291,  283,  293,  294,  297,  277,  281,  298,  286,  290,
      300,  287,  284,  295,  288,  301,  289,  292,  293,  294,
      303,  302,  291,  305,  308,  306,  310,  300,  309,  311,
      310,  313,  314,  311,  319,  313,  314,  321,  308,  298,

      297,  302,  301,  306,  315,  309,  316,  318,  315,  324,
      316,  308,  308,  326,  303,  327,  305,  328,  329,  330,
      331,  318,  324,  333,  332,  334,  335,  319,  336,  337,
      339,  328,  342,  343,  341,  321,  344,  345,  348,  347,
      326,  333,  327,  334,  349,  335,  337,  346,  330,  332,
      341,  331,  350,  351,  342,  339,  329,  347,  343,  352,
      353,  336,  344,  349,  346,  348,  354,  351,  355,  356,
      345,  358,  363,  359,  360,  361,  368,  370,  353,  364,
      365,  350,  367,  356,  371,  372,  373,  374,  352,  359,
      360,  375,  361,  354,  376,  368,  377,  355,  367,  378,

      371,  380,  381,  363,  358,  372,  364,  365,  374,  382,
      370,  384,  386,  385,  394,  398,  381,  378,  377,  373,
      390,  397,  375,  399,  390,  400,  376,  385,  380,  401,
      394,  382,  402,  404,  403,  385,  384,  408,  409,  399,
      410,  386,  411,  412,  384,  402,  414,  416,  419,  398,
      397,  400,  403,  418,  420,  427,  426,  428,  401,  408,
      422,  424,  419,  411,  414,  416,  404,  425,  420,  418,
      409,  412,  430,  427,  422,  424,  431,  433,  410,  434,
      441,  425,  426,  443,  436,  444,  446,  445,  447,  448,
      428,  433,  449,  450,  431,  451,  452,  434,  436,  454,

      455,  443,  457,  456,  444,  445,  430,  460,  441,  463,
      458,  446,  459,  447,  448,  467,  468,  470,  476,  450,
      451,  456,  471,  472,  473,  449,  474,  457,  458,  452,
      459,  455,  454,  475,  460,  470,  476,  463,  471,  472,
      473,  478,  467,  468,  479,  480,  481,  484,  483,  475,
      485,  474,  491,  487,  493,  498,  494,  489,  492,  478,
      499,  502,  480,  496,  504,  505,  501,  506,  508,  479,
      487,  507,  481,  483,  484,  489,  492,  485,  494,  493,
      501,  496,  510,  491,  511,  506,  508,  512,  502,  498,
      513,  515,  499,  505,  516,  507,  518,  504,  517,  521,

      522,  523,  524,  525,  512,  527,  510,  526,  513,  515,
      528,  530,  533,  535,  531,  523,  511,  536,  516,  539,
      517,  541,  525,  544,  526,  540,  533,  535,  546,  518,
      524,  521,  522,  531,  527,  545,  528,  547,  540,  548,
      549,  553,  555,  530,  550,  554,  536,  556,  557,  558,
      545,  539,  544,  560,  549,  546,  555,  548,  559,  547,
      541,  553,  550,  562,  557,  554,  561,  558,  564,  565,
      566,  567,  559,  569,  568,  571,  556,  557,  560,  570,
      561,  572,  575,  573,  564,  574,  577,  569,  566,  567,
      568,  578,  581,  570,  583,  582,  584,  586,  572,  573,

      562,  565,  590,  574,  577,  592,  571,  575,  593,  594,
      581,  582,  598,  596,  584,  586,  590,  599,  600,  601,
      578,  602,  604,  592,  606,  595,  593,  583,  594,  596,
      591,  589,  598,  588,  587,  585,  600,  580,  579,  599,
      576,  563,  552,  551,  543,  542,  538,  601,  537,  534,
      532,  529,  520,  604,  519,  514,  509,  503,  602,  500,
      497,  495,  606,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  610,  490,  610,  610,  610,  610,  610,  610,
      610,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  488,  612,  613,  613,  613,  613,  613,  613,

      614,  614,  614,  614,  614,  614,  615,  615,  615,  615,
      615,  616,  616,  486,  616,  617,  482,  617,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  619,  477,  619,
      619,  619,  619,  619,  619,  619,  620,  620,  620,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  469,  466,  465,  464,  462,
      461,  453,  442,  440,  439,  438,  437,  435,  432,  429,
      423,  421,  417,  415,  413,  407,  406,  405,  396,  395,

      393,  392,  389,  388,  387,  383,  379,  369,  366,  362,
      357,  340,  338,  325,  323,  322,  320,  307,  304,  299,
      296,  274,  270,  261,  253,  251,  249,  238,  237,  235,
      231,  229,  227,  224,  216,  212,  200,  185,  184,  181,
      172,  171,  170,  139,  103,   94,   91,   58,   55,   48,
       45,   42,   16,   15,    8,    6,    3,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 1, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/**
 * Copyright (c) 2006- Facebook
 * Distributed under the Thrift Software License
 *
 * See accompanying file LICENSE or visit the Thrift site at:
 * http://developers.facebook.com/thrift/
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 * @author Mark Slee <mcslee@facebook.com>
 */
#line 17 "thriftl.ll"

#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1197 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 67 "thriftl.ll"


#line 1382 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 609 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1358 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 69 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 71 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 81 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_async;                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 222 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 228 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 234 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 247 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2150 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 609 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 609 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 608);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 247 "thriftl.ll"



