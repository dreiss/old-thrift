
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1602] =
    {   0,
        1,  160,    1,  160,  166,  165,    1,  165,  163,  165,
        5,  165,    6,  165,  160,  165,  160,  162,  165,  165,
      165,  158,  160,  165,  158,  160,  165,  161,  162,  165,
      161,  162,  165,  161,  162,  165,  161,  165,  161,  162,
      165,  161,  162,  165,  161,  162,  165,  161,  162,  165,
      161,  162,  165,  161,  162,  165,  161,  162,  165,  161,
      162,  165,  161,  162,  165,  161,  162,  165,  161,  162,
      165,  161,  162,  165,  161,  162,  165,  161,  162,  165,
      161,  162,  165,  161,  162,  165,  161,  162,  165,  161,
      162,  165,  161,  162,  165,  161,  162,  165,  161,  162,

      165,  161,  162,  165,    1,    5,  158,  160,  162,  162,
      158,  160,  162,  162,  160,    4,  161,  162,  161,  162,
      162,  160,  161,  162,  161,  162,  161,  161,  161,  162,
      161,  162,  161,  162,  161,  162,   66,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,   80,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  104,  161,  162,  161,  162,  107,  161,  162,

      111,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  119,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  160,  160,
      162,  160,  162,    4,  159,  161,  162,   54,  161,  162,

      161,  161,  161,  161,  161,  161,  161,  162,  161,  162,
       64,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,   76,  161,  162,
       78,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,   86,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
       99,  161,  162,  161,  162,  161,  162,  161,  162,   29,
      161,  162,   30,  161,  162,   31,  161,  162,  161,  162,

      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,   37,  161,  162,  161,  162,  161,
      162,  161,  162,  115,  161,  162,  161,  162,  117,  161,
      162,  118,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   39,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  143,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  149,  161,  162,  150,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  156,  161,  162,  161,  162,  161,
      162,    2,  161,  162,  161,  161,  161,  161,  161,  161,
      161,  161,  162,  161,  162,   65,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,   27,  161,  162,  161,
      162,   28,  161,  162,   70,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,   82,  161,  162,   83,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,   48,  161,  162,  161,  162,   95,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  103,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,   38,  161,  162,  161,  162,  161,
      162,  161,  162,  116,  161,  162,  161,  162,  161,  162,
      120,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  127,

      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  132,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  138,
      161,  162,  139,  161,  162,  161,  162,  161,  162,  142,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,   26,  161,  162,  161,
      162,  153,  161,  162,  161,  162,  155,  161,  162,  161,
      162,  161,  162,    3,    2,  164,   53,  161,  162,  161,
      161,  161,  161,  161,  161,  161,  161,  162,   63,  161,

      162,  161,  162,   52,  161,  162,   68,  161,  162,  161,
      162,   69,  161,  162,   71,  161,  162,   72,  161,  162,
       73,  161,  162,  161,  162,   49,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
       85,  161,  162,  161,  162,  161,  162,   90,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
       96,  161,  162,  161,  162,   98,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,

      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  122,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  126,  161,  162,  161,  162,
      161,  162,  161,  162,  129,  161,  162,  161,  162,  161,
      162,   36,  161,  162,  161,  162,  161,  162,   35,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  135,
      161,  162,  161,  162,  161,  162,  140,  161,  162,  161,
      162,  161,  162,  144,  161,  162,   43,  145,  161,  162,
      161,  162,  161,  162,  148,  161,  162,  161,  162,  161,
      162,  154,  161,  162,  161,  162,  161,  162,  161,  162,

      157,  161,  162,    3,  164,    2,  164,  161,  161,  161,
      161,  161,  161,  161,  161,  162,   67,  161,  162,   34,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,   79,  161,
      162,   32,  161,  162,  161,  162,   84,  161,  162,  161,
      162,   88,  161,  162,  161,  162,  161,  162,   93,  161,
      162,   94,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  102,  161,  162,  161,  162,  106,  161,  162,
      161,  162,  108,  161,  162,  161,  162,  161,  162,  161,
      162,  112,  161,  162,  113,  161,  162,  161,  162,  114,

      161,  162,   40,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  121,  125,  161,  162,  161,
      162,  161,  162,  161,  162,  128,  161,  162,  131,  161,
      162,  161,  162,  161,  162,  133,  161,  162,  161,  162,
      134,  161,  162,   33,  161,  162,   42,  161,  162,  136,
      161,  162,  161,  162,   46,  161,  162,  161,  162,  161,
      162,  146,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      164,  161,   56,  161,  161,  161,  161,  161,  161,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,   75,  161,  162,   77,  161,  162,   81,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,   45,  161,  162,   97,  161,  162,  100,  161,
      162,  161,  162,  161,  162,   25,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  123,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,   47,  161,  162,  161,  162,
      161,  162,  161,  162,   41,  161,  162,  161,  162,  151,
      161,  162,  161,  162,   20,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,   57,  161,  161,   59,

      161,  161,  161,   62,  161,  162,  161,  162,   74,  161,
      162,  161,  162,  161,  162,   10,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,   92,  161,  162,  161,
      162,  101,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,   51,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  130,  161,  162,   50,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,  147,
      161,  162,  152,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,   55,  161,  161,  161,  161,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,

       91,  161,  162,   44,  161,  162,  161,  162,  161,  162,
      110,  161,  162,  161,  162,    7,  161,  162,  161,  162,
      161,  162,  124,  161,  162,   15,  161,  162,  161,  162,
      161,  162,  161,  162,  141,  161,  162,   24,  161,  162,
      161,  162,  161,  162,  161,  162,  161,   60,  161,  161,
      161,  162,  161,  162,  161,  162,  161,  162,   87,  161,
      162,   89,  161,  162,  105,  161,  162,  109,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,  161,  161,
      161,  162,    9,  161,  162,  161,  162,  161,  162,  161,

      162,  161,  162,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  161,  162,  161,  162,  161,  162,   58,
      161,  161,   12,  161,  162,  161,  162,  161,  162,   11,
      161,  162,   16,  161,  162,  161,  162,  161,  162,  161,
      162,  161,  162,  137,  161,  162,  161,  162,   22,  161,
      162,   21,  161,  162,   61,  161,    8,  161,  162,  161,
      162,   14,  161,  162,  161,  162,  161,  162,  161,  162,
       23,  161,  162,  161,  162,   17,  161,  162,  161,  162,
      161,  162,  161,  162,  161,  162,  161,  162,   13,  161,
      162,  161,  162,   19,  161,  162,  161,  162,   18,  161,

      162
    } ;

static yyconst flex_int16_t yy_accept[771] =
    {   0,
        1,    3,    5,    6,    7,    9,   11,   13,   15,   17,
       20,   21,   22,   25,   28,   31,   34,   37,   39,   42,
       45,   48,   51,   54,   57,   60,   63,   66,   69,   72,
       75,   78,   81,   84,   87,   90,   93,   96,   99,  102,
      105,  106,  107,  107,  109,  109,  110,  111,  114,  115,
      116,  116,  117,  117,  119,  121,  121,  122,  125,  127,
      128,  129,  131,  133,  135,  137,  140,  142,  144,  146,
      148,  150,  152,  154,  156,  158,  160,  162,  165,  167,
      169,  171,  173,  175,  177,  179,  181,  183,  185,  187,
      189,  191,  193,  196,  198,  201,  204,  206,  208,  210,

      212,  214,  216,  218,  220,  222,  224,  226,  229,  231,
      233,  235,  237,  239,  241,  243,  245,  247,  249,  251,
      253,  255,  257,  259,  261,  263,  265,  267,  269,  271,
      273,  275,  277,  279,  281,  283,  285,  287,  289,  290,
      292,  294,  294,  294,  295,  296,  298,  301,  302,  303,
      304,  305,  306,  307,  309,  311,  314,  316,  318,  320,
      322,  324,  326,  328,  330,  332,  334,  336,  338,  340,
      342,  344,  346,  348,  351,  354,  356,  358,  360,  362,
      365,  367,  369,  371,  373,  375,  377,  379,  381,  384,
      386,  388,  390,  393,  396,  399,  401,  403,  405,  407,

      409,  411,  413,  415,  418,  420,  422,  424,  427,  429,
      432,  435,  437,  439,  441,  443,  445,  447,  449,  451,
      453,  455,  457,  459,  461,  463,  465,  467,  469,  471,
      473,  476,  478,  480,  482,  484,  486,  488,  490,  492,
      494,  496,  498,  500,  502,  505,  507,  509,  511,  513,
      515,  517,  520,  523,  525,  527,  529,  531,  533,  535,
      538,  540,  542,  542,  542,  542,  542,  542,  543,  545,
      546,  547,  548,  549,  550,  551,  552,  554,  556,  559,
      561,  563,  565,  567,  570,  572,  575,  578,  580,  582,
      584,  586,  588,  590,  592,  594,  596,  598,  600,  602,

      604,  607,  610,  612,  614,  616,  618,  620,  622,  624,
      627,  629,  632,  634,  636,  638,  640,  642,  644,  646,
      649,  651,  653,  655,  657,  659,  661,  663,  665,  668,
      670,  672,  674,  677,  679,  681,  684,  686,  688,  690,
      692,  694,  696,  698,  700,  703,  705,  707,  709,  711,
      713,  715,  718,  720,  722,  724,  726,  728,  730,  732,
      734,  736,  738,  740,  743,  746,  748,  750,  753,  755,
      757,  759,  761,  763,  765,  767,  770,  772,  775,  777,
      780,  782,  784,  784,  784,  785,  785,  785,  785,  785,
      787,  790,  791,  792,  793,  794,  795,  796,  797,  799,

      802,  804,  807,  810,  812,  815,  818,  821,  824,  826,
      829,  831,  833,  835,  837,  839,  841,  843,  845,  847,
      849,  851,  854,  856,  858,  861,  863,  865,  867,  869,
      871,  874,  876,  879,  881,  883,  885,  887,  889,  891,
      893,  895,  897,  899,  901,  903,  905,  907,  909,  911,
      913,  915,  918,  920,  922,  924,  926,  929,  931,  933,
      935,  938,  940,  942,  945,  947,  949,  952,  954,  956,
      958,  960,  963,  965,  967,  970,  972,  974,  977,  981,
      983,  985,  988,  990,  992,  995,  997,  999, 1001, 1004,
     1004, 1005, 1005, 1006, 1006, 1008, 1009, 1010, 1011, 1012,

     1013, 1014, 1015, 1017, 1020, 1023, 1025, 1027, 1029, 1031,
     1033, 1035, 1037, 1039, 1042, 1045, 1047, 1050, 1052, 1055,
     1057, 1059, 1062, 1065, 1067, 1069, 1071, 1073, 1076, 1078,
     1081, 1083, 1086, 1088, 1090, 1092, 1095, 1098, 1100, 1103,
     1106, 1108, 1110, 1112, 1114, 1116, 1120, 1122, 1124, 1126,
     1129, 1132, 1134, 1136, 1139, 1141, 1144, 1147, 1150, 1153,
     1155, 1158, 1160, 1162, 1165, 1167, 1169, 1171, 1173, 1175,
     1177, 1179, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189,
     1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1207, 1210,
     1213, 1215, 1217, 1219, 1221, 1223, 1226, 1229, 1232, 1234,

     1236, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1256,
     1258, 1260, 1262, 1264, 1266, 1269, 1271, 1273, 1275, 1278,
     1280, 1283, 1285, 1288, 1290, 1292, 1294, 1296, 1297, 1299,
     1300, 1302, 1303, 1304, 1307, 1309, 1312, 1314, 1316, 1319,
     1321, 1323, 1325, 1327, 1330, 1332, 1335, 1337, 1339, 1341,
     1343, 1345, 1348, 1350, 1352, 1354, 1356, 1359, 1362, 1364,
     1366, 1368, 1370, 1373, 1376, 1378, 1380, 1382, 1384, 1386,
     1387, 1388, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1404,
     1407, 1409, 1411, 1414, 1416, 1419, 1421, 1423, 1426, 1429,
     1431, 1433, 1435, 1438, 1441, 1443, 1445, 1447, 1448, 1450,

     1451, 1453, 1455, 1457, 1459, 1462, 1465, 1468, 1471, 1473,
     1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1490, 1491,
     1493, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512,
     1514, 1516, 1518, 1520, 1522, 1523, 1526, 1528, 1530, 1533,
     1536, 1538, 1540, 1542, 1544, 1547, 1549, 1552, 1555, 1557,
     1560, 1562, 1565, 1567, 1569, 1571, 1574, 1576, 1579, 1581,
     1583, 1585, 1587, 1589, 1592, 1594, 1597, 1599, 1602, 1602
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   28,   28,   28,   28,   28,
        6,    1,    6,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[782] =
    {   0,
        0,    0, 1641, 1642,   63, 1642,    0, 1642,   57,   91,
       56,   68,   67, 1578, 1630,   69,  127, 1600,   75,  103,
      110,   85,  160,  142,   67,  173,   72,   74,   77,  161,
      153,  188,  144,  202,  170,  128,  189,   76,  162,   79,
       93,    0,  254, 1575,  265,    0,  272,  281,  293,  300,
     1629,    0,    0, 1626,   73,  313,  320,  311,   80,    0,
      318,   90,  143,   82,   88,  175,  109,  185,  146,  197,
      204,  294,  211,  312,  148,  209,  335,  184,  187,  313,
      332,  337,  226,  248,  239,  336,  341,  345,  346,  347,
      232,  350, 1625,  348,  349, 1624,  353,  358,  359,  360,

      212,  366,  368,  362,  363,  372,  373, 1623,  375,  377,
      374,  387,  378,  220,  379,  394,  385,  392,  391,  388,
      399,  402,  410,  396,  401,  413,  418,  411,  428,  436,
      437,  438,  445,  453,  414,  450,  214,  454,  495,  502,
      514,  154,  460,    0,    0,  457, 1622, 1601, 1602,  446,
     1601, 1604, 1607,  465,  452, 1616,  467,  459,  481,  489,
      495,  471,  496,  479,  494,  529,  490,  492,  530,  531,
      533,  534,  532,  537,  541,  539,  542,  543,  547,  549,
      540,  544,  554,  545,  555,  546,  553,  563,  557,  560,
      565,  551, 1615, 1614, 1613,  558,  559,  566,  556,  569,

      568,  576,  571, 1612,  606,  608,  609, 1611,  610, 1610,
     1609,  611,  612,  613,  614,  615,  617,  616,  621,  622,
      618,  623,  619,  624,  626,  625,  627,  634,  628,  629,
     1608,  636,  631,  630,  633,  635,  643,  637,  651,  641,
      639,  632,  645,  689, 1607,  690,  691,  648,  693,  694,
      695, 1606, 1605,  649,  696,  700,  654,  699,  701, 1604,
      702,  703, 1605,  550,  706, 1604,  707, 1599,  706, 1590,
     1574, 1578, 1575, 1574, 1568, 1573,  707,  710, 1593,  712,
      711,  713,  714, 1592,  715, 1591, 1590,  716,  717,  718,
      719,  720,  722,  734,  721,  736,  726,  735,  737,  739,

     1589,  741,  745,  748,  742,  750,  746,  751,  747, 1588,
      757, 1587,  762,  763,  767,  764,  770,  771,  773, 1586,
      775,  774,  787,  789,  792,  791,  790,  793, 1585,  795,
      796,  799, 1584,  801,  804, 1583,  806,  810,  807,  811,
      812,  814,  815,  817, 1582,  816,  823,  818,  824,  825,
      828, 1581,  827,  829,  830,  833,  834,  839,  840,  847,
      842,  849,  843, 1580, 1579,  845,  854, 1578,  855,  858,
      860,  862,  863,  865,  866, 1577,  870, 1576,  871, 1575,
      884,  876,  888,  889, 1642,  894,  896,  902,  909, 1642,
     1574, 1547, 1543, 1557, 1558, 1555, 1551, 1553,  885, 1566,

      873, 1565, 1564,  895, 1563, 1562, 1561, 1560,  901, 1559,
      908,  912,  913,  917,  918,  920,  921,  923,  924,  926,
      925, 1558,  929,  931, 1557,  932,  934,  935,  933,  940,
     1556,  936, 1555,  942,  937,  938,  939,  941,  947,  950,
      944,  948,  946,  956,  954,  952,  959,  945,  953,  965,
      968, 1554,  966,  976,  985,  989, 1553,  992,  995,  994,
     1552, 1000, 1001, 1551, 1002, 1003, 1550, 1004, 1005, 1009,
     1006, 1549, 1011, 1007, 1012, 1013, 1016, 1548, 1547, 1014,
     1018, 1546, 1019, 1020, 1545, 1023, 1027, 1021, 1544, 1541,
     1540, 1027, 1642, 1539, 1538, 1513, 1509, 1508, 1509, 1506,

     1511, 1507, 1024, 1532, 1531, 1026, 1030, 1031, 1032, 1033,
     1039, 1035, 1036, 1530, 1529, 1047, 1528, 1040, 1052, 1046,
     1059, 1527, 1067, 1070, 1073, 1075, 1076, 1526, 1077, 1525,
     1082, 1524, 1083, 1084, 1087, 1523, 1522, 1089, 1521, 1520,
     1091, 1092, 1088, 1090, 1093, 1519, 1094, 1097, 1098, 1518,
     1517, 1096, 1099, 1516, 1104, 1515, 1514, 1513, 1512, 1101,
     1511, 1102, 1103, 1510, 1106, 1107, 1108, 1109, 1110, 1113,
     1123, 1125, 1507, 1479,    0, 1478, 1488, 1476, 1491, 1479,
     1128, 1129, 1135, 1137, 1139, 1141, 1143, 1502, 1501, 1500,
     1151, 1152, 1147, 1146, 1153, 1499, 1498, 1497, 1156, 1157,

     1496, 1154, 1158, 1160, 1161, 1162, 1163, 1167, 1495, 1168,
     1165, 1166, 1171, 1170, 1459, 1183, 1172, 1184, 1429, 1185,
     1426, 1187, 1425, 1189, 1191, 1194, 1196, 1395,    0, 1399,
        0, 1392, 1410, 1419, 1198, 1417, 1205, 1208, 1416, 1207,
     1210, 1209, 1211, 1415, 1216, 1414, 1214, 1217, 1219, 1220,
     1228, 1412, 1226, 1222, 1231, 1233, 1411, 1410, 1238, 1229,
     1230, 1239, 1409, 1408, 1223, 1242, 1243, 1240,    0, 1385,
     1377, 1393, 1244, 1245, 1246, 1247, 1249, 1250, 1404, 1402,
     1251, 1258, 1398, 1252, 1397, 1265, 1274, 1395, 1393, 1254,
     1275, 1276, 1392, 1389, 1277, 1280, 1281, 1358,    0, 1370,

     1285, 1286, 1296, 1294, 1383, 1382, 1381, 1380, 1297, 1298,
     1300, 1292, 1303, 1305, 1306, 1301, 1308, 1350, 1349, 1307,
     1376, 1309, 1310, 1312, 1313, 1317, 1314, 1315, 1316, 1318,
     1321, 1325, 1327,    0, 1346,  653, 1332, 1329,  652,  646,
     1343, 1340, 1350, 1352,  640, 1354,  638,  550,    0,  480,
     1355,  478, 1356, 1357, 1361,  473, 1362,  266, 1364, 1365,
     1367, 1369, 1370,  250, 1371,   84, 1373,   78, 1642, 1436,
     1440, 1443, 1448, 1452, 1459, 1466, 1469, 1475, 1482, 1489,
     1496
    } ;

static yyconst flex_int16_t yy_def[782] =
    {   0,
      769,    1,  769,  769,  769,  769,  770,  769,  771,  772,
      769,  769,  771,   13,  773,  773,  773,  774,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      769,  770,  769,   13,  769,  772,  772,  772,  772,  769,
      775,  776,  777,  773,  773,  769,  772,   23,  773,  774,
      774,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  769,  772,
      772,  778,  779,  776,  777,  773,  773,  774,  774,  774,
      774,  774,  774,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  778,  780,  778,  779,  781,  769,  773,  774,
      774,  774,  774,  774,  774,  774,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  778,  778,  769,  778,  781,  779,  779,  769,
      773,  774,  774,  774,  774,  774,  774,  774,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  769,
      769,  779,  769,  769,  769,  774,  774,  774,  774,  774,

      774,  774,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  769,  774,  774,  774,  774,  774,  774,  774,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  774,  774,  774,
      774,  774,  774,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  774,  774,
      774,  774,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  774,  774,  774,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  774,  774,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  774,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,    0,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769
    } ;

static yyconst flex_int16_t yy_nxt[1707] =
    {   0,
        4,    5,    5,    6,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   15,   16,
       15,   15,   17,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   18,   19,   20,
       21,   22,   23,   24,   25,   15,   26,   27,   15,   28,
       29,   30,   31,   32,   15,   33,   34,   35,   36,   37,
       38,   39,   40,   15,   41,   41,   43,   50,   50,   50,
       50,   50,   50,   50,   51,   46,   43,   46,   52,   45,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   45,
       46,   55,   46,   46,   41,   41,   46,  146,   46,   45,

       47,  147,   48,   48,   48,   48,   48,   48,   48,   45,
       97,   46,   98,   49,   62,  100,   88,   46,   46,   89,
       99,  134,  135,  156,   63,  138,   64,   77,   53,  101,
       65,   66,  157,   49,   56,   57,   46,   78,   58,   58,
       58,   58,   58,   58,   58,   67,  154,   79,   72,   68,
       46,   46,   46,  160,   46,   69,   46,   59,   70,   73,
      264,   46,   74,   75,  265,   71,   76,   56,   57,   46,
       46,   58,   58,   58,   58,   58,   58,   58,   46,  129,
       83,   46,  115,   46,  130,   90,  116,   91,   84,  155,
       92,   85,   46,   46,   86,   46,   46,   46,  162,  102,

       87,  171,  117,  103,  106,   46,  107,  104,  108,   80,
       46,   81,   46,  105,  136,  126,   93,   46,  137,   46,
       46,   82,   46,   94,   95,  127,  109,  131,   46,   96,
      110,  158,  128,  111,   46,  132,  161,  159,  177,  163,
       46,  133,  176,  112,  118,  194,  113,   46,  119,  167,
      114,  120,  121,  205,  172,  261,   46,  220,   46,  122,
      123,  164,  124,  168,  125,   50,   50,   50,   50,   50,
       50,   50,   56,   56,   46,  186,  139,  139,  139,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  140,  140,
       47,  188,   48,   48,   48,   48,   48,   48,   48,  187,

       56,   57,   46,   49,  141,  141,  141,  141,  141,  141,
      141,   50,   50,   50,   50,   50,   50,   50,  769,   46,
       46,   46,   45,   49,  139,  139,  139,  139,  139,  139,
      139,  141,  141,  141,  141,  141,  141,  141,  148,  149,
       46,  150,   45,   46,   46,   46,  151,  152,  153,   46,
      165,  166,  169,   46,   46,   46,   46,   46,   46,  178,
       54,   46,   54,  170,  193,  195,   46,   46,   46,  179,
       46,   46,   54,  180,   46,  173,   46,  183,  174,  184,
       46,   46,   46,   46,  175,   46,   46,   46,  181,  197,
      182,  189,  190,   46,  185,   46,   46,  191,  198,   46,

       46,  196,   46,  192,   46,  199,  200,   46,  202,   46,
       46,  210,  201,  204,  212,  203,  206,  219,   46,   46,
      211,   46,   46,  207,  227,  221,   46,  216,  208,  209,
      213,  214,  215,  217,  233,  222,   46,  234,  223,  218,
      235,  228,  238,  229,   46,   46,   46,  230,  224,  231,
      225,  226,  239,   46,  232,  240,  243,  236,   46,  241,
       46,   46,   46,  237,  246,   46,  267,   46,  242,  247,
      268,  259,  272,   46,  248,   46,  244,  249,  252,   46,
      245,   46,  273,  269,  250,  251,   46,   46,   46,   46,
      278,  255,  253,  254,  256,  257,  262,   46,   46,  258,

       46,  280,   46,   46,   46,  260,  139,  139,  139,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  140,  140,
      284,  286,  277,  279,   49,  141,  141,  141,  141,  141,
      141,  141,  281,  283,  285,  282,  287,   46,   46,   46,
       46,   46,   46,  290,   49,   46,  289,   46,   46,   46,
       46,   46,   46,   46,   46,   46,  384,   46,   46,   46,
      385,   46,   46,   46,   46,   46,   46,   46,   46,  288,
      294,   46,  295,   46,   46,  297,   46,   46,  299,   46,
      300,  296,  291,  298,   46,  312,  301,  292,  293,  302,
      304,  315,  305,  303,  310,  306,  311,  313,  309,  317,

      318,  316,  314,  320,  319,  307,  327,  321,  323,  308,
      322,  326,  324,  325,   46,  328,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,  329,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      331,   46,  338,   46,   46,  332,   46,   46,  335,   46,
       46,   46,   46,  337,  330,  346,  348,  333,  339,  336,
      342,  334,  343,  341,  344,  345,  340,  352,  355,  357,
      349,  359,  347,  350,  366,  361,  353,  356,  354,  351,
      358,  363,  364,  360,  362,  365,  367,   46,   46,   46,

      371,   46,   46,   46,   46,  378,  375,   46,   46,   46,
       46,   46,  264,  389,   46,   46,  386,  390,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,  368,  369,  370,   46,  372,  391,  376,  377,  381,
      373,  374,   46,   46,   46,   46,  380,   46,  379,   46,
       46,  402,  382,   46,   46,   46,   46,  409,   46,   46,
      408,  406,  399,  405,  403,   46,  400,  401,  411,  404,
       46,   46,   46,  407,  416,   46,  415,  410,   46,   46,
      412,   46,   46,   46,  417,  413,  419,  421,  422,  420,
      423,  414,  418,  425,  424,   46,  427,   46,   46,   46,

       46,   46,  428,   46,   46,  431,  426,   46,  434,   46,
      429,  436,   46,  430,   46,   46,  432,  437,   46,   46,
       46,  433,   46,   46,   46,   46,   46,  443,  435,  438,
      441,   46,   46,   46,  444,   46,   46,   46,   46,  448,
      440,   46,   46,  450,  445,  439,  442,   46,   46,  453,
       46,   46,  446,   46,  454,   46,  449,   46,  447,  457,
      455,  451,   46,   46,  452,  463,   46,  456,   46,  459,
       46,   46,  458,   46,   46,  465,  460,  464,   46,   46,
      462,   46,  466,  468,   46,  469,  461,  471,  474,  473,
      467,  470,   46,   46,  264,  264,  477,  472,  490,  491,

      264,  478,  492,   46,  386,  475,  493,  481,  387,   46,
      476,  479,  494,  485,  482,  267,   46,  489,  480,  495,
       46,   46,  486,  503,  483,   46,   46,  484,   46,   46,
      504,   46,   46,   46,   46,  487,  488,   46,  506,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,  509,   46,   46,   46,   46,   46,  505,   46,  507,
       46,   46,   46,  508,   46,  514,  515,   46,  517,  518,
      513,  511,  516,   46,   46,  512,   46,  522,  520,  510,
      521,  524,  526,  527,   46,  525,  519,  528,  531,  529,
      523,  534,  532,   46,  536,  533,  537,   46,  530,  535,

       46,  539,   46,   46,  541,  538,  543,  540,   46,   46,
       46,   46,   46,   46,   46,   46,  545,   46,  542,   46,
       46,   46,   46,  544,   46,  546,   46,   46,   46,   46,
      547,   46,   46,  387,   46,   46,  550,  573,   46,   46,
       46,   46,  553,   46,   46,  556,  554,   46,   46,  548,
      549,  551,  552,  557,   46,   46,  559,  566,  563,  562,
       46,  555,  560,  558,  581,  570,  567,   46,  561,  565,
      564,  584,  568,  571,  572,   46,  587,  588,   46,  582,
      569,   46,  585,   46,   46,   46,  586,  590,  583,  591,
       46,   46,   46,  589,  592,   46,   46,   46,   46,   46,

       46,   46,   46,  593,   46,   46,   46,   46,  594,   46,
       46,   46,   46,  595,   46,   46,   46,   46,   46,  600,
      598,   46,  603,  602,  601,  604,  596,  605,  599,  606,
      607,   46,  609,   46,  614,  597,   46,   46,  608,  612,
      613,  615,  616,   46,  618,   46,  619,   46,  620,   46,
      610,   46,  611,  617,   46,   46,  621,  622,  623,   46,
       46,   46,   46,  625,   46,   46,   46,  624,   46,   46,
       46,   46,  626,   46,   46,   46,   46,  636,   46,   46,
       46,  638,  627,  639,  635,  634,  637,  643,  644,  641,
      642,   46,   46,   46,  640,   46,  648,   46,  649,   46,

      650,  651,   46,  653,   46,  645,   46,  646,  647,  654,
      655,  652,  658,   46,  656,   46,   46,   46,   46,   46,
      659,  657,   46,  661,   46,   46,  663,   46,   46,  664,
       46,   46,  660,  666,   46,  662,   46,   46,   46,   46,
      673,   46,  668,  667,  665,  676,   46,   46,   46,  678,
       46,   46,   46,   46,   46,   46,  679,   46,   46,   46,
       46,  683,   46,  674,  675,  677,   46,  680,  684,  682,
      685,  681,  688,   46,  686,  689,  692,  691,  687,  694,
      690,  696,   46,   46,   46,   46,  702,  701,   46,   46,
      709,  705,  697,   46,   46,  706,  693,  704,  695,  703,

       46,  708,   46,  710,   46,   46,   46,  707,   46,   46,
      712,   46,  713,   46,   46,   46,   46,   46,   46,  716,
       46,   46,   46,   46,   46,   46,   46,  711,  721,   46,
      715,  720,  717,   46,  722,   46,  723,   46,  726,  714,
       46,  724,  725,  728,  731,  727,  733,  730,   46,  737,
      732,   46,  742,  743,  739,  740,  729,  741,   46,  745,
       46,  746,   46,   46,   46,   46,  738,  747,  736,   46,
       46,  744,   46,   46,  750,   46,  748,   46,   46,   46,
      753,   46,  751,  749,   46,  752,  735,  734,   46,   46,
       46,   46,  719,  757,  755,  718,  756,   46,  758,  759,

       46,   46,  761,   46,  760,   46,   46,  754,  762,  764,
       46,  763,   46,  700,  699,  698,   46,   46,   46,   46,
       46,  765,   46,   46,   46,   46,  767,   46,  672,  671,
      670,  766,  669,   46,   46,  768,   42,   46,   42,   42,
       42,   42,   42,   44,   44,   46,   46,   46,   46,   46,
       54,   54,   54,   54,   54,   60,   60,   60,   60,  142,
      142,  142,  142,  142,  142,  142,  144,   46,  144,  144,
      144,  144,  144,  145,  145,  263,  263,  263,  263,  263,
      263,  263,  266,  266,  266,  266,  266,  266,  266,  383,
      383,  383,  383,  383,  383,  383,  388,  388,  388,  388,

      388,  388,  388,   46,   46,   46,   46,   46,   46,   46,
       46,  633,  632,  631,  630,  629,  628,  388,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,  580,  579,  578,  577,  576,  575,  574,  388,  388,
      383,  383,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  502,  501,  500,  499,  498,
      497,  496,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,  398,  397,  396,  395,  394,  393,  392,  388,
      387,  264,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  276,  275,  274,  271,  270,
       46,   46,   46,   46,   46,  143,  769,   61,   46,  769,
      769,    3,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769
    } ;

static yyconst flex_int16_t yy_chk[1707] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    9,   11,   11,   11,
       11,   11,   11,   11,   12,   25,   13,   16,   12,    9,
       27,   55,   28,   19,   38,   29,  768,   40,   59,   13,
       64,   16,  766,   22,   41,   41,   65,   55,   62,    9,

       10,   59,   10,   10,   10,   10,   10,   10,   10,   13,
       27,   20,   28,   10,   19,   29,   25,   67,   21,   25,
       28,   38,   38,   64,   19,   40,   19,   22,   13,   29,
       19,   19,   65,   10,   17,   17,   36,   22,   17,   17,
       17,   17,   17,   17,   17,   20,   62,   22,   21,   20,
       24,   63,   33,   67,   69,   20,   75,   17,   20,   21,
      142,   31,   21,   21,  142,   20,   21,   23,   23,   30,
       39,   23,   23,   23,   23,   23,   23,   23,   35,   36,
       24,   26,   33,   66,   36,   26,   33,   26,   24,   63,
       26,   24,   78,   68,   24,   79,   32,   37,   69,   30,

       24,   75,   33,   30,   31,   70,   31,   30,   31,   23,
       34,   23,   71,   30,   39,   35,   26,   76,   39,   73,
      101,   23,  137,   26,   26,   35,   32,   37,  114,   26,
       32,   66,   35,   32,   83,   37,   68,   66,   79,   70,
       91,   37,   78,   32,   34,   91,   32,   85,   34,   73,
       32,   34,   34,  101,   76,  137,   84,  114,  764,   34,
       34,   71,   34,   73,   34,   43,   43,   43,   43,   43,
       43,   43,   45,   45,  758,   83,   45,   45,   45,   45,
       45,   45,   45,   47,   47,   47,   47,   47,   47,   47,
       48,   85,   48,   48,   48,   48,   48,   48,   48,   84,

       49,   49,   72,   48,   49,   49,   49,   49,   49,   49,
       49,   50,   50,   50,   50,   50,   50,   50,   58,   58,
       74,   80,   50,   48,   56,   56,   56,   56,   56,   56,
       56,   57,   57,   57,   57,   57,   57,   57,   61,   61,
       81,   61,   50,   77,   86,   82,   61,   61,   61,   87,
       72,   72,   74,   88,   89,   90,   94,   95,   92,   80,
       58,   97,   58,   74,   90,   92,   98,   99,  100,   80,
      104,  105,   58,   81,  102,   77,  103,   82,   77,   82,
      106,  107,  111,  109,   77,  110,  113,  115,   81,   95,
       81,   86,   87,  117,   82,  112,  120,   88,   95,  119,

      118,   94,  116,   89,  124,   95,   95,  121,   98,  125,
      122,  104,   97,  100,  106,   99,  102,  113,  123,  128,
      105,  126,  135,  102,  117,  115,  127,  111,  103,  103,
      107,  109,  110,  112,  120,  116,  129,  121,  116,  112,
      122,  118,  124,  118,  130,  131,  132,  118,  116,  118,
      116,  116,  125,  133,  119,  126,  127,  122,  136,  126,
      155,  134,  138,  123,  128,  146,  143,  158,  126,  129,
      143,  135,  150,  154,  129,  157,  127,  129,  130,  162,
      127,  756,  150,  146,  129,  129,  752,  164,  750,  159,
      155,  133,  131,  132,  133,  134,  138,  160,  167,  134,

      168,  158,  165,  161,  163,  136,  139,  139,  139,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  140,  140,
      162,  164,  154,  157,  140,  141,  141,  141,  141,  141,
      141,  141,  159,  161,  163,  160,  165,  166,  169,  170,
      173,  171,  172,  168,  140,  174,  167,  176,  181,  175,
      177,  178,  182,  184,  186,  179,  264,  180,  748,  192,
      264,  187,  183,  185,  199,  189,  196,  197,  190,  166,
      171,  188,  172,  191,  198,  174,  201,  200,  176,  203,
      177,  173,  169,  175,  202,  184,  178,  170,  170,  179,
      180,  187,  180,  179,  182,  180,  183,  185,  181,  189,

      190,  188,  186,  192,  191,  180,  201,  196,  197,  180,
      196,  200,  198,  199,  205,  202,  206,  207,  209,  212,
      213,  214,  215,  216,  218,  217,  221,  223,  203,  219,
      220,  222,  224,  226,  225,  227,  229,  230,  234,  233,
      242,  235,  228,  236,  232,  238,  747,  241,  745,  240,
      206,  237,  216,  243,  740,  207,  248,  254,  213,  239,
      739,  736,  257,  215,  205,  223,  225,  209,  217,  214,
      219,  212,  220,  218,  221,  222,  217,  228,  232,  234,
      226,  236,  224,  226,  242,  237,  229,  233,  230,  227,
      235,  239,  240,  236,  238,  241,  243,  244,  246,  247,

      248,  249,  250,  251,  255,  257,  254,  258,  256,  259,
      261,  262,  265,  267,  269,  277,  265,  267,  278,  281,
      280,  282,  283,  285,  288,  289,  290,  291,  292,  295,
      293,  244,  246,  247,  297,  249,  269,  255,  256,  261,
      250,  251,  294,  298,  296,  299,  259,  300,  258,  302,
      305,  281,  262,  303,  307,  309,  304,  291,  306,  308,
      290,  288,  277,  285,  282,  311,  278,  280,  293,  283,
      313,  314,  316,  289,  296,  315,  295,  292,  317,  318,
      294,  319,  322,  321,  297,  294,  299,  302,  303,  300,
      304,  294,  298,  306,  305,  323,  308,  324,  327,  326,

      325,  328,  309,  330,  331,  314,  307,  332,  317,  334,
      311,  319,  335,  313,  337,  339,  315,  321,  338,  340,
      341,  316,  342,  343,  346,  344,  348,  327,  318,  322,
      325,  347,  349,  350,  328,  353,  351,  354,  355,  334,
      324,  356,  357,  337,  330,  323,  326,  358,  359,  340,
      361,  363,  331,  366,  341,  360,  335,  362,  332,  344,
      342,  338,  367,  369,  339,  351,  370,  343,  371,  347,
      372,  373,  346,  374,  375,  354,  348,  353,  377,  379,
      350,  401,  355,  357,  382,  358,  349,  360,  363,  362,
      356,  359,  381,  399,  383,  384,  369,  361,  383,  384,

      386,  370,  387,  404,  386,  366,  387,  373,  388,  409,
      367,  371,  388,  379,  374,  389,  411,  382,  372,  389,
      412,  413,  381,  399,  375,  414,  415,  377,  416,  417,
      401,  418,  419,  421,  420,  381,  381,  423,  409,  424,
      426,  429,  427,  428,  432,  435,  436,  437,  430,  438,
      434,  413,  441,  448,  443,  439,  442,  404,  440,  411,
      446,  449,  445,  412,  444,  418,  419,  447,  421,  423,
      417,  415,  420,  450,  453,  416,  451,  428,  426,  414,
      427,  430,  434,  435,  454,  432,  424,  436,  439,  437,
      429,  442,  440,  455,  444,  441,  445,  456,  438,  443,

      458,  447,  460,  459,  449,  446,  451,  448,  462,  463,
      465,  466,  468,  469,  471,  474,  454,  470,  450,  473,
      475,  476,  480,  453,  477,  455,  481,  483,  484,  488,
      456,  486,  503,  492,  506,  487,  460,  492,  507,  508,
      509,  510,  465,  512,  513,  469,  466,  511,  518,  458,
      459,  462,  463,  470,  520,  516,  473,  483,  477,  476,
      519,  468,  474,  471,  503,  487,  484,  521,  475,  481,
      480,  508,  486,  487,  488,  523,  511,  512,  524,  506,
      486,  525,  509,  526,  527,  529,  510,  516,  507,  518,
      531,  533,  534,  513,  519,  535,  543,  538,  544,  541,

      542,  545,  547,  520,  552,  548,  549,  553,  521,  560,
      562,  563,  555,  523,  565,  566,  567,  568,  569,  529,
      526,  570,  534,  533,  531,  535,  524,  538,  527,  541,
      542,  571,  544,  572,  552,  525,  581,  582,  543,  548,
      549,  553,  555,  583,  562,  584,  563,  585,  565,  586,
      545,  587,  547,  560,  594,  593,  566,  567,  568,  591,
      592,  595,  602,  570,  599,  600,  603,  569,  604,  605,
      606,  607,  571,  611,  612,  608,  610,  583,  614,  613,
      617,  585,  572,  586,  582,  581,  584,  593,  594,  591,
      592,  616,  618,  620,  587,  622,  602,  624,  603,  625,

      604,  605,  626,  607,  627,  595,  635,  599,  600,  608,
      610,  606,  613,  637,  611,  640,  638,  642,  641,  643,
      614,  612,  647,  617,  645,  648,  620,  649,  650,  622,
      654,  665,  616,  625,  653,  618,  651,  660,  661,  655,
      635,  656,  627,  626,  624,  640,  659,  662,  668,  642,
      666,  667,  673,  674,  675,  676,  643,  677,  678,  681,
      684,  649,  690,  637,  638,  641,  682,  645,  650,  648,
      651,  647,  655,  686,  653,  656,  661,  660,  654,  665,
      659,  667,  687,  691,  692,  695,  674,  673,  696,  697,
      684,  677,  668,  701,  702,  678,  662,  676,  666,  675,

      712,  682,  704,  686,  703,  709,  710,  681,  711,  716,
      690,  713,  691,  714,  715,  720,  717,  722,  723,  696,
      724,  725,  727,  728,  729,  726,  730,  687,  702,  731,
      695,  701,  697,  732,  703,  733,  704,  738,  711,  692,
      737,  709,  710,  713,  715,  712,  717,  714,  742,  722,
      716,  741,  727,  728,  724,  725,  713,  726,  743,  730,
      744,  731,  746,  751,  753,  754,  723,  732,  720,  755,
      757,  729,  759,  760,  737,  761,  733,  762,  763,  765,
      742,  767,  738,  735,  721,  741,  719,  718,  708,  707,
      706,  705,  700,  751,  744,  698,  746,  694,  753,  754,

      693,  689,  757,  688,  755,  685,  683,  743,  759,  761,
      680,  760,  679,  672,  671,  670,  664,  663,  658,  657,
      652,  762,  646,  644,  639,  636,  765,  634,  633,  632,
      630,  763,  628,  623,  621,  767,  770,  619,  770,  770,
      770,  770,  770,  771,  771,  772,  772,  772,  772,  772,
      773,  773,  773,  773,  773,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  776,  615,  776,  776,
      776,  776,  776,  777,  777,  778,  778,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  779,  779,  780,
      780,  780,  780,  780,  780,  780,  781,  781,  781,  781,

      781,  781,  781,  609,  601,  598,  597,  596,  590,  589,
      588,  580,  579,  578,  577,  576,  574,  573,  564,  561,
      559,  558,  557,  556,  554,  551,  550,  546,  540,  539,
      537,  536,  532,  530,  528,  522,  517,  515,  514,  505,
      504,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      491,  490,  489,  485,  482,  479,  478,  472,  467,  464,
      461,  457,  452,  433,  431,  425,  422,  410,  408,  407,
      406,  405,  403,  402,  400,  398,  397,  396,  395,  394,
      393,  392,  391,  380,  378,  376,  368,  365,  364,  352,
      345,  336,  333,  329,  320,  312,  310,  301,  287,  286,

      284,  279,  276,  275,  274,  273,  272,  271,  270,  268,
      266,  263,  260,  253,  252,  245,  231,  211,  210,  208,
      204,  195,  194,  193,  156,  153,  152,  151,  149,  148,
      147,  108,   96,   93,   54,   51,   44,   18,   15,   14,
        3,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[166] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "thriftl.ll"

#include <string>
#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1371 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 81 "thriftl.ll"


#line 1556 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 770 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1642 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 83 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 85 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 257 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 266 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 276 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 281 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 332 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 345 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2570 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 770 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 770 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 769);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 345 "thriftl.ll"



/* vim: filetype=lex
*/

