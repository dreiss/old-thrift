
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1304] =
    {   0,
        1,  120,    1,  120,  126,  125,    1,  125,  123,  125,
        5,  125,    6,  125,  120,  125,  120,  122,  125,  125,
      125,  118,  120,  125,  118,  120,  125,  121,  122,  125,
      121,  122,  125,  121,  125,  121,  122,  125,  121,  122,
      125,  121,  122,  125,  121,  122,  125,  121,  122,  125,
      121,  122,  125,  121,  122,  125,  121,  122,  125,  121,
      122,  125,  121,  122,  125,  121,  122,  125,  121,  122,
      125,  121,  122,  125,  121,  122,  125,  121,  122,  125,
      121,  122,  125,  121,  122,  125,  121,  122,  125,  121,
      122,  125,  121,  122,  125,  121,  122,  125,  121,  122,

      125,    1,    5,  118,  120,  122,  122,  118,  120,  122,
      122,  120,    4,  121,  122,  122,  120,  121,  122,  121,
      121,  122,  121,  122,  121,  122,   56,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,   67,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,   81,  121,
      122,  121,  122,   84,  121,  122,   88,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,

      122,  121,  122,  121,  122,  121,  122,   93,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  120,  120,  122,  120,  122,    4,
      119,  121,  122,   54,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,

      121,  122,  121,  122,   63,  121,  122,   65,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
       76,  121,  122,  121,  122,  121,  122,  121,  122,   29,
      121,  122,   30,  121,  122,   31,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,   37,  121,  122,  121,  122,  121,
      122,   91,  121,  122,   92,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,

      122,  121,  122,  121,  122,  121,  122,  121,  122,   39,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  110,  121,  122,  121,  122,  121,
      122,  121,  122,  112,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
        2,  121,  122,   55,  121,  122,  121,  122,  121,  122,
      121,  122,   27,  121,  122,  121,  122,   28,  121,  122,
       59,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,

      122,  121,  122,   68,  121,  122,   69,  121,  122,   48,
      121,  122,  121,  122,   72,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,   80,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
       38,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,   94,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,

      121,  122,  121,  122,  121,  122,  121,  122,  106,  121,
      122,  121,  122,  121,  122,  109,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,   26,  121,  122,  121,
      122,  121,  122,  116,  121,  122,  121,  122,  121,  122,
        3,    2,  124,  121,  122,  121,  122,   52,  121,  122,
      121,  122,   58,  121,  122,   60,  121,  122,  121,  122,
       49,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,   73,  121,  122,
      121,  122,   75,  121,  122,  121,  122,  121,  122,  121,

      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,   96,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
       99,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,   36,  121,  122,  121,  122,  121,  122,   35,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  107,  121,  122,  121,  122,  121,  122,
       43,  121,  122,  121,  122,  121,  122,  121,  122,  115,
      121,  122,  121,  122,  121,  122,  121,  122,  117,  121,

      122,    3,  124,    2,  124,  121,  122,   57,  121,  122,
       34,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,   66,
      121,  122,   32,  121,  122,   70,  121,  122,   71,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,   79,
      121,  122,  121,  122,   83,  121,  122,  121,  122,   85,
      121,  122,  121,  122,  121,  122,  121,  122,   89,  121,
      122,  121,  122,   90,  121,  122,   40,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,   95,
      121,  122,  121,  122,  121,  122,  121,  122,  101,  121,

      122,  121,  122,  121,  122,  102,  121,  122,  121,  122,
      103,  121,  122,   33,  121,  122,   42,  121,  122,  104,
      121,  122,  121,  122,   46,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  124,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,   62,  121,  122,   64,  121,  122,  121,  122,
       45,  121,  122,   74,  121,  122,   77,  121,  122,  121,
      122,  121,  122,   25,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,

       97,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,   47,  121,  122,  121,  122,  121,  122,
      121,  122,   41,  121,  122,  121,  122,  113,  121,  122,
      121,  122,   20,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,   53,  121,  122,  121,  122,   61,  121,
      122,  121,  122,  121,  122,   10,  121,  122,  121,  122,
      121,  122,   78,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,   51,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  100,  121,  122,   50,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,

      111,  121,  122,  114,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,   44,  121,  122,  121,  122,  121,  122,   87,
      121,  122,  121,  122,    7,  121,  122,  121,  122,  121,
      122,   98,  121,  122,   15,  121,  122,  121,  122,  121,
      122,  121,  122,  108,  121,  122,   24,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,   82,  121,  122,   86,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  121,  122,    9,

      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
      121,  122,  121,  122,  121,  122,   12,  121,  122,  121,
      122,  121,  122,   11,  121,  122,   16,  121,  122,  121,
      122,  121,  122,  121,  122,  121,  122,  105,  121,  122,
      121,  122,   22,  121,  122,   21,  121,  122,    8,  121,
      122,  121,  122,   14,  121,  122,  121,  122,  121,  122,
      121,  122,   23,  121,  122,  121,  122,   17,  121,  122,
      121,  122,  121,  122,  121,  122,  121,  122,  121,  122,
       13,  121,  122,  121,  122,   19,  121,  122,  121,  122,

       18,  121,  122
    } ;

static yyconst flex_int16_t yy_accept[616] =
    {   0,
        1,    3,    5,    6,    7,    9,   11,   13,   15,   17,
       20,   21,   22,   25,   28,   31,   34,   36,   39,   42,
       45,   48,   51,   54,   57,   60,   63,   66,   69,   72,
       75,   78,   81,   84,   87,   90,   93,   96,   99,  102,
      103,  104,  104,  106,  106,  107,  108,  111,  112,  113,
      113,  114,  114,  116,  116,  117,  120,  121,  123,  125,
      127,  130,  132,  134,  136,  138,  140,  142,  144,  146,
      148,  150,  153,  155,  157,  159,  161,  163,  165,  167,
      169,  171,  173,  175,  177,  179,  182,  184,  187,  190,
      192,  194,  196,  198,  200,  202,  204,  206,  208,  211,

      213,  215,  217,  219,  221,  223,  225,  227,  229,  231,
      233,  235,  237,  239,  241,  243,  245,  247,  249,  251,
      253,  255,  257,  259,  261,  263,  265,  266,  268,  270,
      270,  270,  271,  272,  274,  277,  279,  281,  283,  285,
      287,  289,  291,  293,  295,  297,  299,  301,  303,  305,
      308,  311,  313,  315,  317,  319,  321,  323,  325,  327,
      329,  331,  334,  336,  338,  340,  343,  346,  349,  351,
      353,  355,  357,  359,  361,  363,  365,  368,  370,  372,
      375,  378,  380,  382,  384,  386,  388,  390,  392,  394,
      396,  398,  400,  402,  404,  406,  408,  410,  413,  415,

      417,  419,  421,  423,  425,  427,  429,  431,  433,  435,
      438,  440,  442,  444,  447,  449,  451,  453,  455,  457,
      459,  461,  461,  461,  461,  461,  461,  462,  464,  467,
      469,  471,  473,  476,  478,  481,  484,  486,  488,  490,
      492,  494,  496,  498,  500,  502,  504,  507,  510,  513,
      515,  518,  520,  522,  524,  526,  528,  530,  532,  535,
      537,  539,  541,  543,  545,  547,  549,  551,  554,  556,
      558,  560,  562,  565,  567,  569,  571,  573,  575,  577,
      579,  581,  583,  585,  587,  589,  591,  593,  595,  597,
      599,  601,  603,  605,  607,  609,  612,  614,  616,  619,

      621,  623,  625,  627,  630,  632,  634,  637,  639,  641,
      641,  641,  642,  642,  642,  642,  642,  644,  646,  648,
      651,  653,  656,  659,  661,  664,  666,  668,  670,  672,
      674,  676,  678,  680,  682,  684,  686,  688,  691,  693,
      696,  698,  700,  702,  704,  706,  708,  710,  712,  714,
      716,  718,  720,  722,  724,  726,  728,  730,  733,  735,
      737,  739,  741,  744,  746,  748,  750,  752,  755,  757,
      759,  762,  764,  766,  768,  770,  772,  774,  777,  779,
      781,  784,  786,  788,  790,  793,  795,  797,  799,  802,
      802,  803,  803,  804,  804,  806,  808,  811,  814,  816,

      818,  820,  822,  824,  826,  828,  830,  833,  836,  839,
      842,  844,  846,  848,  850,  853,  855,  858,  860,  863,
      865,  867,  869,  872,  874,  877,  880,  882,  884,  886,
      888,  890,  893,  895,  897,  899,  902,  904,  906,  909,
      911,  914,  917,  920,  923,  925,  928,  930,  932,  934,
      936,  938,  940,  942,  944,  946,  948,  949,  951,  953,
      955,  957,  959,  961,  963,  966,  969,  971,  974,  977,
      980,  982,  984,  987,  989,  991,  993,  995,  997,  999,
     1001, 1004, 1006, 1008, 1010, 1012, 1014, 1017, 1019, 1021,
     1023, 1026, 1028, 1031, 1033, 1036, 1038, 1040, 1042, 1044,

     1047, 1049, 1052, 1054, 1056, 1059, 1061, 1063, 1066, 1068,
     1070, 1072, 1074, 1076, 1079, 1081, 1083, 1085, 1087, 1090,
     1093, 1095, 1097, 1099, 1101, 1104, 1107, 1109, 1111, 1113,
     1115, 1117, 1119, 1121, 1123, 1126, 1128, 1130, 1133, 1135,
     1138, 1140, 1142, 1145, 1148, 1150, 1152, 1154, 1157, 1160,
     1162, 1164, 1166, 1168, 1170, 1172, 1174, 1177, 1180, 1182,
     1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1203,
     1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223,
     1225, 1227, 1230, 1232, 1234, 1237, 1240, 1242, 1244, 1246,
     1248, 1251, 1253, 1256, 1259, 1262, 1264, 1267, 1269, 1271,

     1273, 1276, 1278, 1281, 1283, 1285, 1287, 1289, 1291, 1294,
     1296, 1299, 1301, 1304, 1304
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   19,   19,   19,   20,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
        6,    1,    6,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    4,    5,
        1,    6,    6,    6,    6,    6,    6,    6,    7,    8,
        9,    9,    7,    7,    7,    7,    8,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[629] =
    {   0,
        0,    0, 1356, 1357,   47, 1357,    0, 1357,   41,   59,
       40,   52,   60, 1309, 1345,   99,    0,   57,   87,  110,
       51,   48,  112,   55,  147,   76,  100,   81,  113,   92,
      144,  136,  183,  155,   74,  149,  111,   96,   94,  136,
        0,  191, 1307,  160,    0,  219,  228,  248,   75, 1345,
        0,    0, 1342,  255,  168,  181,    0,  120,  172,  164,
      206,  161,  117,  169,   58,  185,  143,  191,   53,  190,
      249,  241,  245,  242,  266,  215,  203,  192,  212,  269,
      250,  270,  204,  280,  272, 1341,  271,  273, 1340,  281,
      283,  286,  288,  287,  290,  291,  292,  294, 1339,  293,

      297,  301,  307,  304,  295,  311,  312,  321,  322,  302,
      315,  334,  338,  339,  323,  340,  343,  331,  344,  347,
      351,  358,  346,  354,  356,  367,  385,  394,  364,  212,
      372,    0,    0,  372, 1338,  375,  386,  379,  396,  359,
      408,  409,  411,  412,  413,  414,  415,  416,  417,  418,
      419,  420,  421,  425,  423,  433,  434,  436,  424,  431,
      438,  439,  448,  453,  455, 1337, 1336, 1335,  459,  460,
      458,  461,  463,  462,  467,  465, 1334,  470,  469, 1333,
     1332,  466,  471,  472,  474,  473,  478,  475,  489,  477,
      479,  490,  492,  495,  496,  497,  500, 1331,  501,  506,

      507,  509,  515,  510,  517,  516,  518,  520,  521, 1330,
      522,  523,  528, 1329,  524,  527,  541,  536,  545,  552,
      553, 1330,  556,  558, 1329,  561, 1324,  562, 1325,  564,
      567,  568, 1324,  570, 1323, 1322,  569,  571,  572,  574,
      575,  573,  576,  577,  579,  581, 1321,  587, 1320,  584,
     1319,  580,  582,  589,  586,  603,  588,  610, 1318,  598,
      591,  592,  615,  618,  620,  623,  627, 1317,  625,  628,
      629,  630, 1316,  633,  634,  631,  635,  637,  638,  639,
      641,  640,  647,  645,  652,  648,  653,  650,  654,  656,
      662,  666,  670,  673,  671, 1315,  668,  677, 1314,  679,

      680,  682,  683, 1313,  685,  688, 1312,  694,  695,  699,
      701, 1357,  712,  713,  718,  721, 1357,  691,  698, 1311,
      690, 1310, 1309,  700, 1308,  724,  725,  726,  727,  729,
      730,  732,  735,  736,  737,  733,  738, 1307,  734, 1306,
      744,  741,  739,  742,  743,  745,  749,  746,  750,  748,
      770,  771,  772,  747,  774,  775,  778, 1305,  779,  780,
      781,  782, 1304,  783,  786,  787,  788, 1303,  789,  791,
     1302,  793,  795,  798,  794,  802,  803,  806,  807,  813,
     1301,  808,  819,  820, 1300,  821,  822,  824, 1299, 1296,
     1295,  830, 1357, 1294, 1293,  809, 1294, 1293,  830,  837,

      839,  840,  841,  843,  845,  847, 1292, 1291, 1290,  850,
      849,  848,  852,  851, 1289,  857, 1288,  858, 1287,  861,
      860,  864, 1286,  868, 1285, 1284,  869,  884,  862,  867,
      887, 1283,  865,  889,  890, 1282,  891,  892, 1281,  895,
     1280, 1279, 1278, 1277,  893, 1276,  894,  896,  900,  897,
      901,  902,  903,  904,  906,  911, 1273,  913,  914,  916,
      917,  919,  923,  924, 1274, 1273,  925, 1226, 1214, 1211,
      928,  929, 1190,  932,  933,  938,  943,  935,  947,  939,
     1180,  940,  948,  952,  961,  962, 1177,  964,  965,  966,
     1176,  967, 1174,  968, 1173,  969,  972,  970,  974, 1172,

      976, 1171,  971,  975, 1169,  977,  979, 1168,  980,  981,
      985,  987,  997, 1167,  998,  982,  999, 1001, 1166, 1165,
     1002, 1004, 1008, 1010, 1164, 1163, 1012, 1017, 1018, 1023,
     1021, 1024, 1025, 1026, 1162, 1027, 1029, 1160, 1031, 1159,
     1033, 1034, 1158, 1157, 1035, 1037, 1036, 1156, 1155, 1039,
     1038, 1042, 1055, 1046, 1056, 1058, 1154, 1153, 1060, 1061,
     1057, 1062, 1066, 1065, 1072, 1073, 1074, 1078, 1152, 1084,
     1079, 1085, 1087, 1090, 1093, 1094, 1089, 1092, 1096, 1099,
     1097, 1151, 1101, 1102, 1150, 1147, 1110, 1113, 1104, 1114,
     1146, 1116, 1144,  530,  525, 1121,  426, 1118, 1123, 1124,

      365, 1126,  314, 1125, 1127, 1130, 1133, 1138,  202, 1139,
      148, 1140,   56, 1357, 1187, 1192, 1197, 1203, 1208, 1215,
     1216, 1224, 1233, 1237, 1245, 1254, 1263, 1272
    } ;

static yyconst flex_int16_t yy_def[629] =
    {   0,
      614,    1,  614,  614,  614,  614,  615,  614,  616,  617,
      614,  614,  616,   13,  618,  618,  619,  618,  618,  618,
      618,   16,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  614,
      615,  614,   13,  620,  617,  617,  617,  617,  621,  622,
      623,  624,  618,  614,   48,   16,  619,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  614,   47,   48,  625,
      626,  623,  624,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  625,  627,  625,  626,  628,  614,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  625,
      625,  614,  625,  628,  626,  626,  614,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  614,
      614,  626,  614,  614,  614,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  614,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,    0,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614
    } ;

static yyconst flex_int16_t yy_nxt[1406] =
    {   0,
        4,    5,    5,    6,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   15,   16,
       15,   17,   18,   19,   20,   21,   22,   23,   24,   15,
       25,   26,   15,   27,   28,   29,   30,   31,   15,   32,
       33,   34,   35,   36,   37,   38,   39,   15,   40,   40,
       42,   49,   49,   49,   49,   49,   49,   49,   50,   45,
       44,   45,   51,   45,   45,   45,   45,   44,   46,   42,
       47,   47,   47,   47,   47,   47,   47,   71,   48,   44,
       58,   73,   45,   74,   45,   48,   44,   72,   81,   45,
      147,   82,   59,   75,   44,   45,   60,   61,   90,  142,

       45,   44,   45,   93,   45,   52,   54,   55,   45,  119,
       56,   56,   56,   56,   56,   56,   56,   62,   45,   45,
       45,   45,   91,   63,  126,   45,   64,   97,   45,   98,
       92,   99,   66,   65,   76,   94,  125,   40,   40,   95,
      123,  124,   77,   67,   45,   78,   68,   69,   79,   96,
       70,   45,   45,  140,   80,   45,   45,   45,  106,   83,
      134,   84,  107,   45,   85,  144,  100,   54,   54,   45,
      101,  120,   45,  102,   86,  614,   45,   45,  108,  121,
       45,   87,   88,  103,  116,  122,  104,   89,  614,   45,
      105,   45,  136,   45,  117,  141,  139,  135,   45,   45,

       45,  118,   49,   49,   49,   49,   49,   49,   49,  109,
       45,   45,   45,  110,   45,  145,  111,  112,  223,  148,
       45,  166,  224,   45,  113,  143,  146,  114,  161,  115,
      128,  128,  128,  128,  128,  128,  128,   46,  160,   47,
       47,   47,   47,   47,   47,   47,  137,   48,  159,   45,
       45,  162,  138,   45,   48,   54,   55,   45,   45,  129,
      129,  129,  129,  129,  129,  129,  127,  127,  127,  127,
      127,  127,  127,  149,   45,  153,  150,   45,   45,   45,
       45,   45,  151,  152,  155,  154,  164,  168,   45,   45,
      156,   45,  157,  167,   45,   45,   45,  170,   45,   45,

       45,   45,   45,   45,  163,   45,  171,  158,  169,   45,
       45,  165,   45,  172,  173,   45,  190,  175,  182,   45,
       45,  178,   45,   45,  174,  177,  176,  189,  179,   45,
       45,   45,  181,  184,  180,  183,  185,  187,  186,   45,
      192,  191,   45,  188,  195,  200,   45,   45,   45,  199,
      193,   45,   45,  194,   45,   45,  201,  196,  205,   45,
      202,  197,   45,  198,   45,  208,   45,   45,  211,  204,
      206,  614,   45,   45,  212,   45,  218,  203,  226,  207,
       45,  220,  227,   45,  213,  209,  214,   45,  216,  210,
      215,  217,  233,  221,   45,  219,  127,  127,  127,  127,

      127,  127,  127,   45,   45,  128,  128,  128,  128,  128,
      128,  128,  230,  228,  231,  229,   45,   45,  232,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
      234,   45,   45,   45,   45,  235,  241,  236,  242,   45,
      244,   45,   45,  246,   45,  245,   45,   45,  247,  238,
      243,  248,  237,  254,  239,  240,   45,  249,  251,  250,
      255,   45,  252,   45,  253,  256,   45,   45,   45,   45,
       45,   45,  257,   45,   45,   45,  258,   45,   45,   45,
       45,   45,   45,   45,  266,   45,   45,   45,  263,  265,
      267,  259,  260,  262,  275,  261,  269,   45,   45,  270,

       45,  272,  264,   45,   45,   45,  268,  274,   45,   45,
      271,  280,  273,  276,   45,   45,  278,   45,   45,  281,
      282,  277,  279,   45,   45,   45,   45,  288,   45,   45,
       45,   45,   45,   45,  283,   45,   45,  284,   45,  286,
      290,  295,  285,  287,   45,  292,  289,  299,  300,   45,
      291,  294,  304,   45,  297,  298,  296,  293,  302,  301,
       45,   45,  311,  305,  223,  303,  312,  316,  313,  306,
       45,  317,   45,  308,  307,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  309,   45,   45,   45,
       45,  320,   45,  324,   45,   45,   45,   45,  331,   45,

       45,  318,  322,  319,  326,  327,   45,  321,  338,  323,
      328,   45,  330,  325,  334,  337,  329,  335,   45,  332,
      333,  336,  339,   45,  344,  341,   45,  340,   45,  342,
      345,   45,  343,   45,  346,   45,   45,   45,   45,   45,
      348,   45,   45,   45,  350,   45,   45,   45,   45,   45,
      347,  354,  351,   45,  356,   45,   45,  359,   45,  349,
       45,   45,   45,  360,   45,  352,  355,  363,  361,  357,
       45,  353,  358,  367,   45,  362,   45,  365,   45,   45,
      364,   45,  368,  369,  366,   45,  370,   45,   45,  372,
       45,   45,  373,   45,  375,  371,   45,  376,   45,   45,

      377,  374,   45,   45,  380,  223,   45,  223,   45,  390,
      382,  391,  378,  396,  385,  381,  386,  379,  223,  392,
      389,  399,  313,  393,  314,  383,  384,  226,  394,  387,
      388,  395,   45,   45,   45,   45,  398,   45,   45,  397,
       45,   45,   45,   45,   45,   45,   45,   45,  402,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  400,
      401,  407,  408,  411,  409,  406,  404,  412,  413,  405,
      418,  414,  415,  403,  410,  419,  416,  421,   45,   45,
       45,  420,   45,   45,  417,  422,   45,   45,   45,   45,
       45,   45,  423,  426,   45,   45,   45,   45,  425,   45,

      429,   45,   45,   45,  431,  432,   45,  433,  424,  427,
       45,   45,  428,  438,   45,   45,   45,   45,  439,  441,
      430,   45,  436,  437,  434,  435,  442,   45,   45,   45,
       45,  444,   45,  458,  440,  443,  314,  447,   45,  448,
      457,  450,  445,  449,  454,   45,  446,   45,   45,   45,
      451,   45,  455,   45,  452,   45,   45,   45,   45,   45,
       45,  456,  453,  461,  464,   45,   45,  459,   45,   45,
       45,  465,   45,   45,  462,   45,   45,   45,  463,  460,
      467,  470,  475,  472,  473,  474,  476,  471,  466,  468,
      477,  478,   45,  481,  469,   45,  480,   45,   45,   45,

       45,   45,   45,   45,   45,   45,  479,  483,   45,   45,
       45,   45,   45,  486,   45,  484,  485,  488,  487,   45,
      490,   45,   45,  491,   45,   45,  492,   45,  482,  489,
      493,   45,   45,   45,  494,  495,   45,   45,  497,  498,
       45,   45,  502,   45,  496,  504,   45,   45,   45,  505,
      503,   45,  499,  501,  500,   45,   45,  511,  510,  506,
       45,  507,  512,  508,  509,  516,  517,  513,  514,   45,
       45,  515,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  518,   45,   45,   45,   45,  520,   45,   45,   45,
       45,  519,  525,   45,  526,   45,  521,  522,  528,  534,

      523,  524,  531,  529,  530,   45,   45,   45,  527,   45,
       45,  538,   45,  532,  535,  533,   45,  537,   45,  539,
       45,  536,  542,  540,  543,   45,   45,  544,  545,   45,
      541,   45,   45,   45,   45,   45,  546,   45,  547,   45,
      551,   45,   45,   45,   45,   45,   45,   45,  553,  554,
       45,  548,  549,  559,   45,  560,  558,  550,  563,  552,
      556,  566,  555,   45,   45,   45,   45,  557,   45,   45,
       45,  561,  569,   45,   45,  562,  565,  567,  570,  574,
       45,   45,   45,  564,  571,  568,   45,   45,  572,  573,
      576,  578,   45,   45,  579,   45,  581,   45,   45,  575,

       45,   45,   45,  577,   45,   45,  580,   45,  583,   45,
       45,  585,   45,  586,  587,  588,  589,  591,   45,  584,
      592,   45,   45,  582,   45,  593,   45,  595,  590,   45,
      594,   45,   45,   45,   45,   45,  597,  598,   45,  596,
      600,   45,  601,  602,  603,  599,   45,   45,   45,  604,
      606,  605,   45,  607,   45,   45,  609,  608,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  610,
       45,   45,   45,   45,   45,   45,   45,   45,  612,   45,
       45,   45,   45,  611,   45,   45,  613,   41,   45,   41,
       41,   41,   41,   41,   41,   41,   43,   43,   45,   43,

       45,   45,   45,   45,   45,   45,   53,   53,   53,   53,
       53,   53,   57,   57,   57,   57,   57,  127,  127,   45,
      127,   49,   45,   49,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  132,   45,  132,  132,  132,  132,  132,
      132,  132,  133,  133,  133,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  315,  315,  315,  315,  315,  315,  315,  315,
      315,   45,   45,  315,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,  315,  315,  310,  310,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  315,  314,  223,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  131,  614,   45,  614,  614,    3,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614
    } ;

static yyconst flex_int16_t yy_chk[1406] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        9,   11,   11,   11,   11,   11,   11,   11,   12,   21,
        9,   69,   12,   24,  613,   18,   65,    9,   10,   13,
       10,   10,   10,   10,   10,   10,   10,   21,   10,   13,
       18,   22,   35,   22,   26,   10,   13,   21,   24,   28,
       69,   24,   18,   22,   49,   19,   18,   18,   26,   65,

       30,   49,   39,   28,   38,   13,   16,   16,   27,   35,
       16,   16,   16,   16,   16,   16,   16,   19,   20,   37,
       23,   29,   27,   19,   39,   63,   19,   30,   58,   30,
       27,   30,   20,   19,   23,   29,   38,   40,   40,   29,
       37,   37,   23,   20,   32,   23,   20,   20,   23,   29,
       20,   67,   31,   63,   23,   25,  611,   36,   32,   25,
       58,   25,   32,   34,   25,   67,   31,   44,   44,   62,
       31,   36,   60,   31,   25,   55,   55,   64,   32,   36,
       59,   25,   25,   31,   34,   36,   31,   25,   56,   56,
       31,   33,   60,   66,   34,   64,   62,   59,   70,   68,

       78,   34,   42,   42,   42,   42,   42,   42,   42,   33,
      609,   77,   83,   33,   61,   68,   33,   33,  130,   70,
       79,   83,  130,   76,   33,   66,   68,   33,   78,   33,
       46,   46,   46,   46,   46,   46,   46,   47,   77,   47,
       47,   47,   47,   47,   47,   47,   61,   47,   76,   72,
       74,   79,   61,   73,   47,   48,   48,   71,   81,   48,
       48,   48,   48,   48,   48,   48,   54,   54,   54,   54,
       54,   54,   54,   71,   75,   73,   71,   80,   82,   87,
       85,   88,   71,   72,   74,   73,   81,   85,   84,   90,
       75,   91,   75,   84,   92,   94,   93,   88,   95,   96,

       97,  100,   98,  105,   80,  101,   88,   75,   87,  102,
      110,   82,  104,   88,   88,  103,  105,   91,   97,  106,
      107,   94,  603,  111,   90,   93,   92,  104,   94,  108,
      109,  115,   96,  100,   95,   98,  101,  103,  102,  118,
      107,  106,  112,  103,  108,  111,  113,  114,  116,  110,
      107,  117,  119,  107,  123,  120,  112,  109,  115,  121,
      113,  109,  124,  109,  125,  117,  122,  140,  118,  114,
      116,  129,  129,  601,  119,  126,  123,  113,  131,  116,
      134,  125,  131,  136,  119,  117,  120,  138,  122,  117,
      121,  122,  140,  126,  137,  124,  127,  127,  127,  127,

      127,  127,  127,  128,  139,  128,  128,  128,  128,  128,
      128,  128,  137,  134,  138,  136,  141,  142,  139,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      141,  155,  159,  154,  597,  142,  147,  143,  148,  160,
      150,  156,  157,  152,  158,  151,  161,  162,  153,  145,
      149,  154,  144,  160,  146,  146,  163,  155,  157,  156,
      161,  164,  158,  165,  159,  162,  171,  169,  170,  172,
      174,  173,  163,  176,  182,  175,  164,  179,  178,  183,
      184,  186,  185,  188,  174,  190,  187,  191,  171,  173,
      175,  165,  169,  170,  186,  169,  178,  189,  192,  179,

      193,  183,  172,  194,  195,  196,  176,  185,  197,  199,
      182,  190,  184,  187,  200,  201,  188,  202,  204,  191,
      192,  187,  189,  203,  206,  205,  207,  199,  208,  209,
      211,  212,  215,  595,  193,  216,  213,  194,  594,  196,
      201,  205,  195,  197,  218,  203,  200,  209,  211,  217,
      202,  204,  216,  219,  207,  208,  206,  203,  213,  212,
      220,  221,  223,  217,  224,  215,  223,  226,  224,  218,
      228,  226,  230,  220,  219,  231,  232,  237,  234,  238,
      239,  242,  240,  241,  243,  244,  221,  245,  252,  246,
      253,  231,  250,  238,  255,  248,  257,  254,  243,  261,

      262,  228,  234,  230,  240,  241,  260,  232,  253,  237,
      241,  256,  242,  239,  246,  252,  241,  248,  258,  244,
      245,  250,  254,  263,  260,  256,  264,  255,  265,  257,
      261,  266,  258,  269,  262,  267,  270,  271,  272,  276,
      264,  274,  275,  277,  266,  278,  279,  280,  282,  281,
      263,  271,  267,  284,  274,  283,  286,  277,  288,  265,
      285,  287,  289,  278,  290,  269,  272,  281,  279,  275,
      291,  270,  276,  285,  292,  280,  297,  283,  293,  295,
      282,  294,  286,  287,  284,  298,  288,  300,  301,  290,
      302,  303,  291,  305,  293,  289,  306,  294,  321,  318,

      295,  292,  308,  309,  300,  310,  319,  311,  324,  310,
      302,  311,  297,  318,  306,  301,  308,  298,  313,  314,
      309,  324,  313,  314,  315,  303,  305,  316,  315,  308,
      308,  316,  326,  327,  328,  329,  321,  330,  331,  319,
      332,  336,  339,  333,  334,  335,  337,  343,  328,  342,
      344,  345,  341,  346,  348,  354,  350,  347,  349,  326,
      327,  333,  334,  337,  335,  332,  330,  339,  341,  331,
      346,  342,  343,  329,  336,  347,  344,  349,  351,  352,
      353,  348,  355,  356,  345,  350,  357,  359,  360,  361,
      362,  364,  351,  354,  365,  366,  367,  369,  353,  370,

      357,  372,  375,  373,  360,  361,  374,  362,  352,  355,
      376,  377,  356,  369,  378,  379,  382,  396,  370,  373,
      359,  380,  366,  367,  364,  365,  374,  383,  384,  386,
      387,  376,  388,  396,  372,  375,  392,  379,  399,  380,
      392,  383,  377,  382,  387,  400,  378,  401,  402,  403,
      384,  404,  387,  405,  386,  406,  412,  411,  410,  414,
      413,  388,  386,  401,  404,  416,  418,  399,  421,  420,
      429,  405,  422,  433,  402,  430,  424,  427,  403,  400,
      410,  413,  421,  416,  418,  420,  422,  414,  406,  411,
      424,  427,  428,  430,  412,  431,  429,  434,  435,  437,

      438,  445,  447,  440,  448,  450,  428,  433,  449,  451,
      452,  453,  454,  437,  455,  434,  435,  440,  438,  456,
      447,  458,  459,  448,  460,  461,  449,  462,  431,  445,
      450,  463,  464,  467,  451,  452,  471,  472,  454,  455,
      474,  475,  460,  478,  453,  462,  476,  480,  482,  463,
      461,  477,  456,  459,  458,  479,  483,  475,  474,  464,
      484,  467,  476,  471,  472,  480,  482,  477,  478,  485,
      486,  479,  488,  489,  490,  492,  494,  496,  498,  503,
      497,  483,  499,  504,  501,  506,  485,  507,  509,  510,
      516,  484,  492,  511,  494,  512,  486,  488,  497,  506,

      489,  490,  501,  498,  499,  513,  515,  517,  496,  518,
      521,  511,  522,  503,  507,  504,  523,  510,  524,  512,
      527,  509,  516,  513,  517,  528,  529,  518,  521,  531,
      515,  530,  532,  533,  534,  536,  522,  537,  523,  539,
      529,  541,  542,  545,  547,  546,  551,  550,  531,  532,
      552,  524,  527,  539,  554,  541,  537,  528,  546,  530,
      534,  551,  533,  553,  555,  561,  556,  536,  559,  560,
      562,  542,  554,  564,  563,  545,  550,  552,  555,  561,
      565,  566,  567,  547,  556,  553,  568,  571,  559,  560,
      563,  564,  570,  572,  565,  573,  567,  577,  574,  562,

      578,  575,  576,  563,  579,  581,  566,  580,  570,  583,
      584,  572,  589,  573,  574,  575,  576,  578,  587,  571,
      579,  588,  590,  568,  592,  580,  598,  583,  577,  596,
      581,  599,  600,  604,  602,  605,  587,  588,  606,  584,
      590,  607,  592,  596,  598,  589,  608,  610,  612,  599,
      602,  600,  593,  604,  591,  586,  606,  605,  585,  582,
      569,  558,  557,  549,  548,  544,  543,  540,  538,  607,
      535,  526,  525,  520,  519,  514,  508,  505,  610,  502,
      500,  495,  493,  608,  491,  487,  612,  615,  481,  615,
      615,  615,  615,  615,  615,  615,  616,  616,  473,  616,

      617,  617,  617,  617,  617,  617,  618,  618,  618,  618,
      618,  618,  619,  619,  619,  619,  619,  620,  620,  470,
      620,  621,  469,  621,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  623,  468,  623,  623,  623,  623,  623,
      623,  623,  624,  624,  624,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  466,  465,  457,  446,  444,  443,  442,  441,  439,
      436,  432,  426,  425,  423,  419,  417,  415,  409,  408,

      407,  398,  397,  395,  394,  391,  390,  389,  385,  381,
      371,  368,  363,  358,  340,  338,  325,  323,  322,  320,
      307,  304,  299,  296,  273,  268,  259,  251,  249,  247,
      236,  235,  233,  229,  227,  225,  222,  214,  210,  198,
      181,  180,  177,  168,  167,  166,  135,   99,   89,   86,
       53,   50,   43,   15,   14,    3,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[126] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "thriftl.ll"

#include <string>
#include <errno.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1212 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 76 "thriftl.ll"


#line 1397 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 615 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1357 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 78 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 80 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 91 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 94 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 95 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 287 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 300 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2211 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 615 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 615 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 614);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 300 "thriftl.ll"



/* vim: filetype=lex
*/

