/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "OptionalRequiredTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test {

const char* OldSchool::ascii_fingerprint = "24510143CA4642328D8FDA8C850A3C36";
const uint8_t OldSchool::binary_fingerprint[16] = {0x24,0x51,0x01,0x43,0xCA,0x46,0x42,0x32,0x8D,0x8F,0xDA,0x8C,0x85,0x0A,0x3C,0x36};

// i16
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  ::apache::thrift::protocol::T_I16);

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

// map<i32,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_6870A6B6F5D23566138BB497788EDCB9(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// list<map<i32,string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_E25A1560BCF4BF2587943D2F86734458(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_OptionalRequiredTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36[] = {
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_OptionalRequiredTest_E25A1560BCF4BF2587943D2F86734458,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i16;2:string;3:list<map<i32,string>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36(
  ::apache::thrift::protocol::T_STRUCT,
  OldSchool::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36,
  trlo_specs_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36);

::apache::thrift::reflection::local::TypeSpec* OldSchool::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_24510143CA4642328D8FDA8C850A3C36;

uint32_t OldSchool::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_int);
          this->__isset.im_int = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->im_str);
          this->__isset.im_str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->im_big.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->im_big.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->im_big[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _ktype6;
                ::apache::thrift::protocol::TType _vtype7;
                iprot->readMapBegin(_ktype6, _vtype7, _size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  int32_t _key10;
                  xfer += iprot->readI32(_key10);
                  std::string& _val11 = this->im_big[_i4][_key10];
                  xfer += iprot->readString(_val11);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readListEnd();
          }
          this->__isset.im_big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OldSchool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OldSchool");
  xfer += oprot->writeFieldBegin("im_int", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->im_int);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_str", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->im_str);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_big", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, this->im_big.size());
    std::vector<std::map<int32_t, std::string> > ::const_iterator _iter12;
    for (_iter12 = this->im_big.begin(); _iter12 != this->im_big.end(); ++_iter12)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, (*_iter12).size());
        std::map<int32_t, std::string> ::const_iterator _iter13;
        for (_iter13 = (*_iter12).begin(); _iter13 != (*_iter12).end(); ++_iter13)
        {
          xfer += oprot->writeI32(_iter13->first);
          xfer += oprot->writeString(_iter13->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Simple::ascii_fingerprint = "BE81C8950133989CA99AAE12969A558C";
const uint8_t Simple::binary_fingerprint[16] = {0xBE,0x81,0xC8,0x95,0x01,0x33,0x98,0x9C,0xA9,0x9A,0xAE,0x12,0x96,0x9A,0x55,0x8C};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C[] = {
  { 1, false },
  { 2, false },
  { 3, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C[] = {
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i16;2:i16;3:opt-i16;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C(
  ::apache::thrift::protocol::T_STRUCT,
  Simple::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C,
  trlo_specs_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C);

::apache::thrift::reflection::local::TypeSpec* Simple::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C;

uint32_t Simple::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_im_required = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_default);
          this->__isset.im_default = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_required);
          isset_im_required = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_optional);
          this->__isset.im_optional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_im_required)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Simple::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Simple");
  xfer += oprot->writeFieldBegin("im_default", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->im_default);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_required", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->im_required);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.im_optional) {
    xfer += oprot->writeFieldBegin("im_optional", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->im_optional);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Tricky1::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t Tricky1::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39[] = {
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i16;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39(
  ::apache::thrift::protocol::T_STRUCT,
  Tricky1::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39,
  trlo_specs_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39);

::apache::thrift::reflection::local::TypeSpec* Tricky1::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39;

uint32_t Tricky1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_default);
          this->__isset.im_default = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tricky1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tricky1");
  xfer += oprot->writeFieldBegin("im_default", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->im_default);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Tricky2::ascii_fingerprint = "5DAC9C51C7E1106BF936FC71860BE9D5";
const uint8_t Tricky2::binary_fingerprint[16] = {0x5D,0xAC,0x9C,0x51,0xC7,0xE1,0x10,0x6B,0xF9,0x36,0xFC,0x71,0x86,0x0B,0xE9,0xD5};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5[] = {
  { 1, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5[] = {
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-i16;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5(
  ::apache::thrift::protocol::T_STRUCT,
  Tricky2::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5,
  trlo_specs_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5);

::apache::thrift::reflection::local::TypeSpec* Tricky2::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_5DAC9C51C7E1106BF936FC71860BE9D5;

uint32_t Tricky2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_optional);
          this->__isset.im_optional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tricky2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tricky2");
  if (this->__isset.im_optional) {
    xfer += oprot->writeFieldBegin("im_optional", ::apache::thrift::protocol::T_I16, 1);
    xfer += oprot->writeI16(this->im_optional);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Tricky3::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t Tricky3::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

::apache::thrift::reflection::local::TypeSpec* Tricky3::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_565787C31CF2D774B532CB755189BF39;

uint32_t Tricky3::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_im_required = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->im_required);
          isset_im_required = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_im_required)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tricky3::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tricky3");
  xfer += oprot->writeFieldBegin("im_required", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->im_required);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Complex::ascii_fingerprint = "F2D7976304A5302593F62D9B33898375";
const uint8_t Complex::binary_fingerprint[16] = {0xF2,0xD7,0x97,0x63,0x04,0xA5,0x30,0x25,0x93,0xF6,0x2D,0x9B,0x33,0x89,0x83,0x75};

// map<i16,{1:i16;2:i16;3:opt-i16;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_2AF2A0DB79249912661A3E072EA4A70C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375[] = {
  { 1, false },
  { 2, false },
  { 3, true },
  { 4, false },
  { 5, false },
  { 6, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375[] = {
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_OptionalRequiredTest_2AF2A0DB79249912661A3E072EA4A70C,
  &trlo_typespec_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C,
  &trlo_typespec_OptionalRequiredTest_BE81C8950133989CA99AAE12969A558C,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i16;2:i16;3:opt-i16;4:map<i16,{1:i16;2:i16;3:opt-i16;}>;5:{1:i16;2:i16;3:opt-i16;};6:opt-{1:i16;2:i16;3:opt-i16;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375(
  ::apache::thrift::protocol::T_STRUCT,
  Complex::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375,
  trlo_specs_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375);

::apache::thrift::reflection::local::TypeSpec* Complex::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_F2D7976304A5302593F62D9B33898375;

uint32_t Complex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cp_required = false;
  bool isset_req_simp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cp_default);
          this->__isset.cp_default = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cp_required);
          isset_cp_required = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cp_optional);
          this->__isset.cp_optional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->the_map.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _ktype15;
            ::apache::thrift::protocol::TType _vtype16;
            iprot->readMapBegin(_ktype15, _vtype16, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              int16_t _key19;
              xfer += iprot->readI16(_key19);
              Simple& _val20 = this->the_map[_key19];
              xfer += _val20.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.the_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->req_simp.read(iprot);
          isset_req_simp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opt_simp.read(iprot);
          this->__isset.opt_simp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cp_required)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_req_simp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Complex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Complex");
  xfer += oprot->writeFieldBegin("cp_default", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->cp_default);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cp_required", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->cp_required);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.cp_optional) {
    xfer += oprot->writeFieldBegin("cp_optional", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->cp_optional);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("the_map", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I16, ::apache::thrift::protocol::T_STRUCT, this->the_map.size());
    std::map<int16_t, Simple> ::const_iterator _iter21;
    for (_iter21 = this->the_map.begin(); _iter21 != this->the_map.end(); ++_iter21)
    {
      xfer += oprot->writeI16(_iter21->first);
      xfer += _iter21->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("req_simp", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->req_simp.write(oprot);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.opt_simp) {
    xfer += oprot->writeFieldBegin("opt_simp", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->opt_simp.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ManyOpt::ascii_fingerprint = "8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF";
const uint8_t ManyOpt::binary_fingerprint[16] = {0x8C,0xA8,0xA5,0x79,0x7E,0xF1,0xB7,0xD3,0xA6,0xA7,0xF5,0xE0,0xE4,0xB7,0xB5,0xAF};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF[] = {
  { 1, true },
  { 2, true },
  { 3, true },
  { 4, false },
  { 5, true },
  { 6, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF[] = {
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-i32;2:opt-i32;3:opt-i32;4:i32;5:opt-i32;6:opt-i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF(
  ::apache::thrift::protocol::T_STRUCT,
  ManyOpt::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF,
  trlo_specs_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF);

::apache::thrift::reflection::local::TypeSpec* ManyOpt::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_8CA8A5797EF1B7D3A6A7F5E0E4B7B5AF;

uint32_t ManyOpt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt1);
          this->__isset.opt1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt2);
          this->__isset.opt2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt3);
          this->__isset.opt3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->def4);
          this->__isset.def4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt5);
          this->__isset.opt5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt6);
          this->__isset.opt6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ManyOpt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ManyOpt");
  if (this->__isset.opt1) {
    xfer += oprot->writeFieldBegin("opt1", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->opt1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.opt2) {
    xfer += oprot->writeFieldBegin("opt2", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->opt2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.opt3) {
    xfer += oprot->writeFieldBegin("opt3", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->opt3);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("def4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->def4);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.opt5) {
    xfer += oprot->writeFieldBegin("opt5", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->opt5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.opt6) {
    xfer += oprot->writeFieldBegin("opt6", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->opt6);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* JavaTestHelper::ascii_fingerprint = "2FA9BE24A2F66387CD678E6D2F739A02";
const uint8_t JavaTestHelper::binary_fingerprint[16] = {0x2F,0xA9,0xBE,0x24,0xA2,0xF6,0x63,0x87,0xCD,0x67,0x8E,0x6D,0x2F,0x73,0x9A,0x02};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02[] = {
  { 1, false },
  { 2, true },
  { 3, false },
  { 4, true },
  { 5, false },
  { 6, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02[] = {
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_OptionalRequiredTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_OptionalRequiredTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:opt-i32;3:string;4:opt-string;5:string;6:opt-string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02(
  ::apache::thrift::protocol::T_STRUCT,
  JavaTestHelper::binary_fingerprint,
  trlo_metas_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02,
  trlo_specs_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02);

::apache::thrift::reflection::local::TypeSpec* JavaTestHelper::local_reflection = 
  &trlo_typespec_OptionalRequiredTest_2FA9BE24A2F66387CD678E6D2F739A02;

uint32_t JavaTestHelper::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_req_int = false;
  bool isset_req_obj = false;
  bool isset_req_bin = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->req_int);
          isset_req_int = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->opt_int);
          this->__isset.opt_int = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->req_obj);
          isset_req_obj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->opt_obj);
          this->__isset.opt_obj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->req_bin);
          isset_req_bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->opt_bin);
          this->__isset.opt_bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_req_int)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_req_obj)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_req_bin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JavaTestHelper::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JavaTestHelper");
  xfer += oprot->writeFieldBegin("req_int", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->req_int);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.opt_int) {
    xfer += oprot->writeFieldBegin("opt_int", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->opt_int);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("req_obj", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->req_obj);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.opt_obj) {
    xfer += oprot->writeFieldBegin("opt_obj", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->opt_obj);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("req_bin", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->req_bin);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.opt_bin) {
    xfer += oprot->writeFieldBegin("opt_bin", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->opt_bin);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
