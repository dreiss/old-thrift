/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "ThriftTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test {

// enum
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_DA45EC4BE6574774008DF9BE683A4778(
  ::apache::thrift::protocol::T_I32);

const char* Bonk::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t Bonk::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_EEBC915CE44901401D881E6091423036[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_EEBC915CE44901401D881E6091423036[] = {
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_EEBC915CE44901401D881E6091423036(
  ::apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_ThriftTest_EEBC915CE44901401D881E6091423036,
  trlo_specs_ThriftTest_EEBC915CE44901401D881E6091423036);

::apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_ThriftTest_EEBC915CE44901401D881E6091423036;

uint32_t Bonk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bools::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t Bools::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

// bool
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_C506FF134BABDD6E68AB3E6350E95305(
  ::apache::thrift::protocol::T_BOOL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_403F0C4586060E367DA428DD09C59C9C[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_403F0C4586060E367DA428DD09C59C9C[] = {
  &trlo_typespec_ThriftTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_ThriftTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_403F0C4586060E367DA428DD09C59C9C(
  ::apache::thrift::protocol::T_STRUCT,
  Bools::binary_fingerprint,
  trlo_metas_ThriftTest_403F0C4586060E367DA428DD09C59C9C,
  trlo_specs_ThriftTest_403F0C4586060E367DA428DD09C59C9C);

::apache::thrift::reflection::local::TypeSpec* Bools::local_reflection = 
  &trlo_typespec_ThriftTest_403F0C4586060E367DA428DD09C59C9C;

uint32_t Bools::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bools::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bools");
  xfer += oprot->writeFieldBegin("im_true", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Xtruct::ascii_fingerprint = "01AAAA2258347790947AE6F75EE27B67";
const uint8_t Xtruct::binary_fingerprint[16] = {0x01,0xAA,0xAA,0x22,0x58,0x34,0x77,0x90,0x94,0x7A,0xE6,0xF7,0x5E,0xE2,0x7B,0x67};

// byte
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_40EA57D3EE3C07BF1C102B466E1C3091(
  ::apache::thrift::protocol::T_BYTE);

// i64
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_DD1D26230D15C93E8FBDBA07B0299A44(
  ::apache::thrift::protocol::T_I64);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_01AAAA2258347790947AE6F75EE27B67[] = {
  { 1, false },
  { 4, false },
  { 9, false },
  { 11, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_01AAAA2258347790947AE6F75EE27B67[] = {
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;4:byte;9:i32;11:i64;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_01AAAA2258347790947AE6F75EE27B67(
  ::apache::thrift::protocol::T_STRUCT,
  Xtruct::binary_fingerprint,
  trlo_metas_ThriftTest_01AAAA2258347790947AE6F75EE27B67,
  trlo_specs_ThriftTest_01AAAA2258347790947AE6F75EE27B67);

::apache::thrift::reflection::local::TypeSpec* Xtruct::local_reflection = 
  &trlo_typespec_ThriftTest_01AAAA2258347790947AE6F75EE27B67;

uint32_t Xtruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_thing);
          this->__isset.string_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byte_thing);
          this->__isset.byte_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_thing);
          this->__isset.i32_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_thing);
          this->__isset.i64_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xtruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xtruct");
  xfer += oprot->writeFieldBegin("string_thing", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_thing", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->byte_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_thing", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->i32_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_thing", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->i64_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Xtruct2::ascii_fingerprint = "0FA9E7DB20337B1935DECB146BE27561";
const uint8_t Xtruct2::binary_fingerprint[16] = {0x0F,0xA9,0xE7,0xDB,0x20,0x33,0x7B,0x19,0x35,0xDE,0xCB,0x14,0x6B,0xE2,0x75,0x61};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_0FA9E7DB20337B1935DECB146BE27561[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_0FA9E7DB20337B1935DECB146BE27561[] = {
  &trlo_typespec_ThriftTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_ThriftTest_01AAAA2258347790947AE6F75EE27B67,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:{1:string;4:byte;9:i32;11:i64;};3:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_0FA9E7DB20337B1935DECB146BE27561(
  ::apache::thrift::protocol::T_STRUCT,
  Xtruct2::binary_fingerprint,
  trlo_metas_ThriftTest_0FA9E7DB20337B1935DECB146BE27561,
  trlo_specs_ThriftTest_0FA9E7DB20337B1935DECB146BE27561);

::apache::thrift::reflection::local::TypeSpec* Xtruct2::local_reflection = 
  &trlo_typespec_ThriftTest_0FA9E7DB20337B1935DECB146BE27561;

uint32_t Xtruct2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byte_thing);
          this->__isset.byte_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_thing.read(iprot);
          this->__isset.struct_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_thing);
          this->__isset.i32_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xtruct2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xtruct2");
  xfer += oprot->writeFieldBegin("byte_thing", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->byte_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_thing", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->struct_thing.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_thing", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->i32_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Xtruct3::ascii_fingerprint = "7E14E617C7C8E24EC18FE35116D3ECC0";
const uint8_t Xtruct3::binary_fingerprint[16] = {0x7E,0x14,0xE6,0x17,0xC7,0xC8,0xE2,0x4E,0xC1,0x8F,0xE3,0x51,0x16,0xD3,0xEC,0xC0};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0[] = {
  { 1, false },
  { 4, false },
  { 9, false },
  { 11, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0[] = {
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;4:i32;9:i32;11:i64;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0(
  ::apache::thrift::protocol::T_STRUCT,
  Xtruct3::binary_fingerprint,
  trlo_metas_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0,
  trlo_specs_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0);

::apache::thrift::reflection::local::TypeSpec* Xtruct3::local_reflection = 
  &trlo_typespec_ThriftTest_7E14E617C7C8E24EC18FE35116D3ECC0;

uint32_t Xtruct3::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_thing);
          this->__isset.string_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->changed);
          this->__isset.changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_thing);
          this->__isset.i32_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_thing);
          this->__isset.i64_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xtruct3::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xtruct3");
  xfer += oprot->writeFieldBegin("string_thing", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("changed", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->changed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_thing", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->i32_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_thing", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->i64_thing);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Insanity::ascii_fingerprint = "9E7D0680FA87F83E5A0CEF688569EFE3";
const uint8_t Insanity::binary_fingerprint[16] = {0x9E,0x7D,0x06,0x80,0xFA,0x87,0xF8,0x3E,0x5A,0x0C,0xEF,0x68,0x85,0x69,0xEF,0xE3};

// map<enum,i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_C337A52D3836CAD9B459DC3BAE6A56DF(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_ThriftTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_ThriftTest_DD1D26230D15C93E8FBDBA07B0299A44);

// list<{1:string;4:byte;9:i32;11:i64;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_30BCF193B507A8502F198CA671E26E64(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_ThriftTest_01AAAA2258347790947AE6F75EE27B67,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3[] = {
  &trlo_typespec_ThriftTest_C337A52D3836CAD9B459DC3BAE6A56DF,
  &trlo_typespec_ThriftTest_30BCF193B507A8502F198CA671E26E64,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3(
  ::apache::thrift::protocol::T_STRUCT,
  Insanity::binary_fingerprint,
  trlo_metas_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3,
  trlo_specs_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3);

::apache::thrift::reflection::local::TypeSpec* Insanity::local_reflection = 
  &trlo_typespec_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3;

uint32_t Insanity::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userMap.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              Numberz _key5;
              int32_t ecast7;
              xfer += iprot->readI32(ecast7);
              _key5 = (Numberz)ecast7;
              UserId& _val6 = this->userMap[_key5];
              xfer += iprot->readI64(_val6);
            }
            iprot->readMapEnd();
          }
          this->__isset.userMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->xtructs.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            iprot->readListBegin(_etype11, _size8);
            this->xtructs.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->xtructs[_i12].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.xtructs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Insanity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Insanity");
  xfer += oprot->writeFieldBegin("userMap", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, this->userMap.size());
    std::map<Numberz, UserId> ::const_iterator _iter13;
    for (_iter13 = this->userMap.begin(); _iter13 != this->userMap.end(); ++_iter13)
    {
      xfer += oprot->writeI32((int32_t)_iter13->first);
      xfer += oprot->writeI64(_iter13->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("xtructs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->xtructs.size());
    std::vector<Xtruct> ::const_iterator _iter14;
    for (_iter14 = this->xtructs.begin(); _iter14 != this->xtructs.end(); ++_iter14)
    {
      xfer += (*_iter14).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CrazyNesting::ascii_fingerprint = "D2145FBF82608CCD4A1D0E5B6F34C02B";
const uint8_t CrazyNesting::binary_fingerprint[16] = {0xD2,0x14,0x5F,0xBF,0x82,0x60,0x8C,0xCD,0x4A,0x1D,0x0E,0x5B,0x6F,0x34,0xC0,0x2B};

// set<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_8A576F1408FB89A71D210397A83DDF47(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3,
  NULL);

// set<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_698CD5CC80596EF059310FAB605A4491(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_2A51D1822A16C77139F82F472BB1DB6C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_ThriftTest_9E7D0680FA87F83E5A0CEF688569EFE3,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_E21ABAD2A20D2AC001D4A51B97D38E44(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_ThriftTest_2A51D1822A16C77139F82F472BB1DB6C,
  NULL);

// set<list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_A63F2609311B130CE9F9D040E65E233A(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_ThriftTest_E21ABAD2A20D2AC001D4A51B97D38E44,
  NULL);

// map<i32,set<list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_BA4B91DC601BEC3DD80F041C071589B8(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_A63F2609311B130CE9F9D040E65E233A);

// map<set<i32>,map<i32,set<list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_DD0011B9746E1C0358D4DCCB76D97926(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_ThriftTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_ThriftTest_BA4B91DC601BEC3DD80F041C071589B8);

// list<map<set<i32>,map<i32,set<list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>>>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_DF6F4B69A07B3B1A159588653F7865A8(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_ThriftTest_DD0011B9746E1C0358D4DCCB76D97926,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B[] = {
  { 1, false },
  { 2, true },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B[] = {
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_8A576F1408FB89A71D210397A83DDF47,
  &trlo_typespec_ThriftTest_DF6F4B69A07B3B1A159588653F7865A8,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:opt-set<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;}>;3:list<map<set<i32>,map<i32,set<list<map<{1:map<enum,i64>;2:list<{1:string;4:byte;9:i32;11:i64;}>;},string>>>>>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B(
  ::apache::thrift::protocol::T_STRUCT,
  CrazyNesting::binary_fingerprint,
  trlo_metas_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B,
  trlo_specs_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B);

::apache::thrift::reflection::local::TypeSpec* CrazyNesting::local_reflection = 
  &trlo_typespec_ThriftTest_D2145FBF82608CCD4A1D0E5B6F34C02B;

uint32_t CrazyNesting::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_list_field = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_field);
          this->__isset.string_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->set_field.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            iprot->readSetBegin(_etype18, _size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              Insanity _elem20;
              xfer += _elem20.read(iprot);
              this->set_field.insert(_elem20);
            }
            iprot->readSetEnd();
          }
          this->__isset.set_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->list_field.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            iprot->readListBegin(_etype24, _size21);
            this->list_field.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              {
                this->list_field[_i25].clear();
                uint32_t _size26;
                ::apache::thrift::protocol::TType _ktype27;
                ::apache::thrift::protocol::TType _vtype28;
                iprot->readMapBegin(_ktype27, _vtype28, _size26);
                uint32_t _i30;
                for (_i30 = 0; _i30 < _size26; ++_i30)
                {
                  std::set<int32_t>  _key31;
                  {
                    _key31.clear();
                    uint32_t _size33;
                    ::apache::thrift::protocol::TType _etype36;
                    iprot->readSetBegin(_etype36, _size33);
                    uint32_t _i37;
                    for (_i37 = 0; _i37 < _size33; ++_i37)
                    {
                      int32_t _elem38;
                      xfer += iprot->readI32(_elem38);
                      _key31.insert(_elem38);
                    }
                    iprot->readSetEnd();
                  }
                  std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > & _val32 = this->list_field[_i25][_key31];
                  {
                    _val32.clear();
                    uint32_t _size39;
                    ::apache::thrift::protocol::TType _ktype40;
                    ::apache::thrift::protocol::TType _vtype41;
                    iprot->readMapBegin(_ktype40, _vtype41, _size39);
                    uint32_t _i43;
                    for (_i43 = 0; _i43 < _size39; ++_i43)
                    {
                      int32_t _key44;
                      xfer += iprot->readI32(_key44);
                      std::set<std::vector<std::map<Insanity, std::string> > > & _val45 = _val32[_key44];
                      {
                        _val45.clear();
                        uint32_t _size46;
                        ::apache::thrift::protocol::TType _etype49;
                        iprot->readSetBegin(_etype49, _size46);
                        uint32_t _i50;
                        for (_i50 = 0; _i50 < _size46; ++_i50)
                        {
                          std::vector<std::map<Insanity, std::string> >  _elem51;
                          {
                            _elem51.clear();
                            uint32_t _size52;
                            ::apache::thrift::protocol::TType _etype55;
                            iprot->readListBegin(_etype55, _size52);
                            _elem51.resize(_size52);
                            uint32_t _i56;
                            for (_i56 = 0; _i56 < _size52; ++_i56)
                            {
                              {
                                _elem51[_i56].clear();
                                uint32_t _size57;
                                ::apache::thrift::protocol::TType _ktype58;
                                ::apache::thrift::protocol::TType _vtype59;
                                iprot->readMapBegin(_ktype58, _vtype59, _size57);
                                uint32_t _i61;
                                for (_i61 = 0; _i61 < _size57; ++_i61)
                                {
                                  Insanity _key62;
                                  xfer += _key62.read(iprot);
                                  std::string& _val63 = _elem51[_i56][_key62];
                                  xfer += iprot->readString(_val63);
                                }
                                iprot->readMapEnd();
                              }
                            }
                            iprot->readListEnd();
                          }
                          _val45.insert(_elem51);
                        }
                        iprot->readSetEnd();
                      }
                    }
                    iprot->readMapEnd();
                  }
                }
                iprot->readMapEnd();
              }
            }
            iprot->readListEnd();
          }
          isset_list_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_list_field)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CrazyNesting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CrazyNesting");
  xfer += oprot->writeFieldBegin("string_field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_field);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.set_field) {
    xfer += oprot->writeFieldBegin("set_field", ::apache::thrift::protocol::T_SET, 2);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, this->set_field.size());
      std::set<Insanity> ::const_iterator _iter64;
      for (_iter64 = this->set_field.begin(); _iter64 != this->set_field.end(); ++_iter64)
      {
        xfer += (*_iter64).write(oprot);
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("list_field", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, this->list_field.size());
    std::vector<std::map<std::set<int32_t> , std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > > > ::const_iterator _iter65;
    for (_iter65 = this->list_field.begin(); _iter65 != this->list_field.end(); ++_iter65)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_SET, ::apache::thrift::protocol::T_MAP, (*_iter65).size());
        std::map<std::set<int32_t> , std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > > ::const_iterator _iter66;
        for (_iter66 = (*_iter65).begin(); _iter66 != (*_iter65).end(); ++_iter66)
        {
          {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, _iter66->first.size());
            std::set<int32_t> ::const_iterator _iter67;
            for (_iter67 = _iter66->first.begin(); _iter67 != _iter66->first.end(); ++_iter67)
            {
              xfer += oprot->writeI32((*_iter67));
            }
            xfer += oprot->writeSetEnd();
          }
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_SET, _iter66->second.size());
            std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > ::const_iterator _iter68;
            for (_iter68 = _iter66->second.begin(); _iter68 != _iter66->second.end(); ++_iter68)
            {
              xfer += oprot->writeI32(_iter68->first);
              {
                xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_LIST, _iter68->second.size());
                std::set<std::vector<std::map<Insanity, std::string> > > ::const_iterator _iter69;
                for (_iter69 = _iter68->second.begin(); _iter69 != _iter68->second.end(); ++_iter69)
                {
                  {
                    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, (*_iter69).size());
                    std::vector<std::map<Insanity, std::string> > ::const_iterator _iter70;
                    for (_iter70 = (*_iter69).begin(); _iter70 != (*_iter69).end(); ++_iter70)
                    {
                      {
                        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_STRING, (*_iter70).size());
                        std::map<Insanity, std::string> ::const_iterator _iter71;
                        for (_iter71 = (*_iter70).begin(); _iter71 != (*_iter70).end(); ++_iter71)
                        {
                          xfer += _iter71->first.write(oprot);
                          xfer += oprot->writeString(_iter71->second);
                        }
                        xfer += oprot->writeMapEnd();
                      }
                    }
                    xfer += oprot->writeListEnd();
                  }
                }
                xfer += oprot->writeSetEnd();
              }
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Xception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Xception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_3F5FC93B338687BC7235B1AB103F47B3(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* Xception::local_reflection = 
  &trlo_typespec_ThriftTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Xception::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xception::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xception");
  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Xception2::ascii_fingerprint = "7B1B1DBEB6FD136E8478F45D0399F3C4";
const uint8_t Xception2::binary_fingerprint[16] = {0x7B,0x1B,0x1D,0xBE,0xB6,0xFD,0x13,0x6E,0x84,0x78,0xF4,0x5D,0x03,0x99,0xF3,0xC4};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_7B1B1DBEB6FD136E8478F45D0399F3C4[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_7B1B1DBEB6FD136E8478F45D0399F3C4[] = {
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_01AAAA2258347790947AE6F75EE27B67,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:{1:string;4:byte;9:i32;11:i64;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_7B1B1DBEB6FD136E8478F45D0399F3C4(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* Xception2::local_reflection = 
  &trlo_typespec_ThriftTest_7B1B1DBEB6FD136E8478F45D0399F3C4;

uint32_t Xception2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_thing.read(iprot);
          this->__isset.struct_thing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xception2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xception2");
  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_thing", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->struct_thing.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* EmptyStruct::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t EmptyStruct::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_99914B932BD37A50B983C5E7C90AE93B(
  ::apache::thrift::protocol::T_STRUCT,
  EmptyStruct::binary_fingerprint,
  trlo_metas_ThriftTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_ThriftTest_99914B932BD37A50B983C5E7C90AE93B);

::apache::thrift::reflection::local::TypeSpec* EmptyStruct::local_reflection = 
  &trlo_typespec_ThriftTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t EmptyStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmptyStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EmptyStruct");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneField::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t OneField::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_ThriftTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_2C32A565725135A023CB591D1A993CFD(
  ::apache::thrift::protocol::T_STRUCT,
  OneField::binary_fingerprint,
  trlo_metas_ThriftTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_ThriftTest_2C32A565725135A023CB591D1A993CFD);

::apache::thrift::reflection::local::TypeSpec* OneField::local_reflection = 
  &trlo_typespec_ThriftTest_2C32A565725135A023CB591D1A993CFD;

uint32_t OneField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field.read(iprot);
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneField");
  xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* VersioningTestV1::ascii_fingerprint = "CB65C216C3190178AD7ADECF1928CD97";
const uint8_t VersioningTestV1::binary_fingerprint[16] = {0xCB,0x65,0xC2,0x16,0xC3,0x19,0x01,0x78,0xAD,0x7A,0xDE,0xCF,0x19,0x28,0xCD,0x97};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_CB65C216C3190178AD7ADECF1928CD97[] = {
  { 1, false },
  { 3, false },
  { 12, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_CB65C216C3190178AD7ADECF1928CD97[] = {
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;3:string;12:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_CB65C216C3190178AD7ADECF1928CD97(
  ::apache::thrift::protocol::T_STRUCT,
  VersioningTestV1::binary_fingerprint,
  trlo_metas_ThriftTest_CB65C216C3190178AD7ADECF1928CD97,
  trlo_specs_ThriftTest_CB65C216C3190178AD7ADECF1928CD97);

::apache::thrift::reflection::local::TypeSpec* VersioningTestV1::local_reflection = 
  &trlo_typespec_ThriftTest_CB65C216C3190178AD7ADECF1928CD97;

uint32_t VersioningTestV1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->begin_in_both);
          this->__isset.begin_in_both = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->old_string);
          this->__isset.old_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_in_both);
          this->__isset.end_in_both = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VersioningTestV1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VersioningTestV1");
  xfer += oprot->writeFieldBegin("begin_in_both", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->begin_in_both);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("old_string", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->old_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_in_both", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->end_in_both);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* VersioningTestV2::ascii_fingerprint = "085522DA9EF6E13EF3186B0B4C19DDDB";
const uint8_t VersioningTestV2::binary_fingerprint[16] = {0x08,0x55,0x22,0xDA,0x9E,0xF6,0xE1,0x3E,0xF3,0x18,0x6B,0x0B,0x4C,0x19,0xDD,0xDB};

// i16
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  ::apache::thrift::protocol::T_I16);

// double
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_E8CD7DA078A86726031AD64F35F5A6C0(
  ::apache::thrift::protocol::T_DOUBLE);

// list<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_8E2C3AB94930BFC8CED12D3BE36D046C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB[] = {
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_ThriftTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_ThriftTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_ThriftTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_ThriftTest_EEBC915CE44901401D881E6091423036,
  &trlo_typespec_ThriftTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_ThriftTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_ThriftTest_8E2C3AB94930BFC8CED12D3BE36D046C,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:byte;4:i16;5:i64;6:double;7:{1:string;2:i32;};8:list<i32>;9:set<i32>;10:map<i32,i32>;11:string;12:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB(
  ::apache::thrift::protocol::T_STRUCT,
  VersioningTestV2::binary_fingerprint,
  trlo_metas_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB,
  trlo_specs_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB);

::apache::thrift::reflection::local::TypeSpec* VersioningTestV2::local_reflection = 
  &trlo_typespec_ThriftTest_085522DA9EF6E13EF3186B0B4C19DDDB;

uint32_t VersioningTestV2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->begin_in_both);
          this->__isset.begin_in_both = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newint);
          this->__isset.newint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->newbyte);
          this->__isset.newbyte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->newshort);
          this->__isset.newshort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->newlong);
          this->__isset.newlong = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->newdouble);
          this->__isset.newdouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newstruct.read(iprot);
          this->__isset.newstruct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->newlist.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            iprot->readListBegin(_etype75, _size72);
            this->newlist.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += iprot->readI32(this->newlist[_i76]);
            }
            iprot->readListEnd();
          }
          this->__isset.newlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->newset.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            iprot->readSetBegin(_etype80, _size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              int32_t _elem82;
              xfer += iprot->readI32(_elem82);
              this->newset.insert(_elem82);
            }
            iprot->readSetEnd();
          }
          this->__isset.newset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newmap.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _ktype84;
            ::apache::thrift::protocol::TType _vtype85;
            iprot->readMapBegin(_ktype84, _vtype85, _size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              int32_t _key88;
              xfer += iprot->readI32(_key88);
              int32_t& _val89 = this->newmap[_key88];
              xfer += iprot->readI32(_val89);
            }
            iprot->readMapEnd();
          }
          this->__isset.newmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newstring);
          this->__isset.newstring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_in_both);
          this->__isset.end_in_both = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VersioningTestV2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VersioningTestV2");
  xfer += oprot->writeFieldBegin("begin_in_both", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->begin_in_both);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newint", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->newint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newbyte", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->newbyte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newshort", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->newshort);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newlong", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->newlong);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newdouble", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->newdouble);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newstruct", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->newstruct.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newlist", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->newlist.size());
    std::vector<int32_t> ::const_iterator _iter90;
    for (_iter90 = this->newlist.begin(); _iter90 != this->newlist.end(); ++_iter90)
    {
      xfer += oprot->writeI32((*_iter90));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newset", ::apache::thrift::protocol::T_SET, 9);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, this->newset.size());
    std::set<int32_t> ::const_iterator _iter91;
    for (_iter91 = this->newset.begin(); _iter91 != this->newset.end(); ++_iter91)
    {
      xfer += oprot->writeI32((*_iter91));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newmap", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, this->newmap.size());
    std::map<int32_t, int32_t> ::const_iterator _iter92;
    for (_iter92 = this->newmap.begin(); _iter92 != this->newmap.end(); ++_iter92)
    {
      xfer += oprot->writeI32(_iter92->first);
      xfer += oprot->writeI32(_iter92->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newstring", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->newstring);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_in_both", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->end_in_both);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ListTypeVersioningV1::ascii_fingerprint = "CCCCE89C7E9DA10280F5663700677313";
const uint8_t ListTypeVersioningV1::binary_fingerprint[16] = {0xCC,0xCC,0xE8,0x9C,0x7E,0x9D,0xA1,0x02,0x80,0xF5,0x66,0x37,0x00,0x67,0x73,0x13};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_CCCCE89C7E9DA10280F5663700677313[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_CCCCE89C7E9DA10280F5663700677313[] = {
  &trlo_typespec_ThriftTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<i32>;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_CCCCE89C7E9DA10280F5663700677313(
  ::apache::thrift::protocol::T_STRUCT,
  ListTypeVersioningV1::binary_fingerprint,
  trlo_metas_ThriftTest_CCCCE89C7E9DA10280F5663700677313,
  trlo_specs_ThriftTest_CCCCE89C7E9DA10280F5663700677313);

::apache::thrift::reflection::local::TypeSpec* ListTypeVersioningV1::local_reflection = 
  &trlo_typespec_ThriftTest_CCCCE89C7E9DA10280F5663700677313;

uint32_t ListTypeVersioningV1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->myints.clear();
            uint32_t _size93;
            ::apache::thrift::protocol::TType _etype96;
            iprot->readListBegin(_etype96, _size93);
            this->myints.resize(_size93);
            uint32_t _i97;
            for (_i97 = 0; _i97 < _size93; ++_i97)
            {
              xfer += iprot->readI32(this->myints[_i97]);
            }
            iprot->readListEnd();
          }
          this->__isset.myints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hello);
          this->__isset.hello = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTypeVersioningV1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ListTypeVersioningV1");
  xfer += oprot->writeFieldBegin("myints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->myints.size());
    std::vector<int32_t> ::const_iterator _iter98;
    for (_iter98 = this->myints.begin(); _iter98 != this->myints.end(); ++_iter98)
    {
      xfer += oprot->writeI32((*_iter98));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("hello", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->hello);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ListTypeVersioningV2::ascii_fingerprint = "BE556BF7091B2DABBA1863D5E458B15F";
const uint8_t ListTypeVersioningV2::binary_fingerprint[16] = {0xBE,0x55,0x6B,0xF7,0x09,0x1B,0x2D,0xAB,0xBA,0x18,0x63,0xD5,0xE4,0x58,0xB1,0x5F};

// list<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_1F997684D04C8586EA5BDBB510E47233(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F[] = {
  &trlo_typespec_ThriftTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_ThriftTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_ThriftTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<string>;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F(
  ::apache::thrift::protocol::T_STRUCT,
  ListTypeVersioningV2::binary_fingerprint,
  trlo_metas_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F,
  trlo_specs_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F);

::apache::thrift::reflection::local::TypeSpec* ListTypeVersioningV2::local_reflection = 
  &trlo_typespec_ThriftTest_BE556BF7091B2DABBA1863D5E458B15F;

uint32_t ListTypeVersioningV2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->strings.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            iprot->readListBegin(_etype102, _size99);
            this->strings.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += iprot->readString(this->strings[_i103]);
            }
            iprot->readListEnd();
          }
          this->__isset.strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hello);
          this->__isset.hello = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTypeVersioningV2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ListTypeVersioningV2");
  xfer += oprot->writeFieldBegin("strings", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->strings.size());
    std::vector<std::string> ::const_iterator _iter104;
    for (_iter104 = this->strings.begin(); _iter104 != this->strings.end(); ++_iter104)
    {
      xfer += oprot->writeString((*_iter104));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("hello", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->hello);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
