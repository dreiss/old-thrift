/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "DebugProtoTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test { namespace debug {

const char* Doubles::ascii_fingerprint = "4B056EA3B3FB01EC41613CEB91B54CE5";
const uint8_t Doubles::binary_fingerprint[16] = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

// double
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0(
  apache::thrift::protocol::T_DOUBLE);

// void
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34(
  apache::thrift::protocol::T_STOP);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5(
  apache::thrift::protocol::T_STRUCT,
  Doubles::binary_fingerprint,
  trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5,
  trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5);

apache::thrift::reflection::local::TypeSpec* Doubles::local_reflection = 
  &trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

uint32_t Doubles::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nan);
          this->__isset.nan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inf);
          this->__isset.inf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->neginf);
          this->__isset.neginf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->repeating);
          this->__isset.repeating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->big);
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->small);
          this->__isset.small = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zero);
          this->__isset.zero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->negzero);
          this->__isset.negzero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Doubles::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Doubles");
  xfer += oprot->writeFieldBegin("nan", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nan);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inf", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("neginf", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->neginf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("repeating", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->repeating);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->big);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->small);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zero", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("negzero", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->negzero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneOfEach::ascii_fingerprint = "DF7CE78394886179BFAFDB65C5A708BC";
const uint8_t OneOfEach::binary_fingerprint[16] = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

// bool
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305(
  apache::thrift::protocol::T_BOOL);

// byte
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091(
  apache::thrift::protocol::T_BYTE);

// i16
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  apache::thrift::protocol::T_I16);

// i32
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  apache::thrift::protocol::T_I32);

// i64
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44(
  apache::thrift::protocol::T_I64);

// string
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  apache::thrift::protocol::T_STRING);

// list<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// list<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// list<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC(
  apache::thrift::protocol::T_STRUCT,
  OneOfEach::binary_fingerprint,
  trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC);

apache::thrift::reflection::local::TypeSpec* OneOfEach::local_reflection = 
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

uint32_t OneOfEach::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_bite);
          this->__isset.a_bite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->integer16);
          this->__isset.integer16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->integer32);
          this->__isset.integer32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->integer64);
          this->__isset.integer64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_precision);
          this->__isset.double_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->some_characters);
          this->__isset.some_characters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zomg_unicode);
          this->__isset.zomg_unicode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->what_who);
          this->__isset.what_who = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->base64);
          this->__isset.base64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size57;
            apache::thrift::protocol::TType _etype60;
            iprot->readListBegin(_etype60, _size57);
            this->byte_list.resize(_size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              xfer += iprot->readByte(this->byte_list[_i61]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size62;
            apache::thrift::protocol::TType _etype65;
            iprot->readListBegin(_etype65, _size62);
            this->i16_list.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              xfer += iprot->readI16(this->i16_list[_i66]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size67;
            apache::thrift::protocol::TType _etype70;
            iprot->readListBegin(_etype70, _size67);
            this->i64_list.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += iprot->readI64(this->i64_list[_i71]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneOfEach::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneOfEach");
  xfer += oprot->writeFieldBegin("im_true", apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_bite", apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->a_bite);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer16", apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->integer16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer32", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->integer32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer64", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->integer64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_precision", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->double_precision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("some_characters", apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->some_characters);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zomg_unicode", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->zomg_unicode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("what_who", apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->what_who);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base64", apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeBinary(this->base64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter72;
    for (_iter72 = this->byte_list.begin(); _iter72 != this->byte_list.end(); ++_iter72)
    {
      xfer += oprot->writeByte((*_iter72));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter73;
    for (_iter73 = this->i16_list.begin(); _iter73 != this->i16_list.end(); ++_iter73)
    {
      xfer += oprot->writeI16((*_iter73));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter74;
    for (_iter74 = this->i64_list.begin(); _iter74 != this->i64_list.end(); ++_iter74)
    {
      xfer += oprot->writeI64((*_iter74));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bonk::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Bonk::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3(
  apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3);

apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Bonk::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("type", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nesting::ascii_fingerprint = "9D961D015265DA7A88BA69FB2A7ACDA9";
const uint8_t Nesting::binary_fingerprint[16] = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9(
  apache::thrift::protocol::T_STRUCT,
  Nesting::binary_fingerprint,
  trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9,
  trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9);

apache::thrift::reflection::local::TypeSpec* Nesting::local_reflection = 
  &trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

uint32_t Nesting::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_bonk.read(iprot);
          this->__isset.my_bonk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_ooe.read(iprot);
          this->__isset.my_ooe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nesting::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nesting");
  xfer += oprot->writeFieldBegin("my_bonk", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->my_bonk.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("my_ooe", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->my_ooe.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HolyMoley::ascii_fingerprint = "63B6C93A44D5393BB40AF7623EA1919F";
const uint8_t HolyMoley::binary_fingerprint[16] = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  NULL);

// list<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<list<string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  NULL);

// list<{1:i32;2:string;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  NULL);

// map<string,list<{1:i32;2:string;}>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  &trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A,
  &trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F,
  &trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F(
  apache::thrift::protocol::T_STRUCT,
  HolyMoley::binary_fingerprint,
  trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F,
  trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F);

apache::thrift::reflection::local::TypeSpec* HolyMoley::local_reflection = 
  &trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

uint32_t HolyMoley::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->big.clear();
            uint32_t _size75;
            apache::thrift::protocol::TType _etype78;
            iprot->readListBegin(_etype78, _size75);
            this->big.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += this->big[_i79].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->contain.clear();
            uint32_t _size80;
            apache::thrift::protocol::TType _etype83;
            iprot->readSetBegin(_etype83, _size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              std::vector<std::string>  _elem85;
              {
                _elem85.clear();
                uint32_t _size86;
                apache::thrift::protocol::TType _etype89;
                iprot->readListBegin(_etype89, _size86);
                _elem85.resize(_size86);
                uint32_t _i90;
                for (_i90 = 0; _i90 < _size86; ++_i90)
                {
                  xfer += iprot->readString(_elem85[_i90]);
                }
                iprot->readListEnd();
              }
              this->contain.insert(_elem85);
            }
            iprot->readSetEnd();
          }
          this->__isset.contain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->bonks.clear();
            uint32_t _size91;
            apache::thrift::protocol::TType _ktype92;
            apache::thrift::protocol::TType _vtype93;
            iprot->readMapBegin(_ktype92, _vtype93, _size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              std::string _key96;
              xfer += iprot->readString(_key96);
              std::vector<Bonk> & _val97 = this->bonks[_key96];
              {
                _val97.clear();
                uint32_t _size98;
                apache::thrift::protocol::TType _etype101;
                iprot->readListBegin(_etype101, _size98);
                _val97.resize(_size98);
                uint32_t _i102;
                for (_i102 = 0; _i102 < _size98; ++_i102)
                {
                  xfer += _val97[_i102].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.bonks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HolyMoley::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HolyMoley");
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->big.size());
    std::vector<OneOfEach> ::const_iterator _iter103;
    for (_iter103 = this->big.begin(); _iter103 != this->big.end(); ++_iter103)
    {
      xfer += (*_iter103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contain", apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_LIST, this->contain.size());
    std::set<std::vector<std::string> > ::const_iterator _iter104;
    for (_iter104 = this->contain.begin(); _iter104 != this->contain.end(); ++_iter104)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, (*_iter104).size());
        std::vector<std::string> ::const_iterator _iter105;
        for (_iter105 = (*_iter104).begin(); _iter105 != (*_iter104).end(); ++_iter105)
        {
          xfer += oprot->writeString((*_iter105));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bonks", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->bonks.size());
    std::map<std::string, std::vector<Bonk> > ::const_iterator _iter106;
    for (_iter106 = this->bonks.begin(); _iter106 != this->bonks.end(); ++_iter106)
    {
      xfer += oprot->writeString(_iter106->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, _iter106->second.size());
        std::vector<Bonk> ::const_iterator _iter107;
        for (_iter107 = _iter106->second.begin(); _iter107 != _iter106->second.end(); ++_iter107)
        {
          xfer += (*_iter107).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Backwards::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t Backwards::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3(
  apache::thrift::protocol::T_STRUCT,
  Backwards::binary_fingerprint,
  trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3);

apache::thrift::reflection::local::TypeSpec* Backwards::local_reflection = 
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3;

uint32_t Backwards::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_tag1);
          this->__isset.second_tag1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_tag2);
          this->__isset.first_tag2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Backwards::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Backwards");
  xfer += oprot->writeFieldBegin("second_tag1", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->second_tag1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first_tag2", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_tag2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Empty::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Empty::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B(
  apache::thrift::protocol::T_STRUCT,
  Empty::binary_fingerprint,
  trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B);

apache::thrift::reflection::local::TypeSpec* Empty::local_reflection = 
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t Empty::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Empty");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Wrapper::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t Wrapper::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD(
  apache::thrift::protocol::T_STRUCT,
  Wrapper::binary_fingerprint,
  trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::TypeSpec* Wrapper::local_reflection = 
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

uint32_t Wrapper::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->foo.read(iprot);
          this->__isset.foo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wrapper::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Wrapper");
  xfer += oprot->writeFieldBegin("foo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->foo.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RandomStuff::ascii_fingerprint = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
const uint8_t RandomStuff::binary_fingerprint[16] = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

// list<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,{1:{};}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE(
  apache::thrift::protocol::T_STRUCT,
  RandomStuff::binary_fingerprint,
  trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE);

apache::thrift::reflection::local::TypeSpec* RandomStuff::local_reflection = 
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

uint32_t RandomStuff::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->myintlist.clear();
            uint32_t _size108;
            apache::thrift::protocol::TType _etype111;
            iprot->readListBegin(_etype111, _size108);
            this->myintlist.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += iprot->readI32(this->myintlist[_i112]);
            }
            iprot->readListEnd();
          }
          this->__isset.myintlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->maps.clear();
            uint32_t _size113;
            apache::thrift::protocol::TType _ktype114;
            apache::thrift::protocol::TType _vtype115;
            iprot->readMapBegin(_ktype114, _vtype115, _size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              int32_t _key118;
              xfer += iprot->readI32(_key118);
              Wrapper& _val119 = this->maps[_key118];
              xfer += _val119.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bigint);
          this->__isset.bigint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->triple);
          this->__isset.triple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RandomStuff::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RandomStuff");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("myintlist", apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->myintlist.size());
    std::vector<int32_t> ::const_iterator _iter120;
    for (_iter120 = this->myintlist.begin(); _iter120 != this->myintlist.end(); ++_iter120)
    {
      xfer += oprot->writeI32((*_iter120));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maps", apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, this->maps.size());
    std::map<int32_t, Wrapper> ::const_iterator _iter121;
    for (_iter121 = this->maps.begin(); _iter121 != this->maps.end(); ++_iter121)
    {
      xfer += oprot->writeI32(_iter121->first);
      xfer += _iter121->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bigint", apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->bigint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("triple", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->triple);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Base64::ascii_fingerprint = "D6983CD9C5C18EAC36C957E4BED331AE";
const uint8_t Base64::binary_fingerprint[16] = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE(
  apache::thrift::protocol::T_STRUCT,
  Base64::binary_fingerprint,
  trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE,
  trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE);

apache::thrift::reflection::local::TypeSpec* Base64::local_reflection = 
  &trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

uint32_t Base64::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b1);
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b2);
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b3);
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b4);
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b5);
          this->__isset.b5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b6);
          this->__isset.b6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base64::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Base64");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->b1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->b2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->b3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->b4);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b5", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->b5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b6", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->b6);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CompactProtoTestStruct::ascii_fingerprint = "FECB06442E1E082EBF36FB8CB75EB414";
const uint8_t CompactProtoTestStruct::binary_fingerprint[16] = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

// list<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// list<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// list<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// set<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// set<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// set<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// set<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

// set<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// set<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// set<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// map<byte,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i16,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i32,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i64,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<double,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<string,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<bool,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5);

// map<byte,i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

// map<byte,i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44);

// map<byte,double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0);

// map<byte,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// map<byte,bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305);

// map<list<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<set<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<map<byte,byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,map<byte,byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C);

// map<byte,set<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485);

// map<byte,list<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 15, false },
  { 16, false },
  { 17, false },
  { 18, false },
  { 19, false },
  { 20, false },
  { 21, false },
  { 22, false },
  { 23, false },
  { 24, false },
  { 25, false },
  { 26, false },
  { 27, false },
  { 28, false },
  { 29, false },
  { 30, false },
  { 31, false },
  { 32, false },
  { 33, false },
  { 34, false },
  { 35, false },
  { 36, false },
  { 37, false },
  { 38, false },
  { 39, false },
  { 40, false },
  { 41, false },
  { 42, false },
  { 43, false },
  { 44, false },
  { 45, false },
  { 46, false },
  { 47, false },
  { 48, false },
  { 49, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645,
  &trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569,
  &trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F,
  &trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758,
  &trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A,
  &trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451,
  &trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC,
  &trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373,
  &trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9,
  &trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD,
  &trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF,
  &trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2,
  &trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36,
  &trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2,
  &trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82,
  &trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21,
  &trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414(
  apache::thrift::protocol::T_STRUCT,
  CompactProtoTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414,
  trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414);

apache::thrift::reflection::local::TypeSpec* CompactProtoTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

uint32_t CompactProtoTestStruct::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_byte);
          this->__isset.a_byte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->a_i16);
          this->__isset.a_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a_i32);
          this->__isset.a_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->a_i64);
          this->__isset.a_i64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_double);
          this->__isset.a_double = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_string);
          this->__isset.a_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->a_binary);
          this->__isset.a_binary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->true_field);
          this->__isset.true_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->false_field);
          this->__isset.false_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->empty_struct_field.read(iprot);
          this->__isset.empty_struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size122;
            apache::thrift::protocol::TType _etype125;
            iprot->readListBegin(_etype125, _size122);
            this->byte_list.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              xfer += iprot->readByte(this->byte_list[_i126]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size127;
            apache::thrift::protocol::TType _etype130;
            iprot->readListBegin(_etype130, _size127);
            this->i16_list.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += iprot->readI16(this->i16_list[_i131]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i32_list.clear();
            uint32_t _size132;
            apache::thrift::protocol::TType _etype135;
            iprot->readListBegin(_etype135, _size132);
            this->i32_list.resize(_size132);
            uint32_t _i136;
            for (_i136 = 0; _i136 < _size132; ++_i136)
            {
              xfer += iprot->readI32(this->i32_list[_i136]);
            }
            iprot->readListEnd();
          }
          this->__isset.i32_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size137;
            apache::thrift::protocol::TType _etype140;
            iprot->readListBegin(_etype140, _size137);
            this->i64_list.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += iprot->readI64(this->i64_list[_i141]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->double_list.clear();
            uint32_t _size142;
            apache::thrift::protocol::TType _etype145;
            iprot->readListBegin(_etype145, _size142);
            this->double_list.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += iprot->readDouble(this->double_list[_i146]);
            }
            iprot->readListEnd();
          }
          this->__isset.double_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->string_list.clear();
            uint32_t _size147;
            apache::thrift::protocol::TType _etype150;
            iprot->readListBegin(_etype150, _size147);
            this->string_list.resize(_size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              xfer += iprot->readString(this->string_list[_i151]);
            }
            iprot->readListEnd();
          }
          this->__isset.string_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->binary_list.clear();
            uint32_t _size152;
            apache::thrift::protocol::TType _etype155;
            iprot->readListBegin(_etype155, _size152);
            this->binary_list.resize(_size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              xfer += iprot->readBinary(this->binary_list[_i156]);
            }
            iprot->readListEnd();
          }
          this->__isset.binary_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->boolean_list.clear();
            uint32_t _size157;
            apache::thrift::protocol::TType _etype160;
            iprot->readListBegin(_etype160, _size157);
            this->boolean_list.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += iprot->readBool(this->boolean_list[_i161]);
            }
            iprot->readListEnd();
          }
          this->__isset.boolean_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size162;
            apache::thrift::protocol::TType _etype165;
            iprot->readListBegin(_etype165, _size162);
            this->struct_list.resize(_size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              xfer += this->struct_list[_i166].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->byte_set.clear();
            uint32_t _size167;
            apache::thrift::protocol::TType _etype170;
            iprot->readSetBegin(_etype170, _size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              int8_t _elem172;
              xfer += iprot->readByte(_elem172);
              this->byte_set.insert(_elem172);
            }
            iprot->readSetEnd();
          }
          this->__isset.byte_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i16_set.clear();
            uint32_t _size173;
            apache::thrift::protocol::TType _etype176;
            iprot->readSetBegin(_etype176, _size173);
            uint32_t _i177;
            for (_i177 = 0; _i177 < _size173; ++_i177)
            {
              int16_t _elem178;
              xfer += iprot->readI16(_elem178);
              this->i16_set.insert(_elem178);
            }
            iprot->readSetEnd();
          }
          this->__isset.i16_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size179;
            apache::thrift::protocol::TType _etype182;
            iprot->readSetBegin(_etype182, _size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              int32_t _elem184;
              xfer += iprot->readI32(_elem184);
              this->i32_set.insert(_elem184);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i64_set.clear();
            uint32_t _size185;
            apache::thrift::protocol::TType _etype188;
            iprot->readSetBegin(_etype188, _size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              int64_t _elem190;
              xfer += iprot->readI64(_elem190);
              this->i64_set.insert(_elem190);
            }
            iprot->readSetEnd();
          }
          this->__isset.i64_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->double_set.clear();
            uint32_t _size191;
            apache::thrift::protocol::TType _etype194;
            iprot->readSetBegin(_etype194, _size191);
            uint32_t _i195;
            for (_i195 = 0; _i195 < _size191; ++_i195)
            {
              double _elem196;
              xfer += iprot->readDouble(_elem196);
              this->double_set.insert(_elem196);
            }
            iprot->readSetEnd();
          }
          this->__isset.double_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->string_set.clear();
            uint32_t _size197;
            apache::thrift::protocol::TType _etype200;
            iprot->readSetBegin(_etype200, _size197);
            uint32_t _i201;
            for (_i201 = 0; _i201 < _size197; ++_i201)
            {
              std::string _elem202;
              xfer += iprot->readString(_elem202);
              this->string_set.insert(_elem202);
            }
            iprot->readSetEnd();
          }
          this->__isset.string_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->binary_set.clear();
            uint32_t _size203;
            apache::thrift::protocol::TType _etype206;
            iprot->readSetBegin(_etype206, _size203);
            uint32_t _i207;
            for (_i207 = 0; _i207 < _size203; ++_i207)
            {
              std::string _elem208;
              xfer += iprot->readBinary(_elem208);
              this->binary_set.insert(_elem208);
            }
            iprot->readSetEnd();
          }
          this->__isset.binary_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->boolean_set.clear();
            uint32_t _size209;
            apache::thrift::protocol::TType _etype212;
            iprot->readSetBegin(_etype212, _size209);
            uint32_t _i213;
            for (_i213 = 0; _i213 < _size209; ++_i213)
            {
              bool _elem214;
              xfer += iprot->readBool(_elem214);
              this->boolean_set.insert(_elem214);
            }
            iprot->readSetEnd();
          }
          this->__isset.boolean_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->struct_set.clear();
            uint32_t _size215;
            apache::thrift::protocol::TType _etype218;
            iprot->readSetBegin(_etype218, _size215);
            uint32_t _i219;
            for (_i219 = 0; _i219 < _size215; ++_i219)
            {
              Empty _elem220;
              xfer += _elem220.read(iprot);
              this->struct_set.insert(_elem220);
            }
            iprot->readSetEnd();
          }
          this->__isset.struct_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_byte_map.clear();
            uint32_t _size221;
            apache::thrift::protocol::TType _ktype222;
            apache::thrift::protocol::TType _vtype223;
            iprot->readMapBegin(_ktype222, _vtype223, _size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              int8_t _key226;
              xfer += iprot->readByte(_key226);
              int8_t& _val227 = this->byte_byte_map[_key226];
              xfer += iprot->readByte(_val227);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i16_byte_map.clear();
            uint32_t _size228;
            apache::thrift::protocol::TType _ktype229;
            apache::thrift::protocol::TType _vtype230;
            iprot->readMapBegin(_ktype229, _vtype230, _size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              int16_t _key233;
              xfer += iprot->readI16(_key233);
              int8_t& _val234 = this->i16_byte_map[_key233];
              xfer += iprot->readByte(_val234);
            }
            iprot->readMapEnd();
          }
          this->__isset.i16_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i32_byte_map.clear();
            uint32_t _size235;
            apache::thrift::protocol::TType _ktype236;
            apache::thrift::protocol::TType _vtype237;
            iprot->readMapBegin(_ktype236, _vtype237, _size235);
            uint32_t _i239;
            for (_i239 = 0; _i239 < _size235; ++_i239)
            {
              int32_t _key240;
              xfer += iprot->readI32(_key240);
              int8_t& _val241 = this->i32_byte_map[_key240];
              xfer += iprot->readByte(_val241);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i64_byte_map.clear();
            uint32_t _size242;
            apache::thrift::protocol::TType _ktype243;
            apache::thrift::protocol::TType _vtype244;
            iprot->readMapBegin(_ktype243, _vtype244, _size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              int64_t _key247;
              xfer += iprot->readI64(_key247);
              int8_t& _val248 = this->i64_byte_map[_key247];
              xfer += iprot->readByte(_val248);
            }
            iprot->readMapEnd();
          }
          this->__isset.i64_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->double_byte_map.clear();
            uint32_t _size249;
            apache::thrift::protocol::TType _ktype250;
            apache::thrift::protocol::TType _vtype251;
            iprot->readMapBegin(_ktype250, _vtype251, _size249);
            uint32_t _i253;
            for (_i253 = 0; _i253 < _size249; ++_i253)
            {
              double _key254;
              xfer += iprot->readDouble(_key254);
              int8_t& _val255 = this->double_byte_map[_key254];
              xfer += iprot->readByte(_val255);
            }
            iprot->readMapEnd();
          }
          this->__isset.double_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->string_byte_map.clear();
            uint32_t _size256;
            apache::thrift::protocol::TType _ktype257;
            apache::thrift::protocol::TType _vtype258;
            iprot->readMapBegin(_ktype257, _vtype258, _size256);
            uint32_t _i260;
            for (_i260 = 0; _i260 < _size256; ++_i260)
            {
              std::string _key261;
              xfer += iprot->readString(_key261);
              int8_t& _val262 = this->string_byte_map[_key261];
              xfer += iprot->readByte(_val262);
            }
            iprot->readMapEnd();
          }
          this->__isset.string_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->binary_byte_map.clear();
            uint32_t _size263;
            apache::thrift::protocol::TType _ktype264;
            apache::thrift::protocol::TType _vtype265;
            iprot->readMapBegin(_ktype264, _vtype265, _size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              std::string _key268;
              xfer += iprot->readBinary(_key268);
              int8_t& _val269 = this->binary_byte_map[_key268];
              xfer += iprot->readByte(_val269);
            }
            iprot->readMapEnd();
          }
          this->__isset.binary_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->boolean_byte_map.clear();
            uint32_t _size270;
            apache::thrift::protocol::TType _ktype271;
            apache::thrift::protocol::TType _vtype272;
            iprot->readMapBegin(_ktype271, _vtype272, _size270);
            uint32_t _i274;
            for (_i274 = 0; _i274 < _size270; ++_i274)
            {
              bool _key275;
              xfer += iprot->readBool(_key275);
              int8_t& _val276 = this->boolean_byte_map[_key275];
              xfer += iprot->readByte(_val276);
            }
            iprot->readMapEnd();
          }
          this->__isset.boolean_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i16_map.clear();
            uint32_t _size277;
            apache::thrift::protocol::TType _ktype278;
            apache::thrift::protocol::TType _vtype279;
            iprot->readMapBegin(_ktype278, _vtype279, _size277);
            uint32_t _i281;
            for (_i281 = 0; _i281 < _size277; ++_i281)
            {
              int8_t _key282;
              xfer += iprot->readByte(_key282);
              int16_t& _val283 = this->byte_i16_map[_key282];
              xfer += iprot->readI16(_val283);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i16_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i32_map.clear();
            uint32_t _size284;
            apache::thrift::protocol::TType _ktype285;
            apache::thrift::protocol::TType _vtype286;
            iprot->readMapBegin(_ktype285, _vtype286, _size284);
            uint32_t _i288;
            for (_i288 = 0; _i288 < _size284; ++_i288)
            {
              int8_t _key289;
              xfer += iprot->readByte(_key289);
              int32_t& _val290 = this->byte_i32_map[_key289];
              xfer += iprot->readI32(_val290);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i64_map.clear();
            uint32_t _size291;
            apache::thrift::protocol::TType _ktype292;
            apache::thrift::protocol::TType _vtype293;
            iprot->readMapBegin(_ktype292, _vtype293, _size291);
            uint32_t _i295;
            for (_i295 = 0; _i295 < _size291; ++_i295)
            {
              int8_t _key296;
              xfer += iprot->readByte(_key296);
              int64_t& _val297 = this->byte_i64_map[_key296];
              xfer += iprot->readI64(_val297);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i64_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_double_map.clear();
            uint32_t _size298;
            apache::thrift::protocol::TType _ktype299;
            apache::thrift::protocol::TType _vtype300;
            iprot->readMapBegin(_ktype299, _vtype300, _size298);
            uint32_t _i302;
            for (_i302 = 0; _i302 < _size298; ++_i302)
            {
              int8_t _key303;
              xfer += iprot->readByte(_key303);
              double& _val304 = this->byte_double_map[_key303];
              xfer += iprot->readDouble(_val304);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_double_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_string_map.clear();
            uint32_t _size305;
            apache::thrift::protocol::TType _ktype306;
            apache::thrift::protocol::TType _vtype307;
            iprot->readMapBegin(_ktype306, _vtype307, _size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              int8_t _key310;
              xfer += iprot->readByte(_key310);
              std::string& _val311 = this->byte_string_map[_key310];
              xfer += iprot->readString(_val311);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_string_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_binary_map.clear();
            uint32_t _size312;
            apache::thrift::protocol::TType _ktype313;
            apache::thrift::protocol::TType _vtype314;
            iprot->readMapBegin(_ktype313, _vtype314, _size312);
            uint32_t _i316;
            for (_i316 = 0; _i316 < _size312; ++_i316)
            {
              int8_t _key317;
              xfer += iprot->readByte(_key317);
              std::string& _val318 = this->byte_binary_map[_key317];
              xfer += iprot->readBinary(_val318);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_binary_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_boolean_map.clear();
            uint32_t _size319;
            apache::thrift::protocol::TType _ktype320;
            apache::thrift::protocol::TType _vtype321;
            iprot->readMapBegin(_ktype320, _vtype321, _size319);
            uint32_t _i323;
            for (_i323 = 0; _i323 < _size319; ++_i323)
            {
              int8_t _key324;
              xfer += iprot->readByte(_key324);
              bool& _val325 = this->byte_boolean_map[_key324];
              xfer += iprot->readBool(_val325);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_boolean_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->list_byte_map.clear();
            uint32_t _size326;
            apache::thrift::protocol::TType _ktype327;
            apache::thrift::protocol::TType _vtype328;
            iprot->readMapBegin(_ktype327, _vtype328, _size326);
            uint32_t _i330;
            for (_i330 = 0; _i330 < _size326; ++_i330)
            {
              std::vector<int8_t>  _key331;
              {
                _key331.clear();
                uint32_t _size333;
                apache::thrift::protocol::TType _etype336;
                iprot->readListBegin(_etype336, _size333);
                _key331.resize(_size333);
                uint32_t _i337;
                for (_i337 = 0; _i337 < _size333; ++_i337)
                {
                  xfer += iprot->readByte(_key331[_i337]);
                }
                iprot->readListEnd();
              }
              int8_t& _val332 = this->list_byte_map[_key331];
              xfer += iprot->readByte(_val332);
            }
            iprot->readMapEnd();
          }
          this->__isset.list_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->set_byte_map.clear();
            uint32_t _size338;
            apache::thrift::protocol::TType _ktype339;
            apache::thrift::protocol::TType _vtype340;
            iprot->readMapBegin(_ktype339, _vtype340, _size338);
            uint32_t _i342;
            for (_i342 = 0; _i342 < _size338; ++_i342)
            {
              std::set<int8_t>  _key343;
              {
                _key343.clear();
                uint32_t _size345;
                apache::thrift::protocol::TType _etype348;
                iprot->readSetBegin(_etype348, _size345);
                uint32_t _i349;
                for (_i349 = 0; _i349 < _size345; ++_i349)
                {
                  int8_t _elem350;
                  xfer += iprot->readByte(_elem350);
                  _key343.insert(_elem350);
                }
                iprot->readSetEnd();
              }
              int8_t& _val344 = this->set_byte_map[_key343];
              xfer += iprot->readByte(_val344);
            }
            iprot->readMapEnd();
          }
          this->__isset.set_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->map_byte_map.clear();
            uint32_t _size351;
            apache::thrift::protocol::TType _ktype352;
            apache::thrift::protocol::TType _vtype353;
            iprot->readMapBegin(_ktype352, _vtype353, _size351);
            uint32_t _i355;
            for (_i355 = 0; _i355 < _size351; ++_i355)
            {
              std::map<int8_t, int8_t>  _key356;
              {
                _key356.clear();
                uint32_t _size358;
                apache::thrift::protocol::TType _ktype359;
                apache::thrift::protocol::TType _vtype360;
                iprot->readMapBegin(_ktype359, _vtype360, _size358);
                uint32_t _i362;
                for (_i362 = 0; _i362 < _size358; ++_i362)
                {
                  int8_t _key363;
                  xfer += iprot->readByte(_key363);
                  int8_t& _val364 = _key356[_key363];
                  xfer += iprot->readByte(_val364);
                }
                iprot->readMapEnd();
              }
              int8_t& _val357 = this->map_byte_map[_key356];
              xfer += iprot->readByte(_val357);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_map_map.clear();
            uint32_t _size365;
            apache::thrift::protocol::TType _ktype366;
            apache::thrift::protocol::TType _vtype367;
            iprot->readMapBegin(_ktype366, _vtype367, _size365);
            uint32_t _i369;
            for (_i369 = 0; _i369 < _size365; ++_i369)
            {
              int8_t _key370;
              xfer += iprot->readByte(_key370);
              std::map<int8_t, int8_t> & _val371 = this->byte_map_map[_key370];
              {
                _val371.clear();
                uint32_t _size372;
                apache::thrift::protocol::TType _ktype373;
                apache::thrift::protocol::TType _vtype374;
                iprot->readMapBegin(_ktype373, _vtype374, _size372);
                uint32_t _i376;
                for (_i376 = 0; _i376 < _size372; ++_i376)
                {
                  int8_t _key377;
                  xfer += iprot->readByte(_key377);
                  int8_t& _val378 = _val371[_key377];
                  xfer += iprot->readByte(_val378);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_map_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_set_map.clear();
            uint32_t _size379;
            apache::thrift::protocol::TType _ktype380;
            apache::thrift::protocol::TType _vtype381;
            iprot->readMapBegin(_ktype380, _vtype381, _size379);
            uint32_t _i383;
            for (_i383 = 0; _i383 < _size379; ++_i383)
            {
              int8_t _key384;
              xfer += iprot->readByte(_key384);
              std::set<int8_t> & _val385 = this->byte_set_map[_key384];
              {
                _val385.clear();
                uint32_t _size386;
                apache::thrift::protocol::TType _etype389;
                iprot->readSetBegin(_etype389, _size386);
                uint32_t _i390;
                for (_i390 = 0; _i390 < _size386; ++_i390)
                {
                  int8_t _elem391;
                  xfer += iprot->readByte(_elem391);
                  _val385.insert(_elem391);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_set_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_list_map.clear();
            uint32_t _size392;
            apache::thrift::protocol::TType _ktype393;
            apache::thrift::protocol::TType _vtype394;
            iprot->readMapBegin(_ktype393, _vtype394, _size392);
            uint32_t _i396;
            for (_i396 = 0; _i396 < _size392; ++_i396)
            {
              int8_t _key397;
              xfer += iprot->readByte(_key397);
              std::vector<int8_t> & _val398 = this->byte_list_map[_key397];
              {
                _val398.clear();
                uint32_t _size399;
                apache::thrift::protocol::TType _etype402;
                iprot->readListBegin(_etype402, _size399);
                _val398.resize(_size399);
                uint32_t _i403;
                for (_i403 = 0; _i403 < _size399; ++_i403)
                {
                  xfer += iprot->readByte(_val398[_i403]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_list_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactProtoTestStruct::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompactProtoTestStruct");
  xfer += oprot->writeFieldBegin("a_byte", apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->a_byte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i16", apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->a_i16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i32", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->a_i32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i64", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->a_i64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_double", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a_double);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_string", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->a_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_binary", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->a_binary);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("true_field", apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->true_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("false_field", apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->false_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("empty_struct_field", apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->empty_struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter404;
    for (_iter404 = this->byte_list.begin(); _iter404 != this->byte_list.end(); ++_iter404)
    {
      xfer += oprot->writeByte((*_iter404));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter405;
    for (_iter405 = this->i16_list.begin(); _iter405 != this->i16_list.end(); ++_iter405)
    {
      xfer += oprot->writeI16((*_iter405));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->i32_list.size());
    std::vector<int32_t> ::const_iterator _iter406;
    for (_iter406 = this->i32_list.begin(); _iter406 != this->i32_list.end(); ++_iter406)
    {
      xfer += oprot->writeI32((*_iter406));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter407;
    for (_iter407 = this->i64_list.begin(); _iter407 != this->i64_list.end(); ++_iter407)
    {
      xfer += oprot->writeI64((*_iter407));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_list", apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->double_list.size());
    std::vector<double> ::const_iterator _iter408;
    for (_iter408 = this->double_list.begin(); _iter408 != this->double_list.end(); ++_iter408)
    {
      xfer += oprot->writeDouble((*_iter408));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_list", apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->string_list.size());
    std::vector<std::string> ::const_iterator _iter409;
    for (_iter409 = this->string_list.begin(); _iter409 != this->string_list.end(); ++_iter409)
    {
      xfer += oprot->writeString((*_iter409));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_list", apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->binary_list.size());
    std::vector<std::string> ::const_iterator _iter410;
    for (_iter410 = this->binary_list.begin(); _iter410 != this->binary_list.end(); ++_iter410)
    {
      xfer += oprot->writeBinary((*_iter410));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_list", apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BOOL, this->boolean_list.size());
    std::vector<bool> ::const_iterator _iter411;
    for (_iter411 = this->boolean_list.begin(); _iter411 != this->boolean_list.end(); ++_iter411)
    {
      xfer += oprot->writeBool((*_iter411));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<Empty> ::const_iterator _iter412;
    for (_iter412 = this->struct_list.begin(); _iter412 != this->struct_list.end(); ++_iter412)
    {
      xfer += (*_iter412).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set", apache::thrift::protocol::T_SET, 20);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, this->byte_set.size());
    std::set<int8_t> ::const_iterator _iter413;
    for (_iter413 = this->byte_set.begin(); _iter413 != this->byte_set.end(); ++_iter413)
    {
      xfer += oprot->writeByte((*_iter413));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_set", apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I16, this->i16_set.size());
    std::set<int16_t> ::const_iterator _iter414;
    for (_iter414 = this->i16_set.begin(); _iter414 != this->i16_set.end(); ++_iter414)
    {
      xfer += oprot->writeI16((*_iter414));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", apache::thrift::protocol::T_SET, 22);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I32, this->i32_set.size());
    std::set<int32_t> ::const_iterator _iter415;
    for (_iter415 = this->i32_set.begin(); _iter415 != this->i32_set.end(); ++_iter415)
    {
      xfer += oprot->writeI32((*_iter415));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_set", apache::thrift::protocol::T_SET, 23);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I64, this->i64_set.size());
    std::set<int64_t> ::const_iterator _iter416;
    for (_iter416 = this->i64_set.begin(); _iter416 != this->i64_set.end(); ++_iter416)
    {
      xfer += oprot->writeI64((*_iter416));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_set", apache::thrift::protocol::T_SET, 24);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_DOUBLE, this->double_set.size());
    std::set<double> ::const_iterator _iter417;
    for (_iter417 = this->double_set.begin(); _iter417 != this->double_set.end(); ++_iter417)
    {
      xfer += oprot->writeDouble((*_iter417));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_set", apache::thrift::protocol::T_SET, 25);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->string_set.size());
    std::set<std::string> ::const_iterator _iter418;
    for (_iter418 = this->string_set.begin(); _iter418 != this->string_set.end(); ++_iter418)
    {
      xfer += oprot->writeString((*_iter418));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_set", apache::thrift::protocol::T_SET, 26);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->binary_set.size());
    std::set<std::string> ::const_iterator _iter419;
    for (_iter419 = this->binary_set.begin(); _iter419 != this->binary_set.end(); ++_iter419)
    {
      xfer += oprot->writeBinary((*_iter419));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_set", apache::thrift::protocol::T_SET, 27);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BOOL, this->boolean_set.size());
    std::set<bool> ::const_iterator _iter420;
    for (_iter420 = this->boolean_set.begin(); _iter420 != this->boolean_set.end(); ++_iter420)
    {
      xfer += oprot->writeBool((*_iter420));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_set", apache::thrift::protocol::T_SET, 28);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->struct_set.size());
    std::set<Empty> ::const_iterator _iter421;
    for (_iter421 = this->struct_set.begin(); _iter421 != this->struct_set.end(); ++_iter421)
    {
      xfer += (*_iter421).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_byte_map", apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->byte_byte_map.size());
    std::map<int8_t, int8_t> ::const_iterator _iter422;
    for (_iter422 = this->byte_byte_map.begin(); _iter422 != this->byte_byte_map.end(); ++_iter422)
    {
      xfer += oprot->writeByte(_iter422->first);
      xfer += oprot->writeByte(_iter422->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_byte_map", apache::thrift::protocol::T_MAP, 30);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_BYTE, this->i16_byte_map.size());
    std::map<int16_t, int8_t> ::const_iterator _iter423;
    for (_iter423 = this->i16_byte_map.begin(); _iter423 != this->i16_byte_map.end(); ++_iter423)
    {
      xfer += oprot->writeI16(_iter423->first);
      xfer += oprot->writeByte(_iter423->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_byte_map", apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->i32_byte_map.size());
    std::map<int32_t, int8_t> ::const_iterator _iter424;
    for (_iter424 = this->i32_byte_map.begin(); _iter424 != this->i32_byte_map.end(); ++_iter424)
    {
      xfer += oprot->writeI32(_iter424->first);
      xfer += oprot->writeByte(_iter424->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_byte_map", apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_BYTE, this->i64_byte_map.size());
    std::map<int64_t, int8_t> ::const_iterator _iter425;
    for (_iter425 = this->i64_byte_map.begin(); _iter425 != this->i64_byte_map.end(); ++_iter425)
    {
      xfer += oprot->writeI64(_iter425->first);
      xfer += oprot->writeByte(_iter425->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_byte_map", apache::thrift::protocol::T_MAP, 33);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_BYTE, this->double_byte_map.size());
    std::map<double, int8_t> ::const_iterator _iter426;
    for (_iter426 = this->double_byte_map.begin(); _iter426 != this->double_byte_map.end(); ++_iter426)
    {
      xfer += oprot->writeDouble(_iter426->first);
      xfer += oprot->writeByte(_iter426->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_byte_map", apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->string_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter427;
    for (_iter427 = this->string_byte_map.begin(); _iter427 != this->string_byte_map.end(); ++_iter427)
    {
      xfer += oprot->writeString(_iter427->first);
      xfer += oprot->writeByte(_iter427->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_byte_map", apache::thrift::protocol::T_MAP, 35);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->binary_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter428;
    for (_iter428 = this->binary_byte_map.begin(); _iter428 != this->binary_byte_map.end(); ++_iter428)
    {
      xfer += oprot->writeBinary(_iter428->first);
      xfer += oprot->writeByte(_iter428->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_byte_map", apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->boolean_byte_map.size());
    std::map<bool, int8_t> ::const_iterator _iter429;
    for (_iter429 = this->boolean_byte_map.begin(); _iter429 != this->boolean_byte_map.end(); ++_iter429)
    {
      xfer += oprot->writeBool(_iter429->first);
      xfer += oprot->writeByte(_iter429->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i16_map", apache::thrift::protocol::T_MAP, 37);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I16, this->byte_i16_map.size());
    std::map<int8_t, int16_t> ::const_iterator _iter430;
    for (_iter430 = this->byte_i16_map.begin(); _iter430 != this->byte_i16_map.end(); ++_iter430)
    {
      xfer += oprot->writeByte(_iter430->first);
      xfer += oprot->writeI16(_iter430->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i32_map", apache::thrift::protocol::T_MAP, 38);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I32, this->byte_i32_map.size());
    std::map<int8_t, int32_t> ::const_iterator _iter431;
    for (_iter431 = this->byte_i32_map.begin(); _iter431 != this->byte_i32_map.end(); ++_iter431)
    {
      xfer += oprot->writeByte(_iter431->first);
      xfer += oprot->writeI32(_iter431->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i64_map", apache::thrift::protocol::T_MAP, 39);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I64, this->byte_i64_map.size());
    std::map<int8_t, int64_t> ::const_iterator _iter432;
    for (_iter432 = this->byte_i64_map.begin(); _iter432 != this->byte_i64_map.end(); ++_iter432)
    {
      xfer += oprot->writeByte(_iter432->first);
      xfer += oprot->writeI64(_iter432->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_double_map", apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_DOUBLE, this->byte_double_map.size());
    std::map<int8_t, double> ::const_iterator _iter433;
    for (_iter433 = this->byte_double_map.begin(); _iter433 != this->byte_double_map.end(); ++_iter433)
    {
      xfer += oprot->writeByte(_iter433->first);
      xfer += oprot->writeDouble(_iter433->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_string_map", apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_string_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter434;
    for (_iter434 = this->byte_string_map.begin(); _iter434 != this->byte_string_map.end(); ++_iter434)
    {
      xfer += oprot->writeByte(_iter434->first);
      xfer += oprot->writeString(_iter434->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_binary_map", apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_binary_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter435;
    for (_iter435 = this->byte_binary_map.begin(); _iter435 != this->byte_binary_map.end(); ++_iter435)
    {
      xfer += oprot->writeByte(_iter435->first);
      xfer += oprot->writeBinary(_iter435->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_boolean_map", apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->byte_boolean_map.size());
    std::map<int8_t, bool> ::const_iterator _iter436;
    for (_iter436 = this->byte_boolean_map.begin(); _iter436 != this->byte_boolean_map.end(); ++_iter436)
    {
      xfer += oprot->writeByte(_iter436->first);
      xfer += oprot->writeBool(_iter436->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("list_byte_map", apache::thrift::protocol::T_MAP, 44);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BYTE, this->list_byte_map.size());
    std::map<std::vector<int8_t> , int8_t> ::const_iterator _iter437;
    for (_iter437 = this->list_byte_map.begin(); _iter437 != this->list_byte_map.end(); ++_iter437)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter437->first.size());
        std::vector<int8_t> ::const_iterator _iter438;
        for (_iter438 = _iter437->first.begin(); _iter438 != _iter437->first.end(); ++_iter438)
        {
          xfer += oprot->writeByte((*_iter438));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeByte(_iter437->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("set_byte_map", apache::thrift::protocol::T_MAP, 45);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_BYTE, this->set_byte_map.size());
    std::map<std::set<int8_t> , int8_t> ::const_iterator _iter439;
    for (_iter439 = this->set_byte_map.begin(); _iter439 != this->set_byte_map.end(); ++_iter439)
    {
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter439->first.size());
        std::set<int8_t> ::const_iterator _iter440;
        for (_iter440 = _iter439->first.begin(); _iter440 != _iter439->first.end(); ++_iter440)
        {
          xfer += oprot->writeByte((*_iter440));
        }
        xfer += oprot->writeSetEnd();
      }
      xfer += oprot->writeByte(_iter439->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_byte_map", apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_BYTE, this->map_byte_map.size());
    std::map<std::map<int8_t, int8_t> , int8_t> ::const_iterator _iter441;
    for (_iter441 = this->map_byte_map.begin(); _iter441 != this->map_byte_map.end(); ++_iter441)
    {
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter441->first.size());
        std::map<int8_t, int8_t> ::const_iterator _iter442;
        for (_iter442 = _iter441->first.begin(); _iter442 != _iter441->first.end(); ++_iter442)
        {
          xfer += oprot->writeByte(_iter442->first);
          xfer += oprot->writeByte(_iter442->second);
        }
        xfer += oprot->writeMapEnd();
      }
      xfer += oprot->writeByte(_iter441->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_map_map", apache::thrift::protocol::T_MAP, 47);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->byte_map_map.size());
    std::map<int8_t, std::map<int8_t, int8_t> > ::const_iterator _iter443;
    for (_iter443 = this->byte_map_map.begin(); _iter443 != this->byte_map_map.end(); ++_iter443)
    {
      xfer += oprot->writeByte(_iter443->first);
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter443->second.size());
        std::map<int8_t, int8_t> ::const_iterator _iter444;
        for (_iter444 = _iter443->second.begin(); _iter444 != _iter443->second.end(); ++_iter444)
        {
          xfer += oprot->writeByte(_iter444->first);
          xfer += oprot->writeByte(_iter444->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set_map", apache::thrift::protocol::T_MAP, 48);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_SET, this->byte_set_map.size());
    std::map<int8_t, std::set<int8_t> > ::const_iterator _iter445;
    for (_iter445 = this->byte_set_map.begin(); _iter445 != this->byte_set_map.end(); ++_iter445)
    {
      xfer += oprot->writeByte(_iter445->first);
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter445->second.size());
        std::set<int8_t> ::const_iterator _iter446;
        for (_iter446 = _iter445->second.begin(); _iter446 != _iter445->second.end(); ++_iter446)
        {
          xfer += oprot->writeByte((*_iter446));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list_map", apache::thrift::protocol::T_MAP, 49);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_LIST, this->byte_list_map.size());
    std::map<int8_t, std::vector<int8_t> > ::const_iterator _iter447;
    for (_iter447 = this->byte_list_map.begin(); _iter447 != this->byte_list_map.end(); ++_iter447)
    {
      xfer += oprot->writeByte(_iter447->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter447->second.size());
        std::vector<int8_t> ::const_iterator _iter448;
        for (_iter448 = _iter447->second.begin(); _iter448 != _iter447->second.end(); ++_iter448)
        {
          xfer += oprot->writeByte((*_iter448));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlowUp::ascii_fingerprint = "C31E40A0D0B3CC76A374729E31FB848F";
const uint8_t BlowUp::binary_fingerprint[16] = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

// map<i32,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// set<map<i32,string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// map<list<i32>,set<map<i32,string>>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F(
  apache::thrift::protocol::T_STRUCT,
  BlowUp::binary_fingerprint,
  trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F,
  trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F);

apache::thrift::reflection::local::TypeSpec* BlowUp::local_reflection = 
  &trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

uint32_t BlowUp::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b1.clear();
            uint32_t _size449;
            apache::thrift::protocol::TType _ktype450;
            apache::thrift::protocol::TType _vtype451;
            iprot->readMapBegin(_ktype450, _vtype451, _size449);
            uint32_t _i453;
            for (_i453 = 0; _i453 < _size449; ++_i453)
            {
              std::vector<int32_t>  _key454;
              {
                _key454.clear();
                uint32_t _size456;
                apache::thrift::protocol::TType _etype459;
                iprot->readListBegin(_etype459, _size456);
                _key454.resize(_size456);
                uint32_t _i460;
                for (_i460 = 0; _i460 < _size456; ++_i460)
                {
                  xfer += iprot->readI32(_key454[_i460]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val455 = this->b1[_key454];
              {
                _val455.clear();
                uint32_t _size461;
                apache::thrift::protocol::TType _etype464;
                iprot->readSetBegin(_etype464, _size461);
                uint32_t _i465;
                for (_i465 = 0; _i465 < _size461; ++_i465)
                {
                  std::map<int32_t, std::string>  _elem466;
                  {
                    _elem466.clear();
                    uint32_t _size467;
                    apache::thrift::protocol::TType _ktype468;
                    apache::thrift::protocol::TType _vtype469;
                    iprot->readMapBegin(_ktype468, _vtype469, _size467);
                    uint32_t _i471;
                    for (_i471 = 0; _i471 < _size467; ++_i471)
                    {
                      int32_t _key472;
                      xfer += iprot->readI32(_key472);
                      std::string& _val473 = _elem466[_key472];
                      xfer += iprot->readString(_val473);
                    }
                    iprot->readMapEnd();
                  }
                  _val455.insert(_elem466);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b2.clear();
            uint32_t _size474;
            apache::thrift::protocol::TType _ktype475;
            apache::thrift::protocol::TType _vtype476;
            iprot->readMapBegin(_ktype475, _vtype476, _size474);
            uint32_t _i478;
            for (_i478 = 0; _i478 < _size474; ++_i478)
            {
              std::vector<int32_t>  _key479;
              {
                _key479.clear();
                uint32_t _size481;
                apache::thrift::protocol::TType _etype484;
                iprot->readListBegin(_etype484, _size481);
                _key479.resize(_size481);
                uint32_t _i485;
                for (_i485 = 0; _i485 < _size481; ++_i485)
                {
                  xfer += iprot->readI32(_key479[_i485]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val480 = this->b2[_key479];
              {
                _val480.clear();
                uint32_t _size486;
                apache::thrift::protocol::TType _etype489;
                iprot->readSetBegin(_etype489, _size486);
                uint32_t _i490;
                for (_i490 = 0; _i490 < _size486; ++_i490)
                {
                  std::map<int32_t, std::string>  _elem491;
                  {
                    _elem491.clear();
                    uint32_t _size492;
                    apache::thrift::protocol::TType _ktype493;
                    apache::thrift::protocol::TType _vtype494;
                    iprot->readMapBegin(_ktype493, _vtype494, _size492);
                    uint32_t _i496;
                    for (_i496 = 0; _i496 < _size492; ++_i496)
                    {
                      int32_t _key497;
                      xfer += iprot->readI32(_key497);
                      std::string& _val498 = _elem491[_key497];
                      xfer += iprot->readString(_val498);
                    }
                    iprot->readMapEnd();
                  }
                  _val480.insert(_elem491);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b3.clear();
            uint32_t _size499;
            apache::thrift::protocol::TType _ktype500;
            apache::thrift::protocol::TType _vtype501;
            iprot->readMapBegin(_ktype500, _vtype501, _size499);
            uint32_t _i503;
            for (_i503 = 0; _i503 < _size499; ++_i503)
            {
              std::vector<int32_t>  _key504;
              {
                _key504.clear();
                uint32_t _size506;
                apache::thrift::protocol::TType _etype509;
                iprot->readListBegin(_etype509, _size506);
                _key504.resize(_size506);
                uint32_t _i510;
                for (_i510 = 0; _i510 < _size506; ++_i510)
                {
                  xfer += iprot->readI32(_key504[_i510]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val505 = this->b3[_key504];
              {
                _val505.clear();
                uint32_t _size511;
                apache::thrift::protocol::TType _etype514;
                iprot->readSetBegin(_etype514, _size511);
                uint32_t _i515;
                for (_i515 = 0; _i515 < _size511; ++_i515)
                {
                  std::map<int32_t, std::string>  _elem516;
                  {
                    _elem516.clear();
                    uint32_t _size517;
                    apache::thrift::protocol::TType _ktype518;
                    apache::thrift::protocol::TType _vtype519;
                    iprot->readMapBegin(_ktype518, _vtype519, _size517);
                    uint32_t _i521;
                    for (_i521 = 0; _i521 < _size517; ++_i521)
                    {
                      int32_t _key522;
                      xfer += iprot->readI32(_key522);
                      std::string& _val523 = _elem516[_key522];
                      xfer += iprot->readString(_val523);
                    }
                    iprot->readMapEnd();
                  }
                  _val505.insert(_elem516);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b4.clear();
            uint32_t _size524;
            apache::thrift::protocol::TType _ktype525;
            apache::thrift::protocol::TType _vtype526;
            iprot->readMapBegin(_ktype525, _vtype526, _size524);
            uint32_t _i528;
            for (_i528 = 0; _i528 < _size524; ++_i528)
            {
              std::vector<int32_t>  _key529;
              {
                _key529.clear();
                uint32_t _size531;
                apache::thrift::protocol::TType _etype534;
                iprot->readListBegin(_etype534, _size531);
                _key529.resize(_size531);
                uint32_t _i535;
                for (_i535 = 0; _i535 < _size531; ++_i535)
                {
                  xfer += iprot->readI32(_key529[_i535]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val530 = this->b4[_key529];
              {
                _val530.clear();
                uint32_t _size536;
                apache::thrift::protocol::TType _etype539;
                iprot->readSetBegin(_etype539, _size536);
                uint32_t _i540;
                for (_i540 = 0; _i540 < _size536; ++_i540)
                {
                  std::map<int32_t, std::string>  _elem541;
                  {
                    _elem541.clear();
                    uint32_t _size542;
                    apache::thrift::protocol::TType _ktype543;
                    apache::thrift::protocol::TType _vtype544;
                    iprot->readMapBegin(_ktype543, _vtype544, _size542);
                    uint32_t _i546;
                    for (_i546 = 0; _i546 < _size542; ++_i546)
                    {
                      int32_t _key547;
                      xfer += iprot->readI32(_key547);
                      std::string& _val548 = _elem541[_key547];
                      xfer += iprot->readString(_val548);
                    }
                    iprot->readMapEnd();
                  }
                  _val530.insert(_elem541);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlowUp::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlowUp");
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b1.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter549;
    for (_iter549 = this->b1.begin(); _iter549 != this->b1.end(); ++_iter549)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter549->first.size());
        std::vector<int32_t> ::const_iterator _iter550;
        for (_iter550 = _iter549->first.begin(); _iter550 != _iter549->first.end(); ++_iter550)
        {
          xfer += oprot->writeI32((*_iter550));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter549->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter551;
        for (_iter551 = _iter549->second.begin(); _iter551 != _iter549->second.end(); ++_iter551)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter551).size());
            std::map<int32_t, std::string> ::const_iterator _iter552;
            for (_iter552 = (*_iter551).begin(); _iter552 != (*_iter551).end(); ++_iter552)
            {
              xfer += oprot->writeI32(_iter552->first);
              xfer += oprot->writeString(_iter552->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b2.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter553;
    for (_iter553 = this->b2.begin(); _iter553 != this->b2.end(); ++_iter553)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter553->first.size());
        std::vector<int32_t> ::const_iterator _iter554;
        for (_iter554 = _iter553->first.begin(); _iter554 != _iter553->first.end(); ++_iter554)
        {
          xfer += oprot->writeI32((*_iter554));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter553->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter555;
        for (_iter555 = _iter553->second.begin(); _iter555 != _iter553->second.end(); ++_iter555)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter555).size());
            std::map<int32_t, std::string> ::const_iterator _iter556;
            for (_iter556 = (*_iter555).begin(); _iter556 != (*_iter555).end(); ++_iter556)
            {
              xfer += oprot->writeI32(_iter556->first);
              xfer += oprot->writeString(_iter556->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b3.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter557;
    for (_iter557 = this->b3.begin(); _iter557 != this->b3.end(); ++_iter557)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter557->first.size());
        std::vector<int32_t> ::const_iterator _iter558;
        for (_iter558 = _iter557->first.begin(); _iter558 != _iter557->first.end(); ++_iter558)
        {
          xfer += oprot->writeI32((*_iter558));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter557->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter559;
        for (_iter559 = _iter557->second.begin(); _iter559 != _iter557->second.end(); ++_iter559)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter559).size());
            std::map<int32_t, std::string> ::const_iterator _iter560;
            for (_iter560 = (*_iter559).begin(); _iter560 != (*_iter559).end(); ++_iter560)
            {
              xfer += oprot->writeI32(_iter560->first);
              xfer += oprot->writeString(_iter560->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b4.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter561;
    for (_iter561 = this->b4.begin(); _iter561 != this->b4.end(); ++_iter561)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter561->first.size());
        std::vector<int32_t> ::const_iterator _iter562;
        for (_iter562 = _iter561->first.begin(); _iter562 != _iter561->first.end(); ++_iter562)
        {
          xfer += oprot->writeI32((*_iter562));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter561->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter563;
        for (_iter563 = _iter561->second.begin(); _iter563 != _iter561->second.end(); ++_iter563)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter563).size());
            std::map<int32_t, std::string> ::const_iterator _iter564;
            for (_iter564 = (*_iter563).begin(); _iter564 != (*_iter563).end(); ++_iter564)
            {
              xfer += oprot->writeI32(_iter564->first);
              xfer += oprot->writeString(_iter564->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
