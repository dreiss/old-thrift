/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "DebugProtoTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test { namespace debug {

// enum
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778(
  ::apache::thrift::protocol::T_I32);

const char* Doubles::ascii_fingerprint = "4B056EA3B3FB01EC41613CEB91B54CE5";
const uint8_t Doubles::binary_fingerprint[16] = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

// double
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0(
  ::apache::thrift::protocol::T_DOUBLE);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5(
  ::apache::thrift::protocol::T_STRUCT,
  Doubles::binary_fingerprint,
  trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5,
  trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5);

::apache::thrift::reflection::local::TypeSpec* Doubles::local_reflection = 
  &trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

uint32_t Doubles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nan);
          this->__isset.nan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inf);
          this->__isset.inf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->neginf);
          this->__isset.neginf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->repeating);
          this->__isset.repeating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->big);
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->small);
          this->__isset.small = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zero);
          this->__isset.zero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->negzero);
          this->__isset.negzero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Doubles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Doubles");
  xfer += oprot->writeFieldBegin("nan", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nan);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inf", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("neginf", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->neginf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("repeating", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->repeating);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->big);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->small);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zero", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("negzero", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->negzero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneOfEach::ascii_fingerprint = "DF7CE78394886179BFAFDB65C5A708BC";
const uint8_t OneOfEach::binary_fingerprint[16] = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

// bool
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305(
  ::apache::thrift::protocol::T_BOOL);

// byte
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091(
  ::apache::thrift::protocol::T_BYTE);

// i16
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  ::apache::thrift::protocol::T_I16);

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

// i64
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44(
  ::apache::thrift::protocol::T_I64);

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// list<byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// list<i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// list<i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC(
  ::apache::thrift::protocol::T_STRUCT,
  OneOfEach::binary_fingerprint,
  trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC);

::apache::thrift::reflection::local::TypeSpec* OneOfEach::local_reflection = 
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

uint32_t OneOfEach::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_bite);
          this->__isset.a_bite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->integer16);
          this->__isset.integer16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->integer32);
          this->__isset.integer32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->integer64);
          this->__isset.integer64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_precision);
          this->__isset.double_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->some_characters);
          this->__isset.some_characters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zomg_unicode);
          this->__isset.zomg_unicode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->what_who);
          this->__isset.what_who = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->base64);
          this->__isset.base64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            iprot->readListBegin(_etype61, _size58);
            this->byte_list.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += iprot->readByte(this->byte_list[_i62]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _etype66;
            iprot->readListBegin(_etype66, _size63);
            this->i16_list.resize(_size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              xfer += iprot->readI16(this->i16_list[_i67]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            iprot->readListBegin(_etype71, _size68);
            this->i64_list.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += iprot->readI64(this->i64_list[_i72]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneOfEach::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneOfEach");
  xfer += oprot->writeFieldBegin("im_true", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_bite", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->a_bite);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->integer16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->integer32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer64", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->integer64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_precision", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->double_precision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("some_characters", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->some_characters);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zomg_unicode", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->zomg_unicode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("what_who", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->what_who);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base64", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeBinary(this->base64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter73;
    for (_iter73 = this->byte_list.begin(); _iter73 != this->byte_list.end(); ++_iter73)
    {
      xfer += oprot->writeByte((*_iter73));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter74;
    for (_iter74 = this->i16_list.begin(); _iter74 != this->i16_list.end(); ++_iter74)
    {
      xfer += oprot->writeI16((*_iter74));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter75;
    for (_iter75 = this->i64_list.begin(); _iter75 != this->i64_list.end(); ++_iter75)
    {
      xfer += oprot->writeI64((*_iter75));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bonk::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Bonk::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3(
  ::apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3);

::apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Bonk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nesting::ascii_fingerprint = "9D961D015265DA7A88BA69FB2A7ACDA9";
const uint8_t Nesting::binary_fingerprint[16] = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9(
  ::apache::thrift::protocol::T_STRUCT,
  Nesting::binary_fingerprint,
  trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9,
  trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9);

::apache::thrift::reflection::local::TypeSpec* Nesting::local_reflection = 
  &trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

uint32_t Nesting::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_bonk.read(iprot);
          this->__isset.my_bonk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_ooe.read(iprot);
          this->__isset.my_ooe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nesting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nesting");
  xfer += oprot->writeFieldBegin("my_bonk", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->my_bonk.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("my_ooe", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->my_ooe.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HolyMoley::ascii_fingerprint = "63B6C93A44D5393BB40AF7623EA1919F";
const uint8_t HolyMoley::binary_fingerprint[16] = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  NULL);

// list<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<list<string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  NULL);

// list<{1:i32;2:string;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  NULL);

// map<string,list<{1:i32;2:string;}>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  &trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A,
  &trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F,
  &trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F(
  ::apache::thrift::protocol::T_STRUCT,
  HolyMoley::binary_fingerprint,
  trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F,
  trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F);

::apache::thrift::reflection::local::TypeSpec* HolyMoley::local_reflection = 
  &trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

uint32_t HolyMoley::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->big.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            iprot->readListBegin(_etype79, _size76);
            this->big.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += this->big[_i80].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->contain.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            iprot->readSetBegin(_etype84, _size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              std::vector<std::string>  _elem86;
              {
                _elem86.clear();
                uint32_t _size87;
                ::apache::thrift::protocol::TType _etype90;
                iprot->readListBegin(_etype90, _size87);
                _elem86.resize(_size87);
                uint32_t _i91;
                for (_i91 = 0; _i91 < _size87; ++_i91)
                {
                  xfer += iprot->readString(_elem86[_i91]);
                }
                iprot->readListEnd();
              }
              this->contain.insert(_elem86);
            }
            iprot->readSetEnd();
          }
          this->__isset.contain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bonks.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _ktype93;
            ::apache::thrift::protocol::TType _vtype94;
            iprot->readMapBegin(_ktype93, _vtype94, _size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              std::string _key97;
              xfer += iprot->readString(_key97);
              std::vector<Bonk> & _val98 = this->bonks[_key97];
              {
                _val98.clear();
                uint32_t _size99;
                ::apache::thrift::protocol::TType _etype102;
                iprot->readListBegin(_etype102, _size99);
                _val98.resize(_size99);
                uint32_t _i103;
                for (_i103 = 0; _i103 < _size99; ++_i103)
                {
                  xfer += _val98[_i103].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.bonks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HolyMoley::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HolyMoley");
  xfer += oprot->writeFieldBegin("big", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->big.size());
    std::vector<OneOfEach> ::const_iterator _iter104;
    for (_iter104 = this->big.begin(); _iter104 != this->big.end(); ++_iter104)
    {
      xfer += (*_iter104).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contain", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_LIST, this->contain.size());
    std::set<std::vector<std::string> > ::const_iterator _iter105;
    for (_iter105 = this->contain.begin(); _iter105 != this->contain.end(); ++_iter105)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*_iter105).size());
        std::vector<std::string> ::const_iterator _iter106;
        for (_iter106 = (*_iter105).begin(); _iter106 != (*_iter105).end(); ++_iter106)
        {
          xfer += oprot->writeString((*_iter106));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bonks", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, this->bonks.size());
    std::map<std::string, std::vector<Bonk> > ::const_iterator _iter107;
    for (_iter107 = this->bonks.begin(); _iter107 != this->bonks.end(); ++_iter107)
    {
      xfer += oprot->writeString(_iter107->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, _iter107->second.size());
        std::vector<Bonk> ::const_iterator _iter108;
        for (_iter108 = _iter107->second.begin(); _iter108 != _iter107->second.end(); ++_iter108)
        {
          xfer += (*_iter108).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Backwards::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t Backwards::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3(
  ::apache::thrift::protocol::T_STRUCT,
  Backwards::binary_fingerprint,
  trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3);

::apache::thrift::reflection::local::TypeSpec* Backwards::local_reflection = 
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3;

uint32_t Backwards::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_tag2);
          this->__isset.first_tag2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_tag1);
          this->__isset.second_tag1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Backwards::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Backwards");
  xfer += oprot->writeFieldBegin("second_tag1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->second_tag1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first_tag2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_tag2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Empty::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Empty::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B(
  ::apache::thrift::protocol::T_STRUCT,
  Empty::binary_fingerprint,
  trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B);

::apache::thrift::reflection::local::TypeSpec* Empty::local_reflection = 
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t Empty::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Empty");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Wrapper::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t Wrapper::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD(
  ::apache::thrift::protocol::T_STRUCT,
  Wrapper::binary_fingerprint,
  trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

::apache::thrift::reflection::local::TypeSpec* Wrapper::local_reflection = 
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

uint32_t Wrapper::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->foo.read(iprot);
          this->__isset.foo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wrapper::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Wrapper");
  xfer += oprot->writeFieldBegin("foo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->foo.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RandomStuff::ascii_fingerprint = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
const uint8_t RandomStuff::binary_fingerprint[16] = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

// list<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,{1:{};}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE(
  ::apache::thrift::protocol::T_STRUCT,
  RandomStuff::binary_fingerprint,
  trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE);

::apache::thrift::reflection::local::TypeSpec* RandomStuff::local_reflection = 
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

uint32_t RandomStuff::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->myintlist.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            iprot->readListBegin(_etype112, _size109);
            this->myintlist.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              xfer += iprot->readI32(this->myintlist[_i113]);
            }
            iprot->readListEnd();
          }
          this->__isset.myintlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->maps.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _ktype115;
            ::apache::thrift::protocol::TType _vtype116;
            iprot->readMapBegin(_ktype115, _vtype116, _size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              int32_t _key119;
              xfer += iprot->readI32(_key119);
              Wrapper& _val120 = this->maps[_key119];
              xfer += _val120.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bigint);
          this->__isset.bigint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->triple);
          this->__isset.triple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RandomStuff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RandomStuff");
  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("myintlist", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->myintlist.size());
    std::vector<int32_t> ::const_iterator _iter121;
    for (_iter121 = this->myintlist.begin(); _iter121 != this->myintlist.end(); ++_iter121)
    {
      xfer += oprot->writeI32((*_iter121));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maps", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, this->maps.size());
    std::map<int32_t, Wrapper> ::const_iterator _iter122;
    for (_iter122 = this->maps.begin(); _iter122 != this->maps.end(); ++_iter122)
    {
      xfer += oprot->writeI32(_iter122->first);
      xfer += _iter122->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bigint", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->bigint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("triple", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->triple);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Base64::ascii_fingerprint = "D6983CD9C5C18EAC36C957E4BED331AE";
const uint8_t Base64::binary_fingerprint[16] = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE(
  ::apache::thrift::protocol::T_STRUCT,
  Base64::binary_fingerprint,
  trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE,
  trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE);

::apache::thrift::reflection::local::TypeSpec* Base64::local_reflection = 
  &trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

uint32_t Base64::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b1);
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b2);
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b3);
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b4);
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b5);
          this->__isset.b5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b6);
          this->__isset.b6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base64::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Base64");
  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b1", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->b1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->b2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->b3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->b4);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b5", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->b5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b6", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->b6);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CompactProtoTestStruct::ascii_fingerprint = "FECB06442E1E082EBF36FB8CB75EB414";
const uint8_t CompactProtoTestStruct::binary_fingerprint[16] = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

// list<double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// list<bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// list<{}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// set<byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// set<i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// set<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// set<i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

// set<double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// set<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// set<{}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// map<byte,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i16,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i32,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i64,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<double,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<string,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<bool,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5);

// map<byte,i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

// map<byte,i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44);

// map<byte,double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0);

// map<byte,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// map<byte,bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305);

// map<list<byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<set<byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<map<byte,byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,map<byte,byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C);

// map<byte,set<byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485);

// map<byte,list<byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 15, false },
  { 16, false },
  { 17, false },
  { 18, false },
  { 19, false },
  { 20, false },
  { 21, false },
  { 22, false },
  { 23, false },
  { 24, false },
  { 25, false },
  { 26, false },
  { 27, false },
  { 28, false },
  { 29, false },
  { 30, false },
  { 31, false },
  { 32, false },
  { 33, false },
  { 34, false },
  { 35, false },
  { 36, false },
  { 37, false },
  { 38, false },
  { 39, false },
  { 40, false },
  { 41, false },
  { 42, false },
  { 43, false },
  { 44, false },
  { 45, false },
  { 46, false },
  { 47, false },
  { 48, false },
  { 49, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645,
  &trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569,
  &trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F,
  &trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758,
  &trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A,
  &trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451,
  &trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC,
  &trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373,
  &trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9,
  &trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD,
  &trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF,
  &trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2,
  &trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36,
  &trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2,
  &trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82,
  &trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21,
  &trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414(
  ::apache::thrift::protocol::T_STRUCT,
  CompactProtoTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414,
  trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414);

::apache::thrift::reflection::local::TypeSpec* CompactProtoTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

uint32_t CompactProtoTestStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_byte);
          this->__isset.a_byte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->a_i16);
          this->__isset.a_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a_i32);
          this->__isset.a_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->a_i64);
          this->__isset.a_i64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_double);
          this->__isset.a_double = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_string);
          this->__isset.a_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->a_binary);
          this->__isset.a_binary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->true_field);
          this->__isset.true_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->false_field);
          this->__isset.false_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->empty_struct_field.read(iprot);
          this->__isset.empty_struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _etype126;
            iprot->readListBegin(_etype126, _size123);
            this->byte_list.resize(_size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              xfer += iprot->readByte(this->byte_list[_i127]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            iprot->readListBegin(_etype131, _size128);
            this->i16_list.resize(_size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              xfer += iprot->readI16(this->i16_list[_i132]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i32_list.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            iprot->readListBegin(_etype136, _size133);
            this->i32_list.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += iprot->readI32(this->i32_list[_i137]);
            }
            iprot->readListEnd();
          }
          this->__isset.i32_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            iprot->readListBegin(_etype141, _size138);
            this->i64_list.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += iprot->readI64(this->i64_list[_i142]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->double_list.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            iprot->readListBegin(_etype146, _size143);
            this->double_list.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += iprot->readDouble(this->double_list[_i147]);
            }
            iprot->readListEnd();
          }
          this->__isset.double_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->string_list.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            iprot->readListBegin(_etype151, _size148);
            this->string_list.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              xfer += iprot->readString(this->string_list[_i152]);
            }
            iprot->readListEnd();
          }
          this->__isset.string_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binary_list.clear();
            uint32_t _size153;
            ::apache::thrift::protocol::TType _etype156;
            iprot->readListBegin(_etype156, _size153);
            this->binary_list.resize(_size153);
            uint32_t _i157;
            for (_i157 = 0; _i157 < _size153; ++_i157)
            {
              xfer += iprot->readBinary(this->binary_list[_i157]);
            }
            iprot->readListEnd();
          }
          this->__isset.binary_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->boolean_list.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            iprot->readListBegin(_etype161, _size158);
            this->boolean_list.resize(_size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              xfer += iprot->readBool(this->boolean_list[_i162]);
            }
            iprot->readListEnd();
          }
          this->__isset.boolean_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _etype166;
            iprot->readListBegin(_etype166, _size163);
            this->struct_list.resize(_size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              xfer += this->struct_list[_i167].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->byte_set.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _etype171;
            iprot->readSetBegin(_etype171, _size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              int8_t _elem173;
              xfer += iprot->readByte(_elem173);
              this->byte_set.insert(_elem173);
            }
            iprot->readSetEnd();
          }
          this->__isset.byte_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i16_set.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            iprot->readSetBegin(_etype177, _size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              int16_t _elem179;
              xfer += iprot->readI16(_elem179);
              this->i16_set.insert(_elem179);
            }
            iprot->readSetEnd();
          }
          this->__isset.i16_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size180;
            ::apache::thrift::protocol::TType _etype183;
            iprot->readSetBegin(_etype183, _size180);
            uint32_t _i184;
            for (_i184 = 0; _i184 < _size180; ++_i184)
            {
              int32_t _elem185;
              xfer += iprot->readI32(_elem185);
              this->i32_set.insert(_elem185);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i64_set.clear();
            uint32_t _size186;
            ::apache::thrift::protocol::TType _etype189;
            iprot->readSetBegin(_etype189, _size186);
            uint32_t _i190;
            for (_i190 = 0; _i190 < _size186; ++_i190)
            {
              int64_t _elem191;
              xfer += iprot->readI64(_elem191);
              this->i64_set.insert(_elem191);
            }
            iprot->readSetEnd();
          }
          this->__isset.i64_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->double_set.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            iprot->readSetBegin(_etype195, _size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              double _elem197;
              xfer += iprot->readDouble(_elem197);
              this->double_set.insert(_elem197);
            }
            iprot->readSetEnd();
          }
          this->__isset.double_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->string_set.clear();
            uint32_t _size198;
            ::apache::thrift::protocol::TType _etype201;
            iprot->readSetBegin(_etype201, _size198);
            uint32_t _i202;
            for (_i202 = 0; _i202 < _size198; ++_i202)
            {
              std::string _elem203;
              xfer += iprot->readString(_elem203);
              this->string_set.insert(_elem203);
            }
            iprot->readSetEnd();
          }
          this->__isset.string_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->binary_set.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _etype207;
            iprot->readSetBegin(_etype207, _size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              std::string _elem209;
              xfer += iprot->readBinary(_elem209);
              this->binary_set.insert(_elem209);
            }
            iprot->readSetEnd();
          }
          this->__isset.binary_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->boolean_set.clear();
            uint32_t _size210;
            ::apache::thrift::protocol::TType _etype213;
            iprot->readSetBegin(_etype213, _size210);
            uint32_t _i214;
            for (_i214 = 0; _i214 < _size210; ++_i214)
            {
              bool _elem215;
              xfer += iprot->readBool(_elem215);
              this->boolean_set.insert(_elem215);
            }
            iprot->readSetEnd();
          }
          this->__isset.boolean_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->struct_set.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            iprot->readSetBegin(_etype219, _size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              Empty _elem221;
              xfer += _elem221.read(iprot);
              this->struct_set.insert(_elem221);
            }
            iprot->readSetEnd();
          }
          this->__isset.struct_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_byte_map.clear();
            uint32_t _size222;
            ::apache::thrift::protocol::TType _ktype223;
            ::apache::thrift::protocol::TType _vtype224;
            iprot->readMapBegin(_ktype223, _vtype224, _size222);
            uint32_t _i226;
            for (_i226 = 0; _i226 < _size222; ++_i226)
            {
              int8_t _key227;
              xfer += iprot->readByte(_key227);
              int8_t& _val228 = this->byte_byte_map[_key227];
              xfer += iprot->readByte(_val228);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i16_byte_map.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _ktype230;
            ::apache::thrift::protocol::TType _vtype231;
            iprot->readMapBegin(_ktype230, _vtype231, _size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              int16_t _key234;
              xfer += iprot->readI16(_key234);
              int8_t& _val235 = this->i16_byte_map[_key234];
              xfer += iprot->readByte(_val235);
            }
            iprot->readMapEnd();
          }
          this->__isset.i16_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i32_byte_map.clear();
            uint32_t _size236;
            ::apache::thrift::protocol::TType _ktype237;
            ::apache::thrift::protocol::TType _vtype238;
            iprot->readMapBegin(_ktype237, _vtype238, _size236);
            uint32_t _i240;
            for (_i240 = 0; _i240 < _size236; ++_i240)
            {
              int32_t _key241;
              xfer += iprot->readI32(_key241);
              int8_t& _val242 = this->i32_byte_map[_key241];
              xfer += iprot->readByte(_val242);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i64_byte_map.clear();
            uint32_t _size243;
            ::apache::thrift::protocol::TType _ktype244;
            ::apache::thrift::protocol::TType _vtype245;
            iprot->readMapBegin(_ktype244, _vtype245, _size243);
            uint32_t _i247;
            for (_i247 = 0; _i247 < _size243; ++_i247)
            {
              int64_t _key248;
              xfer += iprot->readI64(_key248);
              int8_t& _val249 = this->i64_byte_map[_key248];
              xfer += iprot->readByte(_val249);
            }
            iprot->readMapEnd();
          }
          this->__isset.i64_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->double_byte_map.clear();
            uint32_t _size250;
            ::apache::thrift::protocol::TType _ktype251;
            ::apache::thrift::protocol::TType _vtype252;
            iprot->readMapBegin(_ktype251, _vtype252, _size250);
            uint32_t _i254;
            for (_i254 = 0; _i254 < _size250; ++_i254)
            {
              double _key255;
              xfer += iprot->readDouble(_key255);
              int8_t& _val256 = this->double_byte_map[_key255];
              xfer += iprot->readByte(_val256);
            }
            iprot->readMapEnd();
          }
          this->__isset.double_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->string_byte_map.clear();
            uint32_t _size257;
            ::apache::thrift::protocol::TType _ktype258;
            ::apache::thrift::protocol::TType _vtype259;
            iprot->readMapBegin(_ktype258, _vtype259, _size257);
            uint32_t _i261;
            for (_i261 = 0; _i261 < _size257; ++_i261)
            {
              std::string _key262;
              xfer += iprot->readString(_key262);
              int8_t& _val263 = this->string_byte_map[_key262];
              xfer += iprot->readByte(_val263);
            }
            iprot->readMapEnd();
          }
          this->__isset.string_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->binary_byte_map.clear();
            uint32_t _size264;
            ::apache::thrift::protocol::TType _ktype265;
            ::apache::thrift::protocol::TType _vtype266;
            iprot->readMapBegin(_ktype265, _vtype266, _size264);
            uint32_t _i268;
            for (_i268 = 0; _i268 < _size264; ++_i268)
            {
              std::string _key269;
              xfer += iprot->readBinary(_key269);
              int8_t& _val270 = this->binary_byte_map[_key269];
              xfer += iprot->readByte(_val270);
            }
            iprot->readMapEnd();
          }
          this->__isset.binary_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->boolean_byte_map.clear();
            uint32_t _size271;
            ::apache::thrift::protocol::TType _ktype272;
            ::apache::thrift::protocol::TType _vtype273;
            iprot->readMapBegin(_ktype272, _vtype273, _size271);
            uint32_t _i275;
            for (_i275 = 0; _i275 < _size271; ++_i275)
            {
              bool _key276;
              xfer += iprot->readBool(_key276);
              int8_t& _val277 = this->boolean_byte_map[_key276];
              xfer += iprot->readByte(_val277);
            }
            iprot->readMapEnd();
          }
          this->__isset.boolean_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i16_map.clear();
            uint32_t _size278;
            ::apache::thrift::protocol::TType _ktype279;
            ::apache::thrift::protocol::TType _vtype280;
            iprot->readMapBegin(_ktype279, _vtype280, _size278);
            uint32_t _i282;
            for (_i282 = 0; _i282 < _size278; ++_i282)
            {
              int8_t _key283;
              xfer += iprot->readByte(_key283);
              int16_t& _val284 = this->byte_i16_map[_key283];
              xfer += iprot->readI16(_val284);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i16_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i32_map.clear();
            uint32_t _size285;
            ::apache::thrift::protocol::TType _ktype286;
            ::apache::thrift::protocol::TType _vtype287;
            iprot->readMapBegin(_ktype286, _vtype287, _size285);
            uint32_t _i289;
            for (_i289 = 0; _i289 < _size285; ++_i289)
            {
              int8_t _key290;
              xfer += iprot->readByte(_key290);
              int32_t& _val291 = this->byte_i32_map[_key290];
              xfer += iprot->readI32(_val291);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i64_map.clear();
            uint32_t _size292;
            ::apache::thrift::protocol::TType _ktype293;
            ::apache::thrift::protocol::TType _vtype294;
            iprot->readMapBegin(_ktype293, _vtype294, _size292);
            uint32_t _i296;
            for (_i296 = 0; _i296 < _size292; ++_i296)
            {
              int8_t _key297;
              xfer += iprot->readByte(_key297);
              int64_t& _val298 = this->byte_i64_map[_key297];
              xfer += iprot->readI64(_val298);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i64_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_double_map.clear();
            uint32_t _size299;
            ::apache::thrift::protocol::TType _ktype300;
            ::apache::thrift::protocol::TType _vtype301;
            iprot->readMapBegin(_ktype300, _vtype301, _size299);
            uint32_t _i303;
            for (_i303 = 0; _i303 < _size299; ++_i303)
            {
              int8_t _key304;
              xfer += iprot->readByte(_key304);
              double& _val305 = this->byte_double_map[_key304];
              xfer += iprot->readDouble(_val305);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_double_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_string_map.clear();
            uint32_t _size306;
            ::apache::thrift::protocol::TType _ktype307;
            ::apache::thrift::protocol::TType _vtype308;
            iprot->readMapBegin(_ktype307, _vtype308, _size306);
            uint32_t _i310;
            for (_i310 = 0; _i310 < _size306; ++_i310)
            {
              int8_t _key311;
              xfer += iprot->readByte(_key311);
              std::string& _val312 = this->byte_string_map[_key311];
              xfer += iprot->readString(_val312);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_string_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_binary_map.clear();
            uint32_t _size313;
            ::apache::thrift::protocol::TType _ktype314;
            ::apache::thrift::protocol::TType _vtype315;
            iprot->readMapBegin(_ktype314, _vtype315, _size313);
            uint32_t _i317;
            for (_i317 = 0; _i317 < _size313; ++_i317)
            {
              int8_t _key318;
              xfer += iprot->readByte(_key318);
              std::string& _val319 = this->byte_binary_map[_key318];
              xfer += iprot->readBinary(_val319);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_binary_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_boolean_map.clear();
            uint32_t _size320;
            ::apache::thrift::protocol::TType _ktype321;
            ::apache::thrift::protocol::TType _vtype322;
            iprot->readMapBegin(_ktype321, _vtype322, _size320);
            uint32_t _i324;
            for (_i324 = 0; _i324 < _size320; ++_i324)
            {
              int8_t _key325;
              xfer += iprot->readByte(_key325);
              bool& _val326 = this->byte_boolean_map[_key325];
              xfer += iprot->readBool(_val326);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_boolean_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->list_byte_map.clear();
            uint32_t _size327;
            ::apache::thrift::protocol::TType _ktype328;
            ::apache::thrift::protocol::TType _vtype329;
            iprot->readMapBegin(_ktype328, _vtype329, _size327);
            uint32_t _i331;
            for (_i331 = 0; _i331 < _size327; ++_i331)
            {
              std::vector<int8_t>  _key332;
              {
                _key332.clear();
                uint32_t _size334;
                ::apache::thrift::protocol::TType _etype337;
                iprot->readListBegin(_etype337, _size334);
                _key332.resize(_size334);
                uint32_t _i338;
                for (_i338 = 0; _i338 < _size334; ++_i338)
                {
                  xfer += iprot->readByte(_key332[_i338]);
                }
                iprot->readListEnd();
              }
              int8_t& _val333 = this->list_byte_map[_key332];
              xfer += iprot->readByte(_val333);
            }
            iprot->readMapEnd();
          }
          this->__isset.list_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->set_byte_map.clear();
            uint32_t _size339;
            ::apache::thrift::protocol::TType _ktype340;
            ::apache::thrift::protocol::TType _vtype341;
            iprot->readMapBegin(_ktype340, _vtype341, _size339);
            uint32_t _i343;
            for (_i343 = 0; _i343 < _size339; ++_i343)
            {
              std::set<int8_t>  _key344;
              {
                _key344.clear();
                uint32_t _size346;
                ::apache::thrift::protocol::TType _etype349;
                iprot->readSetBegin(_etype349, _size346);
                uint32_t _i350;
                for (_i350 = 0; _i350 < _size346; ++_i350)
                {
                  int8_t _elem351;
                  xfer += iprot->readByte(_elem351);
                  _key344.insert(_elem351);
                }
                iprot->readSetEnd();
              }
              int8_t& _val345 = this->set_byte_map[_key344];
              xfer += iprot->readByte(_val345);
            }
            iprot->readMapEnd();
          }
          this->__isset.set_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->map_byte_map.clear();
            uint32_t _size352;
            ::apache::thrift::protocol::TType _ktype353;
            ::apache::thrift::protocol::TType _vtype354;
            iprot->readMapBegin(_ktype353, _vtype354, _size352);
            uint32_t _i356;
            for (_i356 = 0; _i356 < _size352; ++_i356)
            {
              std::map<int8_t, int8_t>  _key357;
              {
                _key357.clear();
                uint32_t _size359;
                ::apache::thrift::protocol::TType _ktype360;
                ::apache::thrift::protocol::TType _vtype361;
                iprot->readMapBegin(_ktype360, _vtype361, _size359);
                uint32_t _i363;
                for (_i363 = 0; _i363 < _size359; ++_i363)
                {
                  int8_t _key364;
                  xfer += iprot->readByte(_key364);
                  int8_t& _val365 = _key357[_key364];
                  xfer += iprot->readByte(_val365);
                }
                iprot->readMapEnd();
              }
              int8_t& _val358 = this->map_byte_map[_key357];
              xfer += iprot->readByte(_val358);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_map_map.clear();
            uint32_t _size366;
            ::apache::thrift::protocol::TType _ktype367;
            ::apache::thrift::protocol::TType _vtype368;
            iprot->readMapBegin(_ktype367, _vtype368, _size366);
            uint32_t _i370;
            for (_i370 = 0; _i370 < _size366; ++_i370)
            {
              int8_t _key371;
              xfer += iprot->readByte(_key371);
              std::map<int8_t, int8_t> & _val372 = this->byte_map_map[_key371];
              {
                _val372.clear();
                uint32_t _size373;
                ::apache::thrift::protocol::TType _ktype374;
                ::apache::thrift::protocol::TType _vtype375;
                iprot->readMapBegin(_ktype374, _vtype375, _size373);
                uint32_t _i377;
                for (_i377 = 0; _i377 < _size373; ++_i377)
                {
                  int8_t _key378;
                  xfer += iprot->readByte(_key378);
                  int8_t& _val379 = _val372[_key378];
                  xfer += iprot->readByte(_val379);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_map_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_set_map.clear();
            uint32_t _size380;
            ::apache::thrift::protocol::TType _ktype381;
            ::apache::thrift::protocol::TType _vtype382;
            iprot->readMapBegin(_ktype381, _vtype382, _size380);
            uint32_t _i384;
            for (_i384 = 0; _i384 < _size380; ++_i384)
            {
              int8_t _key385;
              xfer += iprot->readByte(_key385);
              std::set<int8_t> & _val386 = this->byte_set_map[_key385];
              {
                _val386.clear();
                uint32_t _size387;
                ::apache::thrift::protocol::TType _etype390;
                iprot->readSetBegin(_etype390, _size387);
                uint32_t _i391;
                for (_i391 = 0; _i391 < _size387; ++_i391)
                {
                  int8_t _elem392;
                  xfer += iprot->readByte(_elem392);
                  _val386.insert(_elem392);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_set_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_list_map.clear();
            uint32_t _size393;
            ::apache::thrift::protocol::TType _ktype394;
            ::apache::thrift::protocol::TType _vtype395;
            iprot->readMapBegin(_ktype394, _vtype395, _size393);
            uint32_t _i397;
            for (_i397 = 0; _i397 < _size393; ++_i397)
            {
              int8_t _key398;
              xfer += iprot->readByte(_key398);
              std::vector<int8_t> & _val399 = this->byte_list_map[_key398];
              {
                _val399.clear();
                uint32_t _size400;
                ::apache::thrift::protocol::TType _etype403;
                iprot->readListBegin(_etype403, _size400);
                _val399.resize(_size400);
                uint32_t _i404;
                for (_i404 = 0; _i404 < _size400; ++_i404)
                {
                  xfer += iprot->readByte(_val399[_i404]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_list_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactProtoTestStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompactProtoTestStruct");
  xfer += oprot->writeFieldBegin("a_byte", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->a_byte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i16", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->a_i16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i32", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->a_i32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i64", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->a_i64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_double", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a_double);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_string", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->a_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_binary", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->a_binary);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("true_field", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->true_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("false_field", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->false_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("empty_struct_field", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->empty_struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter405;
    for (_iter405 = this->byte_list.begin(); _iter405 != this->byte_list.end(); ++_iter405)
    {
      xfer += oprot->writeByte((*_iter405));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter406;
    for (_iter406 = this->i16_list.begin(); _iter406 != this->i16_list.end(); ++_iter406)
    {
      xfer += oprot->writeI16((*_iter406));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_list", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->i32_list.size());
    std::vector<int32_t> ::const_iterator _iter407;
    for (_iter407 = this->i32_list.begin(); _iter407 != this->i32_list.end(); ++_iter407)
    {
      xfer += oprot->writeI32((*_iter407));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter408;
    for (_iter408 = this->i64_list.begin(); _iter408 != this->i64_list.end(); ++_iter408)
    {
      xfer += oprot->writeI64((*_iter408));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_list", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, this->double_list.size());
    std::vector<double> ::const_iterator _iter409;
    for (_iter409 = this->double_list.begin(); _iter409 != this->double_list.end(); ++_iter409)
    {
      xfer += oprot->writeDouble((*_iter409));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_list", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->string_list.size());
    std::vector<std::string> ::const_iterator _iter410;
    for (_iter410 = this->string_list.begin(); _iter410 != this->string_list.end(); ++_iter410)
    {
      xfer += oprot->writeString((*_iter410));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_list", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->binary_list.size());
    std::vector<std::string> ::const_iterator _iter411;
    for (_iter411 = this->binary_list.begin(); _iter411 != this->binary_list.end(); ++_iter411)
    {
      xfer += oprot->writeBinary((*_iter411));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_list", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, this->boolean_list.size());
    std::vector<bool> ::const_iterator _iter412;
    for (_iter412 = this->boolean_list.begin(); _iter412 != this->boolean_list.end(); ++_iter412)
    {
      xfer += oprot->writeBool((*_iter412));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<Empty> ::const_iterator _iter413;
    for (_iter413 = this->struct_list.begin(); _iter413 != this->struct_list.end(); ++_iter413)
    {
      xfer += (*_iter413).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set", ::apache::thrift::protocol::T_SET, 20);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, this->byte_set.size());
    std::set<int8_t> ::const_iterator _iter414;
    for (_iter414 = this->byte_set.begin(); _iter414 != this->byte_set.end(); ++_iter414)
    {
      xfer += oprot->writeByte((*_iter414));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_set", ::apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I16, this->i16_set.size());
    std::set<int16_t> ::const_iterator _iter415;
    for (_iter415 = this->i16_set.begin(); _iter415 != this->i16_set.end(); ++_iter415)
    {
      xfer += oprot->writeI16((*_iter415));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", ::apache::thrift::protocol::T_SET, 22);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, this->i32_set.size());
    std::set<int32_t> ::const_iterator _iter416;
    for (_iter416 = this->i32_set.begin(); _iter416 != this->i32_set.end(); ++_iter416)
    {
      xfer += oprot->writeI32((*_iter416));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_set", ::apache::thrift::protocol::T_SET, 23);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, this->i64_set.size());
    std::set<int64_t> ::const_iterator _iter417;
    for (_iter417 = this->i64_set.begin(); _iter417 != this->i64_set.end(); ++_iter417)
    {
      xfer += oprot->writeI64((*_iter417));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_set", ::apache::thrift::protocol::T_SET, 24);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_DOUBLE, this->double_set.size());
    std::set<double> ::const_iterator _iter418;
    for (_iter418 = this->double_set.begin(); _iter418 != this->double_set.end(); ++_iter418)
    {
      xfer += oprot->writeDouble((*_iter418));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_set", ::apache::thrift::protocol::T_SET, 25);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, this->string_set.size());
    std::set<std::string> ::const_iterator _iter419;
    for (_iter419 = this->string_set.begin(); _iter419 != this->string_set.end(); ++_iter419)
    {
      xfer += oprot->writeString((*_iter419));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_set", ::apache::thrift::protocol::T_SET, 26);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, this->binary_set.size());
    std::set<std::string> ::const_iterator _iter420;
    for (_iter420 = this->binary_set.begin(); _iter420 != this->binary_set.end(); ++_iter420)
    {
      xfer += oprot->writeBinary((*_iter420));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_set", ::apache::thrift::protocol::T_SET, 27);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BOOL, this->boolean_set.size());
    std::set<bool> ::const_iterator _iter421;
    for (_iter421 = this->boolean_set.begin(); _iter421 != this->boolean_set.end(); ++_iter421)
    {
      xfer += oprot->writeBool((*_iter421));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_set", ::apache::thrift::protocol::T_SET, 28);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, this->struct_set.size());
    std::set<Empty> ::const_iterator _iter422;
    for (_iter422 = this->struct_set.begin(); _iter422 != this->struct_set.end(); ++_iter422)
    {
      xfer += (*_iter422).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_byte_map", ::apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, this->byte_byte_map.size());
    std::map<int8_t, int8_t> ::const_iterator _iter423;
    for (_iter423 = this->byte_byte_map.begin(); _iter423 != this->byte_byte_map.end(); ++_iter423)
    {
      xfer += oprot->writeByte(_iter423->first);
      xfer += oprot->writeByte(_iter423->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_byte_map", ::apache::thrift::protocol::T_MAP, 30);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I16, ::apache::thrift::protocol::T_BYTE, this->i16_byte_map.size());
    std::map<int16_t, int8_t> ::const_iterator _iter424;
    for (_iter424 = this->i16_byte_map.begin(); _iter424 != this->i16_byte_map.end(); ++_iter424)
    {
      xfer += oprot->writeI16(_iter424->first);
      xfer += oprot->writeByte(_iter424->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_byte_map", ::apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_BYTE, this->i32_byte_map.size());
    std::map<int32_t, int8_t> ::const_iterator _iter425;
    for (_iter425 = this->i32_byte_map.begin(); _iter425 != this->i32_byte_map.end(); ++_iter425)
    {
      xfer += oprot->writeI32(_iter425->first);
      xfer += oprot->writeByte(_iter425->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_byte_map", ::apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_BYTE, this->i64_byte_map.size());
    std::map<int64_t, int8_t> ::const_iterator _iter426;
    for (_iter426 = this->i64_byte_map.begin(); _iter426 != this->i64_byte_map.end(); ++_iter426)
    {
      xfer += oprot->writeI64(_iter426->first);
      xfer += oprot->writeByte(_iter426->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_byte_map", ::apache::thrift::protocol::T_MAP, 33);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_DOUBLE, ::apache::thrift::protocol::T_BYTE, this->double_byte_map.size());
    std::map<double, int8_t> ::const_iterator _iter427;
    for (_iter427 = this->double_byte_map.begin(); _iter427 != this->double_byte_map.end(); ++_iter427)
    {
      xfer += oprot->writeDouble(_iter427->first);
      xfer += oprot->writeByte(_iter427->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_byte_map", ::apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BYTE, this->string_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter428;
    for (_iter428 = this->string_byte_map.begin(); _iter428 != this->string_byte_map.end(); ++_iter428)
    {
      xfer += oprot->writeString(_iter428->first);
      xfer += oprot->writeByte(_iter428->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_byte_map", ::apache::thrift::protocol::T_MAP, 35);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BYTE, this->binary_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter429;
    for (_iter429 = this->binary_byte_map.begin(); _iter429 != this->binary_byte_map.end(); ++_iter429)
    {
      xfer += oprot->writeBinary(_iter429->first);
      xfer += oprot->writeByte(_iter429->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_byte_map", ::apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BOOL, ::apache::thrift::protocol::T_BYTE, this->boolean_byte_map.size());
    std::map<bool, int8_t> ::const_iterator _iter430;
    for (_iter430 = this->boolean_byte_map.begin(); _iter430 != this->boolean_byte_map.end(); ++_iter430)
    {
      xfer += oprot->writeBool(_iter430->first);
      xfer += oprot->writeByte(_iter430->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i16_map", ::apache::thrift::protocol::T_MAP, 37);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I16, this->byte_i16_map.size());
    std::map<int8_t, int16_t> ::const_iterator _iter431;
    for (_iter431 = this->byte_i16_map.begin(); _iter431 != this->byte_i16_map.end(); ++_iter431)
    {
      xfer += oprot->writeByte(_iter431->first);
      xfer += oprot->writeI16(_iter431->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i32_map", ::apache::thrift::protocol::T_MAP, 38);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I32, this->byte_i32_map.size());
    std::map<int8_t, int32_t> ::const_iterator _iter432;
    for (_iter432 = this->byte_i32_map.begin(); _iter432 != this->byte_i32_map.end(); ++_iter432)
    {
      xfer += oprot->writeByte(_iter432->first);
      xfer += oprot->writeI32(_iter432->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i64_map", ::apache::thrift::protocol::T_MAP, 39);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I64, this->byte_i64_map.size());
    std::map<int8_t, int64_t> ::const_iterator _iter433;
    for (_iter433 = this->byte_i64_map.begin(); _iter433 != this->byte_i64_map.end(); ++_iter433)
    {
      xfer += oprot->writeByte(_iter433->first);
      xfer += oprot->writeI64(_iter433->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_double_map", ::apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_DOUBLE, this->byte_double_map.size());
    std::map<int8_t, double> ::const_iterator _iter434;
    for (_iter434 = this->byte_double_map.begin(); _iter434 != this->byte_double_map.end(); ++_iter434)
    {
      xfer += oprot->writeByte(_iter434->first);
      xfer += oprot->writeDouble(_iter434->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_string_map", ::apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_STRING, this->byte_string_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter435;
    for (_iter435 = this->byte_string_map.begin(); _iter435 != this->byte_string_map.end(); ++_iter435)
    {
      xfer += oprot->writeByte(_iter435->first);
      xfer += oprot->writeString(_iter435->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_binary_map", ::apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_STRING, this->byte_binary_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter436;
    for (_iter436 = this->byte_binary_map.begin(); _iter436 != this->byte_binary_map.end(); ++_iter436)
    {
      xfer += oprot->writeByte(_iter436->first);
      xfer += oprot->writeBinary(_iter436->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_boolean_map", ::apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BOOL, this->byte_boolean_map.size());
    std::map<int8_t, bool> ::const_iterator _iter437;
    for (_iter437 = this->byte_boolean_map.begin(); _iter437 != this->byte_boolean_map.end(); ++_iter437)
    {
      xfer += oprot->writeByte(_iter437->first);
      xfer += oprot->writeBool(_iter437->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("list_byte_map", ::apache::thrift::protocol::T_MAP, 44);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_BYTE, this->list_byte_map.size());
    std::map<std::vector<int8_t> , int8_t> ::const_iterator _iter438;
    for (_iter438 = this->list_byte_map.begin(); _iter438 != this->list_byte_map.end(); ++_iter438)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, _iter438->first.size());
        std::vector<int8_t> ::const_iterator _iter439;
        for (_iter439 = _iter438->first.begin(); _iter439 != _iter438->first.end(); ++_iter439)
        {
          xfer += oprot->writeByte((*_iter439));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeByte(_iter438->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("set_byte_map", ::apache::thrift::protocol::T_MAP, 45);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_SET, ::apache::thrift::protocol::T_BYTE, this->set_byte_map.size());
    std::map<std::set<int8_t> , int8_t> ::const_iterator _iter440;
    for (_iter440 = this->set_byte_map.begin(); _iter440 != this->set_byte_map.end(); ++_iter440)
    {
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, _iter440->first.size());
        std::set<int8_t> ::const_iterator _iter441;
        for (_iter441 = _iter440->first.begin(); _iter441 != _iter440->first.end(); ++_iter441)
        {
          xfer += oprot->writeByte((*_iter441));
        }
        xfer += oprot->writeSetEnd();
      }
      xfer += oprot->writeByte(_iter440->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_byte_map", ::apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_MAP, ::apache::thrift::protocol::T_BYTE, this->map_byte_map.size());
    std::map<std::map<int8_t, int8_t> , int8_t> ::const_iterator _iter442;
    for (_iter442 = this->map_byte_map.begin(); _iter442 != this->map_byte_map.end(); ++_iter442)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, _iter442->first.size());
        std::map<int8_t, int8_t> ::const_iterator _iter443;
        for (_iter443 = _iter442->first.begin(); _iter443 != _iter442->first.end(); ++_iter443)
        {
          xfer += oprot->writeByte(_iter443->first);
          xfer += oprot->writeByte(_iter443->second);
        }
        xfer += oprot->writeMapEnd();
      }
      xfer += oprot->writeByte(_iter442->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_map_map", ::apache::thrift::protocol::T_MAP, 47);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_MAP, this->byte_map_map.size());
    std::map<int8_t, std::map<int8_t, int8_t> > ::const_iterator _iter444;
    for (_iter444 = this->byte_map_map.begin(); _iter444 != this->byte_map_map.end(); ++_iter444)
    {
      xfer += oprot->writeByte(_iter444->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, _iter444->second.size());
        std::map<int8_t, int8_t> ::const_iterator _iter445;
        for (_iter445 = _iter444->second.begin(); _iter445 != _iter444->second.end(); ++_iter445)
        {
          xfer += oprot->writeByte(_iter445->first);
          xfer += oprot->writeByte(_iter445->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set_map", ::apache::thrift::protocol::T_MAP, 48);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_SET, this->byte_set_map.size());
    std::map<int8_t, std::set<int8_t> > ::const_iterator _iter446;
    for (_iter446 = this->byte_set_map.begin(); _iter446 != this->byte_set_map.end(); ++_iter446)
    {
      xfer += oprot->writeByte(_iter446->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, _iter446->second.size());
        std::set<int8_t> ::const_iterator _iter447;
        for (_iter447 = _iter446->second.begin(); _iter447 != _iter446->second.end(); ++_iter447)
        {
          xfer += oprot->writeByte((*_iter447));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list_map", ::apache::thrift::protocol::T_MAP, 49);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_LIST, this->byte_list_map.size());
    std::map<int8_t, std::vector<int8_t> > ::const_iterator _iter448;
    for (_iter448 = this->byte_list_map.begin(); _iter448 != this->byte_list_map.end(); ++_iter448)
    {
      xfer += oprot->writeByte(_iter448->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, _iter448->second.size());
        std::vector<int8_t> ::const_iterator _iter449;
        for (_iter449 = _iter448->second.begin(); _iter449 != _iter448->second.end(); ++_iter449)
        {
          xfer += oprot->writeByte((*_iter449));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ExceptionWithAMap::ascii_fingerprint = "F7C641917C22B35AE581CCD54910B00D";
const uint8_t ExceptionWithAMap::binary_fingerprint[16] = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

// map<string,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E525259F38EF383401EB0A958458F19C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_E525259F38EF383401EB0A958458F19C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:map<string,string>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* ExceptionWithAMap::local_reflection = 
  &trlo_typespec_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D;

uint32_t ExceptionWithAMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blah);
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->map_field.clear();
            uint32_t _size450;
            ::apache::thrift::protocol::TType _ktype451;
            ::apache::thrift::protocol::TType _vtype452;
            iprot->readMapBegin(_ktype451, _vtype452, _size450);
            uint32_t _i454;
            for (_i454 = 0; _i454 < _size450; ++_i454)
            {
              std::string _key455;
              xfer += iprot->readString(_key455);
              std::string& _val456 = this->map_field[_key455];
              xfer += iprot->readString(_val456);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExceptionWithAMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExceptionWithAMap");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_field", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, this->map_field.size());
    std::map<std::string, std::string> ::const_iterator _iter457;
    for (_iter457 = this->map_field.begin(); _iter457 != this->map_field.end(); ++_iter457)
    {
      xfer += oprot->writeString(_iter457->first);
      xfer += oprot->writeString(_iter457->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlowUp::ascii_fingerprint = "C31E40A0D0B3CC76A374729E31FB848F";
const uint8_t BlowUp::binary_fingerprint[16] = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

// map<i32,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// set<map<i32,string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// map<list<i32>,set<map<i32,string>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F(
  ::apache::thrift::protocol::T_STRUCT,
  BlowUp::binary_fingerprint,
  trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F,
  trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F);

::apache::thrift::reflection::local::TypeSpec* BlowUp::local_reflection = 
  &trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

uint32_t BlowUp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b1.clear();
            uint32_t _size458;
            ::apache::thrift::protocol::TType _ktype459;
            ::apache::thrift::protocol::TType _vtype460;
            iprot->readMapBegin(_ktype459, _vtype460, _size458);
            uint32_t _i462;
            for (_i462 = 0; _i462 < _size458; ++_i462)
            {
              std::vector<int32_t>  _key463;
              {
                _key463.clear();
                uint32_t _size465;
                ::apache::thrift::protocol::TType _etype468;
                iprot->readListBegin(_etype468, _size465);
                _key463.resize(_size465);
                uint32_t _i469;
                for (_i469 = 0; _i469 < _size465; ++_i469)
                {
                  xfer += iprot->readI32(_key463[_i469]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val464 = this->b1[_key463];
              {
                _val464.clear();
                uint32_t _size470;
                ::apache::thrift::protocol::TType _etype473;
                iprot->readSetBegin(_etype473, _size470);
                uint32_t _i474;
                for (_i474 = 0; _i474 < _size470; ++_i474)
                {
                  std::map<int32_t, std::string>  _elem475;
                  {
                    _elem475.clear();
                    uint32_t _size476;
                    ::apache::thrift::protocol::TType _ktype477;
                    ::apache::thrift::protocol::TType _vtype478;
                    iprot->readMapBegin(_ktype477, _vtype478, _size476);
                    uint32_t _i480;
                    for (_i480 = 0; _i480 < _size476; ++_i480)
                    {
                      int32_t _key481;
                      xfer += iprot->readI32(_key481);
                      std::string& _val482 = _elem475[_key481];
                      xfer += iprot->readString(_val482);
                    }
                    iprot->readMapEnd();
                  }
                  _val464.insert(_elem475);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b2.clear();
            uint32_t _size483;
            ::apache::thrift::protocol::TType _ktype484;
            ::apache::thrift::protocol::TType _vtype485;
            iprot->readMapBegin(_ktype484, _vtype485, _size483);
            uint32_t _i487;
            for (_i487 = 0; _i487 < _size483; ++_i487)
            {
              std::vector<int32_t>  _key488;
              {
                _key488.clear();
                uint32_t _size490;
                ::apache::thrift::protocol::TType _etype493;
                iprot->readListBegin(_etype493, _size490);
                _key488.resize(_size490);
                uint32_t _i494;
                for (_i494 = 0; _i494 < _size490; ++_i494)
                {
                  xfer += iprot->readI32(_key488[_i494]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val489 = this->b2[_key488];
              {
                _val489.clear();
                uint32_t _size495;
                ::apache::thrift::protocol::TType _etype498;
                iprot->readSetBegin(_etype498, _size495);
                uint32_t _i499;
                for (_i499 = 0; _i499 < _size495; ++_i499)
                {
                  std::map<int32_t, std::string>  _elem500;
                  {
                    _elem500.clear();
                    uint32_t _size501;
                    ::apache::thrift::protocol::TType _ktype502;
                    ::apache::thrift::protocol::TType _vtype503;
                    iprot->readMapBegin(_ktype502, _vtype503, _size501);
                    uint32_t _i505;
                    for (_i505 = 0; _i505 < _size501; ++_i505)
                    {
                      int32_t _key506;
                      xfer += iprot->readI32(_key506);
                      std::string& _val507 = _elem500[_key506];
                      xfer += iprot->readString(_val507);
                    }
                    iprot->readMapEnd();
                  }
                  _val489.insert(_elem500);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b3.clear();
            uint32_t _size508;
            ::apache::thrift::protocol::TType _ktype509;
            ::apache::thrift::protocol::TType _vtype510;
            iprot->readMapBegin(_ktype509, _vtype510, _size508);
            uint32_t _i512;
            for (_i512 = 0; _i512 < _size508; ++_i512)
            {
              std::vector<int32_t>  _key513;
              {
                _key513.clear();
                uint32_t _size515;
                ::apache::thrift::protocol::TType _etype518;
                iprot->readListBegin(_etype518, _size515);
                _key513.resize(_size515);
                uint32_t _i519;
                for (_i519 = 0; _i519 < _size515; ++_i519)
                {
                  xfer += iprot->readI32(_key513[_i519]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val514 = this->b3[_key513];
              {
                _val514.clear();
                uint32_t _size520;
                ::apache::thrift::protocol::TType _etype523;
                iprot->readSetBegin(_etype523, _size520);
                uint32_t _i524;
                for (_i524 = 0; _i524 < _size520; ++_i524)
                {
                  std::map<int32_t, std::string>  _elem525;
                  {
                    _elem525.clear();
                    uint32_t _size526;
                    ::apache::thrift::protocol::TType _ktype527;
                    ::apache::thrift::protocol::TType _vtype528;
                    iprot->readMapBegin(_ktype527, _vtype528, _size526);
                    uint32_t _i530;
                    for (_i530 = 0; _i530 < _size526; ++_i530)
                    {
                      int32_t _key531;
                      xfer += iprot->readI32(_key531);
                      std::string& _val532 = _elem525[_key531];
                      xfer += iprot->readString(_val532);
                    }
                    iprot->readMapEnd();
                  }
                  _val514.insert(_elem525);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b4.clear();
            uint32_t _size533;
            ::apache::thrift::protocol::TType _ktype534;
            ::apache::thrift::protocol::TType _vtype535;
            iprot->readMapBegin(_ktype534, _vtype535, _size533);
            uint32_t _i537;
            for (_i537 = 0; _i537 < _size533; ++_i537)
            {
              std::vector<int32_t>  _key538;
              {
                _key538.clear();
                uint32_t _size540;
                ::apache::thrift::protocol::TType _etype543;
                iprot->readListBegin(_etype543, _size540);
                _key538.resize(_size540);
                uint32_t _i544;
                for (_i544 = 0; _i544 < _size540; ++_i544)
                {
                  xfer += iprot->readI32(_key538[_i544]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val539 = this->b4[_key538];
              {
                _val539.clear();
                uint32_t _size545;
                ::apache::thrift::protocol::TType _etype548;
                iprot->readSetBegin(_etype548, _size545);
                uint32_t _i549;
                for (_i549 = 0; _i549 < _size545; ++_i549)
                {
                  std::map<int32_t, std::string>  _elem550;
                  {
                    _elem550.clear();
                    uint32_t _size551;
                    ::apache::thrift::protocol::TType _ktype552;
                    ::apache::thrift::protocol::TType _vtype553;
                    iprot->readMapBegin(_ktype552, _vtype553, _size551);
                    uint32_t _i555;
                    for (_i555 = 0; _i555 < _size551; ++_i555)
                    {
                      int32_t _key556;
                      xfer += iprot->readI32(_key556);
                      std::string& _val557 = _elem550[_key556];
                      xfer += iprot->readString(_val557);
                    }
                    iprot->readMapEnd();
                  }
                  _val539.insert(_elem550);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlowUp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlowUp");
  xfer += oprot->writeFieldBegin("b1", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, this->b1.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter558;
    for (_iter558 = this->b1.begin(); _iter558 != this->b1.end(); ++_iter558)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, _iter558->first.size());
        std::vector<int32_t> ::const_iterator _iter559;
        for (_iter559 = _iter558->first.begin(); _iter559 != _iter558->first.end(); ++_iter559)
        {
          xfer += oprot->writeI32((*_iter559));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, _iter558->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter560;
        for (_iter560 = _iter558->second.begin(); _iter560 != _iter558->second.end(); ++_iter560)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, (*_iter560).size());
            std::map<int32_t, std::string> ::const_iterator _iter561;
            for (_iter561 = (*_iter560).begin(); _iter561 != (*_iter560).end(); ++_iter561)
            {
              xfer += oprot->writeI32(_iter561->first);
              xfer += oprot->writeString(_iter561->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, this->b2.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter562;
    for (_iter562 = this->b2.begin(); _iter562 != this->b2.end(); ++_iter562)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, _iter562->first.size());
        std::vector<int32_t> ::const_iterator _iter563;
        for (_iter563 = _iter562->first.begin(); _iter563 != _iter562->first.end(); ++_iter563)
        {
          xfer += oprot->writeI32((*_iter563));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, _iter562->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter564;
        for (_iter564 = _iter562->second.begin(); _iter564 != _iter562->second.end(); ++_iter564)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, (*_iter564).size());
            std::map<int32_t, std::string> ::const_iterator _iter565;
            for (_iter565 = (*_iter564).begin(); _iter565 != (*_iter564).end(); ++_iter565)
            {
              xfer += oprot->writeI32(_iter565->first);
              xfer += oprot->writeString(_iter565->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, this->b3.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter566;
    for (_iter566 = this->b3.begin(); _iter566 != this->b3.end(); ++_iter566)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, _iter566->first.size());
        std::vector<int32_t> ::const_iterator _iter567;
        for (_iter567 = _iter566->first.begin(); _iter567 != _iter566->first.end(); ++_iter567)
        {
          xfer += oprot->writeI32((*_iter567));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, _iter566->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter568;
        for (_iter568 = _iter566->second.begin(); _iter568 != _iter566->second.end(); ++_iter568)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, (*_iter568).size());
            std::map<int32_t, std::string> ::const_iterator _iter569;
            for (_iter569 = (*_iter568).begin(); _iter569 != (*_iter568).end(); ++_iter569)
            {
              xfer += oprot->writeI32(_iter569->first);
              xfer += oprot->writeString(_iter569->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, this->b4.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter570;
    for (_iter570 = this->b4.begin(); _iter570 != this->b4.end(); ++_iter570)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, _iter570->first.size());
        std::vector<int32_t> ::const_iterator _iter571;
        for (_iter571 = _iter570->first.begin(); _iter571 != _iter570->first.end(); ++_iter571)
        {
          xfer += oprot->writeI32((*_iter571));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, _iter570->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter572;
        for (_iter572 = _iter570->second.begin(); _iter572 != _iter570->second.end(); ++_iter572)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, (*_iter572).size());
            std::map<int32_t, std::string> ::const_iterator _iter573;
            for (_iter573 = (*_iter572).begin(); _iter573 != (*_iter572).end(); ++_iter573)
            {
              xfer += oprot->writeI32(_iter573->first);
              xfer += oprot->writeString(_iter573->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ReverseOrderStruct::ascii_fingerprint = "BA93DC8E0310101D81517021CB327269";
const uint8_t ReverseOrderStruct::binary_fingerprint[16] = {0xBA,0x93,0xDC,0x8E,0x03,0x10,0x10,0x1D,0x81,0x51,0x70,0x21,0xCB,0x32,0x72,0x69};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_BA93DC8E0310101D81517021CB327269[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_BA93DC8E0310101D81517021CB327269[] = {
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i64;2:i32;3:i16;4:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BA93DC8E0310101D81517021CB327269(
  ::apache::thrift::protocol::T_STRUCT,
  ReverseOrderStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_BA93DC8E0310101D81517021CB327269,
  trlo_specs_DebugProtoTest_BA93DC8E0310101D81517021CB327269);

::apache::thrift::reflection::local::TypeSpec* ReverseOrderStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_BA93DC8E0310101D81517021CB327269;

uint32_t ReverseOrderStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->first);
          this->__isset.first = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->second);
          this->__isset.second = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->third);
          this->__isset.third = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fourth);
          this->__isset.fourth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReverseOrderStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReverseOrderStruct");
  xfer += oprot->writeFieldBegin("fourth", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fourth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("third", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->third);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("second", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->second);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->first);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithSomeEnum::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t StructWithSomeEnum::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA[] = {
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:enum;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA(
  ::apache::thrift::protocol::T_STRUCT,
  StructWithSomeEnum::binary_fingerprint,
  trlo_metas_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA,
  trlo_specs_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA);

::apache::thrift::reflection::local::TypeSpec* StructWithSomeEnum::local_reflection = 
  &trlo_typespec_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA;

uint32_t StructWithSomeEnum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast574;
          xfer += iprot->readI32(ecast574);
          this->blah = (SomeEnum)ecast574;
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StructWithSomeEnum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithSomeEnum");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TestUnion::ascii_fingerprint = "C3BAABE17F67FD55972D483A983C1A69";
const uint8_t TestUnion::binary_fingerprint[16] = {0xC3,0xBA,0xAB,0xE1,0x7F,0x67,0xFD,0x55,0x97,0x2D,0x48,0x3A,0x98,0x3C,0x1A,0x69};

// list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69(
  ::apache::thrift::protocol::T_STRUCT,
  TestUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69,
  trlo_specs_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69);

::apache::thrift::reflection::local::TypeSpec* TestUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69;

uint32_t TestUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_field);
          this->__isset.string_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_field);
          this->__isset.i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_field.read(iprot);
          this->__isset.struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size575;
            ::apache::thrift::protocol::TType _etype578;
            iprot->readListBegin(_etype578, _size575);
            this->struct_list.resize(_size575);
            uint32_t _i579;
            for (_i579 = 0; _i579 < _size575; ++_i579)
            {
              xfer += this->struct_list[_i579].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->other_i32_field);
          this->__isset.other_i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast580;
          xfer += iprot->readI32(ecast580);
          this->enum_field = (SomeEnum)ecast580;
          this->__isset.enum_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TestUnion");
  xfer += oprot->writeFieldBegin("string_field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_field", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_field", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<RandomStuff> ::const_iterator _iter581;
    for (_iter581 = this->struct_list.begin(); _iter581 != this->struct_list.end(); ++_iter581)
    {
      xfer += (*_iter581).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("other_i32_field", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->other_i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("enum_field", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->enum_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TestUnionMinusStringField::ascii_fingerprint = "3B8E0C3533F9A1C56A7220946DA3B98E";
const uint8_t TestUnionMinusStringField::binary_fingerprint[16] = {0x3B,0x8E,0x0C,0x35,0x33,0xF9,0xA1,0xC5,0x6A,0x72,0x20,0x94,0x6D,0xA3,0xB9,0x8E};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E[] = {
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E(
  ::apache::thrift::protocol::T_STRUCT,
  TestUnionMinusStringField::binary_fingerprint,
  trlo_metas_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E,
  trlo_specs_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E);

::apache::thrift::reflection::local::TypeSpec* TestUnionMinusStringField::local_reflection = 
  &trlo_typespec_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E;

uint32_t TestUnionMinusStringField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_field);
          this->__isset.i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_field.read(iprot);
          this->__isset.struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size582;
            ::apache::thrift::protocol::TType _etype585;
            iprot->readListBegin(_etype585, _size582);
            this->struct_list.resize(_size582);
            uint32_t _i586;
            for (_i586 = 0; _i586 < _size582; ++_i586)
            {
              xfer += this->struct_list[_i586].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->other_i32_field);
          this->__isset.other_i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast587;
          xfer += iprot->readI32(ecast587);
          this->enum_field = (SomeEnum)ecast587;
          this->__isset.enum_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestUnionMinusStringField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TestUnionMinusStringField");
  xfer += oprot->writeFieldBegin("i32_field", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_field", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<RandomStuff> ::const_iterator _iter588;
    for (_iter588 = this->struct_list.begin(); _iter588 != this->struct_list.end(); ++_iter588)
    {
      xfer += (*_iter588).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("other_i32_field", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->other_i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("enum_field", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->enum_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ComparableUnion::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t ComparableUnion::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_07A9615F837F7D0A952B595DD3020972[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_07A9615F837F7D0A952B595DD3020972[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_07A9615F837F7D0A952B595DD3020972(
  ::apache::thrift::protocol::T_STRUCT,
  ComparableUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_07A9615F837F7D0A952B595DD3020972,
  trlo_specs_DebugProtoTest_07A9615F837F7D0A952B595DD3020972);

::apache::thrift::reflection::local::TypeSpec* ComparableUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_07A9615F837F7D0A952B595DD3020972;

uint32_t ComparableUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_field);
          this->__isset.string_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binary_field);
          this->__isset.binary_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComparableUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ComparableUnion");
  xfer += oprot->writeFieldBegin("string_field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_field", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->binary_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithAUnion::ascii_fingerprint = "1A688CE2C0C91267D6985843A61FB562";
const uint8_t StructWithAUnion::binary_fingerprint[16] = {0x1A,0x68,0x8C,0xE2,0xC0,0xC9,0x12,0x67,0xD6,0x98,0x58,0x43,0xA6,0x1F,0xB5,0x62};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562[] = {
  &trlo_typespec_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562(
  ::apache::thrift::protocol::T_STRUCT,
  StructWithAUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562,
  trlo_specs_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562);

::apache::thrift::reflection::local::TypeSpec* StructWithAUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562;

uint32_t StructWithAUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->test_union.read(iprot);
          this->__isset.test_union = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StructWithAUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithAUnion");
  xfer += oprot->writeFieldBegin("test_union", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->test_union.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PrimitiveThenStruct::ascii_fingerprint = "B9601C7CD703F4F4C7ACF14F3E733CB6";
const uint8_t PrimitiveThenStruct::binary_fingerprint[16] = {0xB9,0x60,0x1C,0x7C,0xD7,0x03,0xF4,0xF4,0xC7,0xAC,0xF1,0x4F,0x3E,0x73,0x3C,0xB6};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:{1:i32;2:i32;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6(
  ::apache::thrift::protocol::T_STRUCT,
  PrimitiveThenStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6,
  trlo_specs_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6);

::apache::thrift::reflection::local::TypeSpec* PrimitiveThenStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6;

uint32_t PrimitiveThenStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blah);
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blah2);
          this->__isset.blah2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bw.read(iprot);
          this->__isset.bw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrimitiveThenStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PrimitiveThenStruct");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("blah2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->blah2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bw", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->bw.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithASomemap::ascii_fingerprint = "A1B22BA1EA8D0BB473B653537D9E88F8";
const uint8_t StructWithASomemap::binary_fingerprint[16] = {0xA1,0xB2,0x2B,0xA1,0xEA,0x8D,0x0B,0xB4,0x73,0xB6,0x53,0x53,0x7D,0x9E,0x88,0xF8};

// map<i32,i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8[] = {
  &trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<i32,i32>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8(
  ::apache::thrift::protocol::T_STRUCT,
  StructWithASomemap::binary_fingerprint,
  trlo_metas_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8,
  trlo_specs_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8);

::apache::thrift::reflection::local::TypeSpec* StructWithASomemap::local_reflection = 
  &trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8;

uint32_t StructWithASomemap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_somemap_field = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->somemap_field.clear();
            uint32_t _size589;
            ::apache::thrift::protocol::TType _ktype590;
            ::apache::thrift::protocol::TType _vtype591;
            iprot->readMapBegin(_ktype590, _vtype591, _size589);
            uint32_t _i593;
            for (_i593 = 0; _i593 < _size589; ++_i593)
            {
              int32_t _key594;
              xfer += iprot->readI32(_key594);
              int32_t& _val595 = this->somemap_field[_key594];
              xfer += iprot->readI32(_val595);
            }
            iprot->readMapEnd();
          }
          isset_somemap_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_somemap_field)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StructWithASomemap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithASomemap");
  xfer += oprot->writeFieldBegin("somemap_field", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, this->somemap_field.size());
    std::map<int32_t, int32_t> ::const_iterator _iter596;
    for (_iter596 = this->somemap_field.begin(); _iter596 != this->somemap_field.end(); ++_iter596)
    {
      xfer += oprot->writeI32(_iter596->first);
      xfer += oprot->writeI32(_iter596->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BigFieldIdStruct::ascii_fingerprint = "EF3223317B4B691FF07BBCAE5AE4BE58";
const uint8_t BigFieldIdStruct::binary_fingerprint[16] = {0xEF,0x32,0x23,0x31,0x7B,0x4B,0x69,0x1F,0xF0,0x7B,0xBC,0xAE,0x5A,0xE4,0xBE,0x58};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58[] = {
  { 1, false },
  { 45, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;45:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58(
  ::apache::thrift::protocol::T_STRUCT,
  BigFieldIdStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58,
  trlo_specs_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58);

::apache::thrift::reflection::local::TypeSpec* BigFieldIdStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58;

uint32_t BigFieldIdStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BigFieldIdStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BigFieldIdStruct");
  xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_STRING, 45);
  xfer += oprot->writeString(this->field2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BreaksRubyCompactProtocol::ascii_fingerprint = "F8C71AB013693CB292A4A3589EB448B4";
const uint8_t BreaksRubyCompactProtocol::binary_fingerprint[16] = {0xF8,0xC7,0x1A,0xB0,0x13,0x69,0x3C,0xB2,0x92,0xA4,0xA3,0x58,0x9E,0xB4,0x48,0xB4};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:{1:string;45:string;};3:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4(
  ::apache::thrift::protocol::T_STRUCT,
  BreaksRubyCompactProtocol::binary_fingerprint,
  trlo_metas_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4,
  trlo_specs_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4);

::apache::thrift::reflection::local::TypeSpec* BreaksRubyCompactProtocol::local_reflection = 
  &trlo_typespec_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4;

uint32_t BreaksRubyCompactProtocol::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field2.read(iprot);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BreaksRubyCompactProtocol::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BreaksRubyCompactProtocol");
  xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field2.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->field3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
