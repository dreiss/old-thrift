/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "DebugProtoTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test { namespace debug {

const char* Doubles::ascii_fingerprint = "4B056EA3B3FB01EC41613CEB91B54CE5";
const uint8_t Doubles::binary_fingerprint[16] = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

// double
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0(
  apache::thrift::protocol::T_DOUBLE);

// void
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34(
  apache::thrift::protocol::T_STOP);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5(
  apache::thrift::protocol::T_STRUCT,
  Doubles::binary_fingerprint,
  trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5,
  trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5);

apache::thrift::reflection::local::TypeSpec* Doubles::local_reflection = 
  &trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

uint32_t Doubles::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nan);
          this->__isset.nan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inf);
          this->__isset.inf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->neginf);
          this->__isset.neginf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->repeating);
          this->__isset.repeating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->big);
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->small);
          this->__isset.small = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zero);
          this->__isset.zero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->negzero);
          this->__isset.negzero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Doubles::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Doubles");
  xfer += oprot->writeFieldBegin("nan", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nan);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inf", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("neginf", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->neginf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("repeating", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->repeating);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->big);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->small);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zero", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("negzero", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->negzero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneOfEach::ascii_fingerprint = "DF7CE78394886179BFAFDB65C5A708BC";
const uint8_t OneOfEach::binary_fingerprint[16] = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

// bool
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305(
  apache::thrift::protocol::T_BOOL);

// byte
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091(
  apache::thrift::protocol::T_BYTE);

// i16
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  apache::thrift::protocol::T_I16);

// i32
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  apache::thrift::protocol::T_I32);

// i64
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44(
  apache::thrift::protocol::T_I64);

// string
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  apache::thrift::protocol::T_STRING);

// list<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// list<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// list<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC(
  apache::thrift::protocol::T_STRUCT,
  OneOfEach::binary_fingerprint,
  trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC);

apache::thrift::reflection::local::TypeSpec* OneOfEach::local_reflection = 
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

uint32_t OneOfEach::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_bite);
          this->__isset.a_bite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->integer16);
          this->__isset.integer16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->integer32);
          this->__isset.integer32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->integer64);
          this->__isset.integer64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_precision);
          this->__isset.double_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->some_characters);
          this->__isset.some_characters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zomg_unicode);
          this->__isset.zomg_unicode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->what_who);
          this->__isset.what_who = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->base64);
          this->__isset.base64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size0;
            apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->byte_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->byte_list[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size5;
            apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->i16_list.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI16(this->i16_list[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size10;
            apache::thrift::protocol::TType _etype13;
            iprot->readListBegin(_etype13, _size10);
            this->i64_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->i64_list[_i14]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneOfEach::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneOfEach");
  xfer += oprot->writeFieldBegin("im_true", apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_bite", apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->a_bite);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer16", apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->integer16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer32", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->integer32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer64", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->integer64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_precision", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->double_precision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("some_characters", apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->some_characters);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zomg_unicode", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->zomg_unicode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("what_who", apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->what_who);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base64", apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeBinary(this->base64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter15;
    for (_iter15 = this->byte_list.begin(); _iter15 != this->byte_list.end(); ++_iter15)
    {
      xfer += oprot->writeByte((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter16;
    for (_iter16 = this->i16_list.begin(); _iter16 != this->i16_list.end(); ++_iter16)
    {
      xfer += oprot->writeI16((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter17;
    for (_iter17 = this->i64_list.begin(); _iter17 != this->i64_list.end(); ++_iter17)
    {
      xfer += oprot->writeI64((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bonk::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Bonk::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3(
  apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3);

apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Bonk::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("type", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nesting::ascii_fingerprint = "9D961D015265DA7A88BA69FB2A7ACDA9";
const uint8_t Nesting::binary_fingerprint[16] = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9(
  apache::thrift::protocol::T_STRUCT,
  Nesting::binary_fingerprint,
  trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9,
  trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9);

apache::thrift::reflection::local::TypeSpec* Nesting::local_reflection = 
  &trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

uint32_t Nesting::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_bonk.read(iprot);
          this->__isset.my_bonk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_ooe.read(iprot);
          this->__isset.my_ooe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nesting::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nesting");
  xfer += oprot->writeFieldBegin("my_bonk", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->my_bonk.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("my_ooe", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->my_ooe.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HolyMoley::ascii_fingerprint = "63B6C93A44D5393BB40AF7623EA1919F";
const uint8_t HolyMoley::binary_fingerprint[16] = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  NULL);

// list<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<list<string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  NULL);

// list<{1:i32;2:string;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  NULL);

// map<string,list<{1:i32;2:string;}>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  &trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A,
  &trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F,
  &trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F(
  apache::thrift::protocol::T_STRUCT,
  HolyMoley::binary_fingerprint,
  trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F,
  trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F);

apache::thrift::reflection::local::TypeSpec* HolyMoley::local_reflection = 
  &trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

uint32_t HolyMoley::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->big.clear();
            uint32_t _size18;
            apache::thrift::protocol::TType _etype21;
            iprot->readListBegin(_etype21, _size18);
            this->big.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->big[_i22].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->contain.clear();
            uint32_t _size23;
            apache::thrift::protocol::TType _etype26;
            iprot->readSetBegin(_etype26, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::vector<std::string>  _elem28;
              {
                _elem28.clear();
                uint32_t _size29;
                apache::thrift::protocol::TType _etype32;
                iprot->readListBegin(_etype32, _size29);
                _elem28.resize(_size29);
                uint32_t _i33;
                for (_i33 = 0; _i33 < _size29; ++_i33)
                {
                  xfer += iprot->readString(_elem28[_i33]);
                }
                iprot->readListEnd();
              }
              this->contain.insert(_elem28);
            }
            iprot->readSetEnd();
          }
          this->__isset.contain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->bonks.clear();
            uint32_t _size34;
            apache::thrift::protocol::TType _ktype35;
            apache::thrift::protocol::TType _vtype36;
            iprot->readMapBegin(_ktype35, _vtype36, _size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              std::string _key39;
              xfer += iprot->readString(_key39);
              std::vector<Bonk> & _val40 = this->bonks[_key39];
              {
                _val40.clear();
                uint32_t _size41;
                apache::thrift::protocol::TType _etype44;
                iprot->readListBegin(_etype44, _size41);
                _val40.resize(_size41);
                uint32_t _i45;
                for (_i45 = 0; _i45 < _size41; ++_i45)
                {
                  xfer += _val40[_i45].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.bonks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HolyMoley::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HolyMoley");
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->big.size());
    std::vector<OneOfEach> ::const_iterator _iter46;
    for (_iter46 = this->big.begin(); _iter46 != this->big.end(); ++_iter46)
    {
      xfer += (*_iter46).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contain", apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_LIST, this->contain.size());
    std::set<std::vector<std::string> > ::const_iterator _iter47;
    for (_iter47 = this->contain.begin(); _iter47 != this->contain.end(); ++_iter47)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, (*_iter47).size());
        std::vector<std::string> ::const_iterator _iter48;
        for (_iter48 = (*_iter47).begin(); _iter48 != (*_iter47).end(); ++_iter48)
        {
          xfer += oprot->writeString((*_iter48));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bonks", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->bonks.size());
    std::map<std::string, std::vector<Bonk> > ::const_iterator _iter49;
    for (_iter49 = this->bonks.begin(); _iter49 != this->bonks.end(); ++_iter49)
    {
      xfer += oprot->writeString(_iter49->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, _iter49->second.size());
        std::vector<Bonk> ::const_iterator _iter50;
        for (_iter50 = _iter49->second.begin(); _iter50 != _iter49->second.end(); ++_iter50)
        {
          xfer += (*_iter50).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Backwards::ascii_fingerprint = "51318B85E029E14809E8DAB5AF9D7E3A";
const uint8_t Backwards::binary_fingerprint[16] = {0x51,0x31,0x8B,0x85,0xE0,0x29,0xE1,0x48,0x09,0xE8,0xDA,0xB5,0xAF,0x9D,0x7E,0x3A};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A[] = {
  { 2, false },
  { 1, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {2:i32;1:i32;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A(
  apache::thrift::protocol::T_STRUCT,
  Backwards::binary_fingerprint,
  trlo_metas_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A,
  trlo_specs_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A);

apache::thrift::reflection::local::TypeSpec* Backwards::local_reflection = 
  &trlo_typespec_DebugProtoTest_51318B85E029E14809E8DAB5AF9D7E3A;

uint32_t Backwards::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_tag2);
          this->__isset.first_tag2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_tag1);
          this->__isset.second_tag1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Backwards::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Backwards");
  xfer += oprot->writeFieldBegin("first_tag2", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_tag2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("second_tag1", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->second_tag1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Empty::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Empty::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B(
  apache::thrift::protocol::T_STRUCT,
  Empty::binary_fingerprint,
  trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B);

apache::thrift::reflection::local::TypeSpec* Empty::local_reflection = 
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t Empty::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Empty");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Wrapper::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t Wrapper::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD(
  apache::thrift::protocol::T_STRUCT,
  Wrapper::binary_fingerprint,
  trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::TypeSpec* Wrapper::local_reflection = 
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

uint32_t Wrapper::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->foo.read(iprot);
          this->__isset.foo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wrapper::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Wrapper");
  xfer += oprot->writeFieldBegin("foo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->foo.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RandomStuff::ascii_fingerprint = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
const uint8_t RandomStuff::binary_fingerprint[16] = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

// list<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,{1:{};}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE(
  apache::thrift::protocol::T_STRUCT,
  RandomStuff::binary_fingerprint,
  trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE);

apache::thrift::reflection::local::TypeSpec* RandomStuff::local_reflection = 
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

uint32_t RandomStuff::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->myintlist.clear();
            uint32_t _size51;
            apache::thrift::protocol::TType _etype54;
            iprot->readListBegin(_etype54, _size51);
            this->myintlist.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readI32(this->myintlist[_i55]);
            }
            iprot->readListEnd();
          }
          this->__isset.myintlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->maps.clear();
            uint32_t _size56;
            apache::thrift::protocol::TType _ktype57;
            apache::thrift::protocol::TType _vtype58;
            iprot->readMapBegin(_ktype57, _vtype58, _size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              int32_t _key61;
              xfer += iprot->readI32(_key61);
              Wrapper& _val62 = this->maps[_key61];
              xfer += _val62.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bigint);
          this->__isset.bigint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->triple);
          this->__isset.triple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RandomStuff::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RandomStuff");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("myintlist", apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->myintlist.size());
    std::vector<int32_t> ::const_iterator _iter63;
    for (_iter63 = this->myintlist.begin(); _iter63 != this->myintlist.end(); ++_iter63)
    {
      xfer += oprot->writeI32((*_iter63));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maps", apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, this->maps.size());
    std::map<int32_t, Wrapper> ::const_iterator _iter64;
    for (_iter64 = this->maps.begin(); _iter64 != this->maps.end(); ++_iter64)
    {
      xfer += oprot->writeI32(_iter64->first);
      xfer += _iter64->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bigint", apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->bigint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("triple", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->triple);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Base64::ascii_fingerprint = "D6983CD9C5C18EAC36C957E4BED331AE";
const uint8_t Base64::binary_fingerprint[16] = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE(
  apache::thrift::protocol::T_STRUCT,
  Base64::binary_fingerprint,
  trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE,
  trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE);

apache::thrift::reflection::local::TypeSpec* Base64::local_reflection = 
  &trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

uint32_t Base64::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b1);
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b2);
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b3);
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b4);
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b5);
          this->__isset.b5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b6);
          this->__isset.b6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base64::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Base64");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->b1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->b2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->b3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->b4);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b5", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->b5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b6", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->b6);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlowUp::ascii_fingerprint = "C31E40A0D0B3CC76A374729E31FB848F";
const uint8_t BlowUp::binary_fingerprint[16] = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

// map<i32,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// set<map<i32,string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// map<list<i32>,set<map<i32,string>>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F(
  apache::thrift::protocol::T_STRUCT,
  BlowUp::binary_fingerprint,
  trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F,
  trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F);

apache::thrift::reflection::local::TypeSpec* BlowUp::local_reflection = 
  &trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

uint32_t BlowUp::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b1.clear();
            uint32_t _size65;
            apache::thrift::protocol::TType _ktype66;
            apache::thrift::protocol::TType _vtype67;
            iprot->readMapBegin(_ktype66, _vtype67, _size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              std::vector<int32_t>  _key70;
              {
                _key70.clear();
                uint32_t _size72;
                apache::thrift::protocol::TType _etype75;
                iprot->readListBegin(_etype75, _size72);
                _key70.resize(_size72);
                uint32_t _i76;
                for (_i76 = 0; _i76 < _size72; ++_i76)
                {
                  xfer += iprot->readI32(_key70[_i76]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val71 = this->b1[_key70];
              {
                _val71.clear();
                uint32_t _size77;
                apache::thrift::protocol::TType _etype80;
                iprot->readSetBegin(_etype80, _size77);
                uint32_t _i81;
                for (_i81 = 0; _i81 < _size77; ++_i81)
                {
                  std::map<int32_t, std::string>  _elem82;
                  {
                    _elem82.clear();
                    uint32_t _size83;
                    apache::thrift::protocol::TType _ktype84;
                    apache::thrift::protocol::TType _vtype85;
                    iprot->readMapBegin(_ktype84, _vtype85, _size83);
                    uint32_t _i87;
                    for (_i87 = 0; _i87 < _size83; ++_i87)
                    {
                      int32_t _key88;
                      xfer += iprot->readI32(_key88);
                      std::string& _val89 = _elem82[_key88];
                      xfer += iprot->readString(_val89);
                    }
                    iprot->readMapEnd();
                  }
                  _val71.insert(_elem82);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b2.clear();
            uint32_t _size90;
            apache::thrift::protocol::TType _ktype91;
            apache::thrift::protocol::TType _vtype92;
            iprot->readMapBegin(_ktype91, _vtype92, _size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              std::vector<int32_t>  _key95;
              {
                _key95.clear();
                uint32_t _size97;
                apache::thrift::protocol::TType _etype100;
                iprot->readListBegin(_etype100, _size97);
                _key95.resize(_size97);
                uint32_t _i101;
                for (_i101 = 0; _i101 < _size97; ++_i101)
                {
                  xfer += iprot->readI32(_key95[_i101]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val96 = this->b2[_key95];
              {
                _val96.clear();
                uint32_t _size102;
                apache::thrift::protocol::TType _etype105;
                iprot->readSetBegin(_etype105, _size102);
                uint32_t _i106;
                for (_i106 = 0; _i106 < _size102; ++_i106)
                {
                  std::map<int32_t, std::string>  _elem107;
                  {
                    _elem107.clear();
                    uint32_t _size108;
                    apache::thrift::protocol::TType _ktype109;
                    apache::thrift::protocol::TType _vtype110;
                    iprot->readMapBegin(_ktype109, _vtype110, _size108);
                    uint32_t _i112;
                    for (_i112 = 0; _i112 < _size108; ++_i112)
                    {
                      int32_t _key113;
                      xfer += iprot->readI32(_key113);
                      std::string& _val114 = _elem107[_key113];
                      xfer += iprot->readString(_val114);
                    }
                    iprot->readMapEnd();
                  }
                  _val96.insert(_elem107);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b3.clear();
            uint32_t _size115;
            apache::thrift::protocol::TType _ktype116;
            apache::thrift::protocol::TType _vtype117;
            iprot->readMapBegin(_ktype116, _vtype117, _size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              std::vector<int32_t>  _key120;
              {
                _key120.clear();
                uint32_t _size122;
                apache::thrift::protocol::TType _etype125;
                iprot->readListBegin(_etype125, _size122);
                _key120.resize(_size122);
                uint32_t _i126;
                for (_i126 = 0; _i126 < _size122; ++_i126)
                {
                  xfer += iprot->readI32(_key120[_i126]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val121 = this->b3[_key120];
              {
                _val121.clear();
                uint32_t _size127;
                apache::thrift::protocol::TType _etype130;
                iprot->readSetBegin(_etype130, _size127);
                uint32_t _i131;
                for (_i131 = 0; _i131 < _size127; ++_i131)
                {
                  std::map<int32_t, std::string>  _elem132;
                  {
                    _elem132.clear();
                    uint32_t _size133;
                    apache::thrift::protocol::TType _ktype134;
                    apache::thrift::protocol::TType _vtype135;
                    iprot->readMapBegin(_ktype134, _vtype135, _size133);
                    uint32_t _i137;
                    for (_i137 = 0; _i137 < _size133; ++_i137)
                    {
                      int32_t _key138;
                      xfer += iprot->readI32(_key138);
                      std::string& _val139 = _elem132[_key138];
                      xfer += iprot->readString(_val139);
                    }
                    iprot->readMapEnd();
                  }
                  _val121.insert(_elem132);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b4.clear();
            uint32_t _size140;
            apache::thrift::protocol::TType _ktype141;
            apache::thrift::protocol::TType _vtype142;
            iprot->readMapBegin(_ktype141, _vtype142, _size140);
            uint32_t _i144;
            for (_i144 = 0; _i144 < _size140; ++_i144)
            {
              std::vector<int32_t>  _key145;
              {
                _key145.clear();
                uint32_t _size147;
                apache::thrift::protocol::TType _etype150;
                iprot->readListBegin(_etype150, _size147);
                _key145.resize(_size147);
                uint32_t _i151;
                for (_i151 = 0; _i151 < _size147; ++_i151)
                {
                  xfer += iprot->readI32(_key145[_i151]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val146 = this->b4[_key145];
              {
                _val146.clear();
                uint32_t _size152;
                apache::thrift::protocol::TType _etype155;
                iprot->readSetBegin(_etype155, _size152);
                uint32_t _i156;
                for (_i156 = 0; _i156 < _size152; ++_i156)
                {
                  std::map<int32_t, std::string>  _elem157;
                  {
                    _elem157.clear();
                    uint32_t _size158;
                    apache::thrift::protocol::TType _ktype159;
                    apache::thrift::protocol::TType _vtype160;
                    iprot->readMapBegin(_ktype159, _vtype160, _size158);
                    uint32_t _i162;
                    for (_i162 = 0; _i162 < _size158; ++_i162)
                    {
                      int32_t _key163;
                      xfer += iprot->readI32(_key163);
                      std::string& _val164 = _elem157[_key163];
                      xfer += iprot->readString(_val164);
                    }
                    iprot->readMapEnd();
                  }
                  _val146.insert(_elem157);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlowUp::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlowUp");
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b1.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter165;
    for (_iter165 = this->b1.begin(); _iter165 != this->b1.end(); ++_iter165)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter165->first.size());
        std::vector<int32_t> ::const_iterator _iter166;
        for (_iter166 = _iter165->first.begin(); _iter166 != _iter165->first.end(); ++_iter166)
        {
          xfer += oprot->writeI32((*_iter166));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter165->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter167;
        for (_iter167 = _iter165->second.begin(); _iter167 != _iter165->second.end(); ++_iter167)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter167).size());
            std::map<int32_t, std::string> ::const_iterator _iter168;
            for (_iter168 = (*_iter167).begin(); _iter168 != (*_iter167).end(); ++_iter168)
            {
              xfer += oprot->writeI32(_iter168->first);
              xfer += oprot->writeString(_iter168->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b2.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter169;
    for (_iter169 = this->b2.begin(); _iter169 != this->b2.end(); ++_iter169)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter169->first.size());
        std::vector<int32_t> ::const_iterator _iter170;
        for (_iter170 = _iter169->first.begin(); _iter170 != _iter169->first.end(); ++_iter170)
        {
          xfer += oprot->writeI32((*_iter170));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter169->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter171;
        for (_iter171 = _iter169->second.begin(); _iter171 != _iter169->second.end(); ++_iter171)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter171).size());
            std::map<int32_t, std::string> ::const_iterator _iter172;
            for (_iter172 = (*_iter171).begin(); _iter172 != (*_iter171).end(); ++_iter172)
            {
              xfer += oprot->writeI32(_iter172->first);
              xfer += oprot->writeString(_iter172->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b3.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter173;
    for (_iter173 = this->b3.begin(); _iter173 != this->b3.end(); ++_iter173)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter173->first.size());
        std::vector<int32_t> ::const_iterator _iter174;
        for (_iter174 = _iter173->first.begin(); _iter174 != _iter173->first.end(); ++_iter174)
        {
          xfer += oprot->writeI32((*_iter174));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter173->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter175;
        for (_iter175 = _iter173->second.begin(); _iter175 != _iter173->second.end(); ++_iter175)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter175).size());
            std::map<int32_t, std::string> ::const_iterator _iter176;
            for (_iter176 = (*_iter175).begin(); _iter176 != (*_iter175).end(); ++_iter176)
            {
              xfer += oprot->writeI32(_iter176->first);
              xfer += oprot->writeString(_iter176->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b4.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter177;
    for (_iter177 = this->b4.begin(); _iter177 != this->b4.end(); ++_iter177)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter177->first.size());
        std::vector<int32_t> ::const_iterator _iter178;
        for (_iter178 = _iter177->first.begin(); _iter178 != _iter177->first.end(); ++_iter178)
        {
          xfer += oprot->writeI32((*_iter178));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter177->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter179;
        for (_iter179 = _iter177->second.begin(); _iter179 != _iter177->second.end(); ++_iter179)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter179).size());
            std::map<int32_t, std::string> ::const_iterator _iter180;
            for (_iter180 = (*_iter179).begin(); _iter180 != (*_iter179).end(); ++_iter180)
            {
              xfer += oprot->writeI32(_iter180->first);
              xfer += oprot->writeString(_iter180->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CompactProtoTestStruct::ascii_fingerprint = "FECB06442E1E082EBF36FB8CB75EB414";
const uint8_t CompactProtoTestStruct::binary_fingerprint[16] = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

// list<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// list<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// list<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// set<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// set<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// set<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// set<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

// set<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// set<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// set<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// map<byte,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i16,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i32,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i64,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<double,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<string,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<bool,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5);

// map<byte,i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

// map<byte,i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44);

// map<byte,double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0);

// map<byte,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// map<byte,bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305);

// map<list<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<set<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<map<byte,byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,map<byte,byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C);

// map<byte,set<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485);

// map<byte,list<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 15, false },
  { 16, false },
  { 17, false },
  { 18, false },
  { 19, false },
  { 20, false },
  { 21, false },
  { 22, false },
  { 23, false },
  { 24, false },
  { 25, false },
  { 26, false },
  { 27, false },
  { 28, false },
  { 29, false },
  { 30, false },
  { 31, false },
  { 32, false },
  { 33, false },
  { 34, false },
  { 35, false },
  { 36, false },
  { 37, false },
  { 38, false },
  { 39, false },
  { 40, false },
  { 41, false },
  { 42, false },
  { 43, false },
  { 44, false },
  { 45, false },
  { 46, false },
  { 47, false },
  { 48, false },
  { 49, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645,
  &trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569,
  &trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F,
  &trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758,
  &trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A,
  &trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451,
  &trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC,
  &trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373,
  &trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9,
  &trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD,
  &trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF,
  &trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2,
  &trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36,
  &trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2,
  &trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82,
  &trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21,
  &trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414(
  apache::thrift::protocol::T_STRUCT,
  CompactProtoTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414,
  trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414);

apache::thrift::reflection::local::TypeSpec* CompactProtoTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

uint32_t CompactProtoTestStruct::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_byte);
          this->__isset.a_byte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->a_i16);
          this->__isset.a_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a_i32);
          this->__isset.a_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->a_i64);
          this->__isset.a_i64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_double);
          this->__isset.a_double = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_string);
          this->__isset.a_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->a_binary);
          this->__isset.a_binary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->true_field);
          this->__isset.true_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->false_field);
          this->__isset.false_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->empty_struct_field.read(iprot);
          this->__isset.empty_struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size202;
            apache::thrift::protocol::TType _etype205;
            iprot->readListBegin(_etype205, _size202);
            this->byte_list.resize(_size202);
            uint32_t _i206;
            for (_i206 = 0; _i206 < _size202; ++_i206)
            {
              xfer += iprot->readByte(this->byte_list[_i206]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size207;
            apache::thrift::protocol::TType _etype210;
            iprot->readListBegin(_etype210, _size207);
            this->i16_list.resize(_size207);
            uint32_t _i211;
            for (_i211 = 0; _i211 < _size207; ++_i211)
            {
              xfer += iprot->readI16(this->i16_list[_i211]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i32_list.clear();
            uint32_t _size212;
            apache::thrift::protocol::TType _etype215;
            iprot->readListBegin(_etype215, _size212);
            this->i32_list.resize(_size212);
            uint32_t _i216;
            for (_i216 = 0; _i216 < _size212; ++_i216)
            {
              xfer += iprot->readI32(this->i32_list[_i216]);
            }
            iprot->readListEnd();
          }
          this->__isset.i32_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size217;
            apache::thrift::protocol::TType _etype220;
            iprot->readListBegin(_etype220, _size217);
            this->i64_list.resize(_size217);
            uint32_t _i221;
            for (_i221 = 0; _i221 < _size217; ++_i221)
            {
              xfer += iprot->readI64(this->i64_list[_i221]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->double_list.clear();
            uint32_t _size222;
            apache::thrift::protocol::TType _etype225;
            iprot->readListBegin(_etype225, _size222);
            this->double_list.resize(_size222);
            uint32_t _i226;
            for (_i226 = 0; _i226 < _size222; ++_i226)
            {
              xfer += iprot->readDouble(this->double_list[_i226]);
            }
            iprot->readListEnd();
          }
          this->__isset.double_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->string_list.clear();
            uint32_t _size227;
            apache::thrift::protocol::TType _etype230;
            iprot->readListBegin(_etype230, _size227);
            this->string_list.resize(_size227);
            uint32_t _i231;
            for (_i231 = 0; _i231 < _size227; ++_i231)
            {
              xfer += iprot->readString(this->string_list[_i231]);
            }
            iprot->readListEnd();
          }
          this->__isset.string_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->binary_list.clear();
            uint32_t _size232;
            apache::thrift::protocol::TType _etype235;
            iprot->readListBegin(_etype235, _size232);
            this->binary_list.resize(_size232);
            uint32_t _i236;
            for (_i236 = 0; _i236 < _size232; ++_i236)
            {
              xfer += iprot->readBinary(this->binary_list[_i236]);
            }
            iprot->readListEnd();
          }
          this->__isset.binary_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->boolean_list.clear();
            uint32_t _size237;
            apache::thrift::protocol::TType _etype240;
            iprot->readListBegin(_etype240, _size237);
            this->boolean_list.resize(_size237);
            uint32_t _i241;
            for (_i241 = 0; _i241 < _size237; ++_i241)
            {
              xfer += iprot->readBool(this->boolean_list[_i241]);
            }
            iprot->readListEnd();
          }
          this->__isset.boolean_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size242;
            apache::thrift::protocol::TType _etype245;
            iprot->readListBegin(_etype245, _size242);
            this->struct_list.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              xfer += this->struct_list[_i246].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->byte_set.clear();
            uint32_t _size247;
            apache::thrift::protocol::TType _etype250;
            iprot->readSetBegin(_etype250, _size247);
            uint32_t _i251;
            for (_i251 = 0; _i251 < _size247; ++_i251)
            {
              int8_t _elem252;
              xfer += iprot->readByte(_elem252);
              this->byte_set.insert(_elem252);
            }
            iprot->readSetEnd();
          }
          this->__isset.byte_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i16_set.clear();
            uint32_t _size253;
            apache::thrift::protocol::TType _etype256;
            iprot->readSetBegin(_etype256, _size253);
            uint32_t _i257;
            for (_i257 = 0; _i257 < _size253; ++_i257)
            {
              int16_t _elem258;
              xfer += iprot->readI16(_elem258);
              this->i16_set.insert(_elem258);
            }
            iprot->readSetEnd();
          }
          this->__isset.i16_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size259;
            apache::thrift::protocol::TType _etype262;
            iprot->readSetBegin(_etype262, _size259);
            uint32_t _i263;
            for (_i263 = 0; _i263 < _size259; ++_i263)
            {
              int32_t _elem264;
              xfer += iprot->readI32(_elem264);
              this->i32_set.insert(_elem264);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i64_set.clear();
            uint32_t _size265;
            apache::thrift::protocol::TType _etype268;
            iprot->readSetBegin(_etype268, _size265);
            uint32_t _i269;
            for (_i269 = 0; _i269 < _size265; ++_i269)
            {
              int64_t _elem270;
              xfer += iprot->readI64(_elem270);
              this->i64_set.insert(_elem270);
            }
            iprot->readSetEnd();
          }
          this->__isset.i64_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->double_set.clear();
            uint32_t _size271;
            apache::thrift::protocol::TType _etype274;
            iprot->readSetBegin(_etype274, _size271);
            uint32_t _i275;
            for (_i275 = 0; _i275 < _size271; ++_i275)
            {
              double _elem276;
              xfer += iprot->readDouble(_elem276);
              this->double_set.insert(_elem276);
            }
            iprot->readSetEnd();
          }
          this->__isset.double_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->string_set.clear();
            uint32_t _size277;
            apache::thrift::protocol::TType _etype280;
            iprot->readSetBegin(_etype280, _size277);
            uint32_t _i281;
            for (_i281 = 0; _i281 < _size277; ++_i281)
            {
              std::string _elem282;
              xfer += iprot->readString(_elem282);
              this->string_set.insert(_elem282);
            }
            iprot->readSetEnd();
          }
          this->__isset.string_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->binary_set.clear();
            uint32_t _size283;
            apache::thrift::protocol::TType _etype286;
            iprot->readSetBegin(_etype286, _size283);
            uint32_t _i287;
            for (_i287 = 0; _i287 < _size283; ++_i287)
            {
              std::string _elem288;
              xfer += iprot->readBinary(_elem288);
              this->binary_set.insert(_elem288);
            }
            iprot->readSetEnd();
          }
          this->__isset.binary_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->boolean_set.clear();
            uint32_t _size289;
            apache::thrift::protocol::TType _etype292;
            iprot->readSetBegin(_etype292, _size289);
            uint32_t _i293;
            for (_i293 = 0; _i293 < _size289; ++_i293)
            {
              bool _elem294;
              xfer += iprot->readBool(_elem294);
              this->boolean_set.insert(_elem294);
            }
            iprot->readSetEnd();
          }
          this->__isset.boolean_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->struct_set.clear();
            uint32_t _size295;
            apache::thrift::protocol::TType _etype298;
            iprot->readSetBegin(_etype298, _size295);
            uint32_t _i299;
            for (_i299 = 0; _i299 < _size295; ++_i299)
            {
              Empty _elem300;
              xfer += _elem300.read(iprot);
              this->struct_set.insert(_elem300);
            }
            iprot->readSetEnd();
          }
          this->__isset.struct_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_byte_map.clear();
            uint32_t _size301;
            apache::thrift::protocol::TType _ktype302;
            apache::thrift::protocol::TType _vtype303;
            iprot->readMapBegin(_ktype302, _vtype303, _size301);
            uint32_t _i305;
            for (_i305 = 0; _i305 < _size301; ++_i305)
            {
              int8_t _key306;
              xfer += iprot->readByte(_key306);
              int8_t& _val307 = this->byte_byte_map[_key306];
              xfer += iprot->readByte(_val307);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i16_byte_map.clear();
            uint32_t _size308;
            apache::thrift::protocol::TType _ktype309;
            apache::thrift::protocol::TType _vtype310;
            iprot->readMapBegin(_ktype309, _vtype310, _size308);
            uint32_t _i312;
            for (_i312 = 0; _i312 < _size308; ++_i312)
            {
              int16_t _key313;
              xfer += iprot->readI16(_key313);
              int8_t& _val314 = this->i16_byte_map[_key313];
              xfer += iprot->readByte(_val314);
            }
            iprot->readMapEnd();
          }
          this->__isset.i16_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i32_byte_map.clear();
            uint32_t _size315;
            apache::thrift::protocol::TType _ktype316;
            apache::thrift::protocol::TType _vtype317;
            iprot->readMapBegin(_ktype316, _vtype317, _size315);
            uint32_t _i319;
            for (_i319 = 0; _i319 < _size315; ++_i319)
            {
              int32_t _key320;
              xfer += iprot->readI32(_key320);
              int8_t& _val321 = this->i32_byte_map[_key320];
              xfer += iprot->readByte(_val321);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i64_byte_map.clear();
            uint32_t _size322;
            apache::thrift::protocol::TType _ktype323;
            apache::thrift::protocol::TType _vtype324;
            iprot->readMapBegin(_ktype323, _vtype324, _size322);
            uint32_t _i326;
            for (_i326 = 0; _i326 < _size322; ++_i326)
            {
              int64_t _key327;
              xfer += iprot->readI64(_key327);
              int8_t& _val328 = this->i64_byte_map[_key327];
              xfer += iprot->readByte(_val328);
            }
            iprot->readMapEnd();
          }
          this->__isset.i64_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->double_byte_map.clear();
            uint32_t _size329;
            apache::thrift::protocol::TType _ktype330;
            apache::thrift::protocol::TType _vtype331;
            iprot->readMapBegin(_ktype330, _vtype331, _size329);
            uint32_t _i333;
            for (_i333 = 0; _i333 < _size329; ++_i333)
            {
              double _key334;
              xfer += iprot->readDouble(_key334);
              int8_t& _val335 = this->double_byte_map[_key334];
              xfer += iprot->readByte(_val335);
            }
            iprot->readMapEnd();
          }
          this->__isset.double_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->string_byte_map.clear();
            uint32_t _size336;
            apache::thrift::protocol::TType _ktype337;
            apache::thrift::protocol::TType _vtype338;
            iprot->readMapBegin(_ktype337, _vtype338, _size336);
            uint32_t _i340;
            for (_i340 = 0; _i340 < _size336; ++_i340)
            {
              std::string _key341;
              xfer += iprot->readString(_key341);
              int8_t& _val342 = this->string_byte_map[_key341];
              xfer += iprot->readByte(_val342);
            }
            iprot->readMapEnd();
          }
          this->__isset.string_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->binary_byte_map.clear();
            uint32_t _size343;
            apache::thrift::protocol::TType _ktype344;
            apache::thrift::protocol::TType _vtype345;
            iprot->readMapBegin(_ktype344, _vtype345, _size343);
            uint32_t _i347;
            for (_i347 = 0; _i347 < _size343; ++_i347)
            {
              std::string _key348;
              xfer += iprot->readBinary(_key348);
              int8_t& _val349 = this->binary_byte_map[_key348];
              xfer += iprot->readByte(_val349);
            }
            iprot->readMapEnd();
          }
          this->__isset.binary_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->boolean_byte_map.clear();
            uint32_t _size350;
            apache::thrift::protocol::TType _ktype351;
            apache::thrift::protocol::TType _vtype352;
            iprot->readMapBegin(_ktype351, _vtype352, _size350);
            uint32_t _i354;
            for (_i354 = 0; _i354 < _size350; ++_i354)
            {
              bool _key355;
              xfer += iprot->readBool(_key355);
              int8_t& _val356 = this->boolean_byte_map[_key355];
              xfer += iprot->readByte(_val356);
            }
            iprot->readMapEnd();
          }
          this->__isset.boolean_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i16_map.clear();
            uint32_t _size357;
            apache::thrift::protocol::TType _ktype358;
            apache::thrift::protocol::TType _vtype359;
            iprot->readMapBegin(_ktype358, _vtype359, _size357);
            uint32_t _i361;
            for (_i361 = 0; _i361 < _size357; ++_i361)
            {
              int8_t _key362;
              xfer += iprot->readByte(_key362);
              int16_t& _val363 = this->byte_i16_map[_key362];
              xfer += iprot->readI16(_val363);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i16_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i32_map.clear();
            uint32_t _size364;
            apache::thrift::protocol::TType _ktype365;
            apache::thrift::protocol::TType _vtype366;
            iprot->readMapBegin(_ktype365, _vtype366, _size364);
            uint32_t _i368;
            for (_i368 = 0; _i368 < _size364; ++_i368)
            {
              int8_t _key369;
              xfer += iprot->readByte(_key369);
              int32_t& _val370 = this->byte_i32_map[_key369];
              xfer += iprot->readI32(_val370);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i64_map.clear();
            uint32_t _size371;
            apache::thrift::protocol::TType _ktype372;
            apache::thrift::protocol::TType _vtype373;
            iprot->readMapBegin(_ktype372, _vtype373, _size371);
            uint32_t _i375;
            for (_i375 = 0; _i375 < _size371; ++_i375)
            {
              int8_t _key376;
              xfer += iprot->readByte(_key376);
              int64_t& _val377 = this->byte_i64_map[_key376];
              xfer += iprot->readI64(_val377);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i64_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_double_map.clear();
            uint32_t _size378;
            apache::thrift::protocol::TType _ktype379;
            apache::thrift::protocol::TType _vtype380;
            iprot->readMapBegin(_ktype379, _vtype380, _size378);
            uint32_t _i382;
            for (_i382 = 0; _i382 < _size378; ++_i382)
            {
              int8_t _key383;
              xfer += iprot->readByte(_key383);
              double& _val384 = this->byte_double_map[_key383];
              xfer += iprot->readDouble(_val384);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_double_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_string_map.clear();
            uint32_t _size385;
            apache::thrift::protocol::TType _ktype386;
            apache::thrift::protocol::TType _vtype387;
            iprot->readMapBegin(_ktype386, _vtype387, _size385);
            uint32_t _i389;
            for (_i389 = 0; _i389 < _size385; ++_i389)
            {
              int8_t _key390;
              xfer += iprot->readByte(_key390);
              std::string& _val391 = this->byte_string_map[_key390];
              xfer += iprot->readString(_val391);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_string_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_binary_map.clear();
            uint32_t _size392;
            apache::thrift::protocol::TType _ktype393;
            apache::thrift::protocol::TType _vtype394;
            iprot->readMapBegin(_ktype393, _vtype394, _size392);
            uint32_t _i396;
            for (_i396 = 0; _i396 < _size392; ++_i396)
            {
              int8_t _key397;
              xfer += iprot->readByte(_key397);
              std::string& _val398 = this->byte_binary_map[_key397];
              xfer += iprot->readBinary(_val398);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_binary_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_boolean_map.clear();
            uint32_t _size399;
            apache::thrift::protocol::TType _ktype400;
            apache::thrift::protocol::TType _vtype401;
            iprot->readMapBegin(_ktype400, _vtype401, _size399);
            uint32_t _i403;
            for (_i403 = 0; _i403 < _size399; ++_i403)
            {
              int8_t _key404;
              xfer += iprot->readByte(_key404);
              bool& _val405 = this->byte_boolean_map[_key404];
              xfer += iprot->readBool(_val405);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_boolean_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->list_byte_map.clear();
            uint32_t _size406;
            apache::thrift::protocol::TType _ktype407;
            apache::thrift::protocol::TType _vtype408;
            iprot->readMapBegin(_ktype407, _vtype408, _size406);
            uint32_t _i410;
            for (_i410 = 0; _i410 < _size406; ++_i410)
            {
              std::vector<int8_t>  _key411;
              {
                _key411.clear();
                uint32_t _size413;
                apache::thrift::protocol::TType _etype416;
                iprot->readListBegin(_etype416, _size413);
                _key411.resize(_size413);
                uint32_t _i417;
                for (_i417 = 0; _i417 < _size413; ++_i417)
                {
                  xfer += iprot->readByte(_key411[_i417]);
                }
                iprot->readListEnd();
              }
              int8_t& _val412 = this->list_byte_map[_key411];
              xfer += iprot->readByte(_val412);
            }
            iprot->readMapEnd();
          }
          this->__isset.list_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->set_byte_map.clear();
            uint32_t _size418;
            apache::thrift::protocol::TType _ktype419;
            apache::thrift::protocol::TType _vtype420;
            iprot->readMapBegin(_ktype419, _vtype420, _size418);
            uint32_t _i422;
            for (_i422 = 0; _i422 < _size418; ++_i422)
            {
              std::set<int8_t>  _key423;
              {
                _key423.clear();
                uint32_t _size425;
                apache::thrift::protocol::TType _etype428;
                iprot->readSetBegin(_etype428, _size425);
                uint32_t _i429;
                for (_i429 = 0; _i429 < _size425; ++_i429)
                {
                  int8_t _elem430;
                  xfer += iprot->readByte(_elem430);
                  _key423.insert(_elem430);
                }
                iprot->readSetEnd();
              }
              int8_t& _val424 = this->set_byte_map[_key423];
              xfer += iprot->readByte(_val424);
            }
            iprot->readMapEnd();
          }
          this->__isset.set_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->map_byte_map.clear();
            uint32_t _size431;
            apache::thrift::protocol::TType _ktype432;
            apache::thrift::protocol::TType _vtype433;
            iprot->readMapBegin(_ktype432, _vtype433, _size431);
            uint32_t _i435;
            for (_i435 = 0; _i435 < _size431; ++_i435)
            {
              std::map<int8_t, int8_t>  _key436;
              {
                _key436.clear();
                uint32_t _size438;
                apache::thrift::protocol::TType _ktype439;
                apache::thrift::protocol::TType _vtype440;
                iprot->readMapBegin(_ktype439, _vtype440, _size438);
                uint32_t _i442;
                for (_i442 = 0; _i442 < _size438; ++_i442)
                {
                  int8_t _key443;
                  xfer += iprot->readByte(_key443);
                  int8_t& _val444 = _key436[_key443];
                  xfer += iprot->readByte(_val444);
                }
                iprot->readMapEnd();
              }
              int8_t& _val437 = this->map_byte_map[_key436];
              xfer += iprot->readByte(_val437);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_map_map.clear();
            uint32_t _size445;
            apache::thrift::protocol::TType _ktype446;
            apache::thrift::protocol::TType _vtype447;
            iprot->readMapBegin(_ktype446, _vtype447, _size445);
            uint32_t _i449;
            for (_i449 = 0; _i449 < _size445; ++_i449)
            {
              int8_t _key450;
              xfer += iprot->readByte(_key450);
              std::map<int8_t, int8_t> & _val451 = this->byte_map_map[_key450];
              {
                _val451.clear();
                uint32_t _size452;
                apache::thrift::protocol::TType _ktype453;
                apache::thrift::protocol::TType _vtype454;
                iprot->readMapBegin(_ktype453, _vtype454, _size452);
                uint32_t _i456;
                for (_i456 = 0; _i456 < _size452; ++_i456)
                {
                  int8_t _key457;
                  xfer += iprot->readByte(_key457);
                  int8_t& _val458 = _val451[_key457];
                  xfer += iprot->readByte(_val458);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_map_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_set_map.clear();
            uint32_t _size459;
            apache::thrift::protocol::TType _ktype460;
            apache::thrift::protocol::TType _vtype461;
            iprot->readMapBegin(_ktype460, _vtype461, _size459);
            uint32_t _i463;
            for (_i463 = 0; _i463 < _size459; ++_i463)
            {
              int8_t _key464;
              xfer += iprot->readByte(_key464);
              std::set<int8_t> & _val465 = this->byte_set_map[_key464];
              {
                _val465.clear();
                uint32_t _size466;
                apache::thrift::protocol::TType _etype469;
                iprot->readSetBegin(_etype469, _size466);
                uint32_t _i470;
                for (_i470 = 0; _i470 < _size466; ++_i470)
                {
                  int8_t _elem471;
                  xfer += iprot->readByte(_elem471);
                  _val465.insert(_elem471);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_set_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_list_map.clear();
            uint32_t _size472;
            apache::thrift::protocol::TType _ktype473;
            apache::thrift::protocol::TType _vtype474;
            iprot->readMapBegin(_ktype473, _vtype474, _size472);
            uint32_t _i476;
            for (_i476 = 0; _i476 < _size472; ++_i476)
            {
              int8_t _key477;
              xfer += iprot->readByte(_key477);
              std::vector<int8_t> & _val478 = this->byte_list_map[_key477];
              {
                _val478.clear();
                uint32_t _size479;
                apache::thrift::protocol::TType _etype482;
                iprot->readListBegin(_etype482, _size479);
                _val478.resize(_size479);
                uint32_t _i483;
                for (_i483 = 0; _i483 < _size479; ++_i483)
                {
                  xfer += iprot->readByte(_val478[_i483]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_list_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactProtoTestStruct::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompactProtoTestStruct");
  xfer += oprot->writeFieldBegin("a_byte", apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->a_byte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i16", apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->a_i16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i32", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->a_i32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i64", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->a_i64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_double", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a_double);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_string", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->a_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_binary", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->a_binary);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("true_field", apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->true_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("false_field", apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->false_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("empty_struct_field", apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->empty_struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter484;
    for (_iter484 = this->byte_list.begin(); _iter484 != this->byte_list.end(); ++_iter484)
    {
      xfer += oprot->writeByte((*_iter484));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter485;
    for (_iter485 = this->i16_list.begin(); _iter485 != this->i16_list.end(); ++_iter485)
    {
      xfer += oprot->writeI16((*_iter485));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->i32_list.size());
    std::vector<int32_t> ::const_iterator _iter486;
    for (_iter486 = this->i32_list.begin(); _iter486 != this->i32_list.end(); ++_iter486)
    {
      xfer += oprot->writeI32((*_iter486));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter487;
    for (_iter487 = this->i64_list.begin(); _iter487 != this->i64_list.end(); ++_iter487)
    {
      xfer += oprot->writeI64((*_iter487));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_list", apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->double_list.size());
    std::vector<double> ::const_iterator _iter488;
    for (_iter488 = this->double_list.begin(); _iter488 != this->double_list.end(); ++_iter488)
    {
      xfer += oprot->writeDouble((*_iter488));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_list", apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->string_list.size());
    std::vector<std::string> ::const_iterator _iter489;
    for (_iter489 = this->string_list.begin(); _iter489 != this->string_list.end(); ++_iter489)
    {
      xfer += oprot->writeString((*_iter489));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_list", apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->binary_list.size());
    std::vector<std::string> ::const_iterator _iter490;
    for (_iter490 = this->binary_list.begin(); _iter490 != this->binary_list.end(); ++_iter490)
    {
      xfer += oprot->writeBinary((*_iter490));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_list", apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BOOL, this->boolean_list.size());
    std::vector<bool> ::const_iterator _iter491;
    for (_iter491 = this->boolean_list.begin(); _iter491 != this->boolean_list.end(); ++_iter491)
    {
      xfer += oprot->writeBool((*_iter491));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<Empty> ::const_iterator _iter492;
    for (_iter492 = this->struct_list.begin(); _iter492 != this->struct_list.end(); ++_iter492)
    {
      xfer += (*_iter492).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set", apache::thrift::protocol::T_SET, 20);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, this->byte_set.size());
    std::set<int8_t> ::const_iterator _iter493;
    for (_iter493 = this->byte_set.begin(); _iter493 != this->byte_set.end(); ++_iter493)
    {
      xfer += oprot->writeByte((*_iter493));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_set", apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I16, this->i16_set.size());
    std::set<int16_t> ::const_iterator _iter494;
    for (_iter494 = this->i16_set.begin(); _iter494 != this->i16_set.end(); ++_iter494)
    {
      xfer += oprot->writeI16((*_iter494));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", apache::thrift::protocol::T_SET, 22);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I32, this->i32_set.size());
    std::set<int32_t> ::const_iterator _iter495;
    for (_iter495 = this->i32_set.begin(); _iter495 != this->i32_set.end(); ++_iter495)
    {
      xfer += oprot->writeI32((*_iter495));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_set", apache::thrift::protocol::T_SET, 23);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I64, this->i64_set.size());
    std::set<int64_t> ::const_iterator _iter496;
    for (_iter496 = this->i64_set.begin(); _iter496 != this->i64_set.end(); ++_iter496)
    {
      xfer += oprot->writeI64((*_iter496));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_set", apache::thrift::protocol::T_SET, 24);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_DOUBLE, this->double_set.size());
    std::set<double> ::const_iterator _iter497;
    for (_iter497 = this->double_set.begin(); _iter497 != this->double_set.end(); ++_iter497)
    {
      xfer += oprot->writeDouble((*_iter497));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_set", apache::thrift::protocol::T_SET, 25);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->string_set.size());
    std::set<std::string> ::const_iterator _iter498;
    for (_iter498 = this->string_set.begin(); _iter498 != this->string_set.end(); ++_iter498)
    {
      xfer += oprot->writeString((*_iter498));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_set", apache::thrift::protocol::T_SET, 26);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->binary_set.size());
    std::set<std::string> ::const_iterator _iter499;
    for (_iter499 = this->binary_set.begin(); _iter499 != this->binary_set.end(); ++_iter499)
    {
      xfer += oprot->writeBinary((*_iter499));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_set", apache::thrift::protocol::T_SET, 27);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BOOL, this->boolean_set.size());
    std::set<bool> ::const_iterator _iter500;
    for (_iter500 = this->boolean_set.begin(); _iter500 != this->boolean_set.end(); ++_iter500)
    {
      xfer += oprot->writeBool((*_iter500));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_set", apache::thrift::protocol::T_SET, 28);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->struct_set.size());
    std::set<Empty> ::const_iterator _iter501;
    for (_iter501 = this->struct_set.begin(); _iter501 != this->struct_set.end(); ++_iter501)
    {
      xfer += (*_iter501).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_byte_map", apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->byte_byte_map.size());
    std::map<int8_t, int8_t> ::const_iterator _iter502;
    for (_iter502 = this->byte_byte_map.begin(); _iter502 != this->byte_byte_map.end(); ++_iter502)
    {
      xfer += oprot->writeByte(_iter502->first);
      xfer += oprot->writeByte(_iter502->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_byte_map", apache::thrift::protocol::T_MAP, 30);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_BYTE, this->i16_byte_map.size());
    std::map<int16_t, int8_t> ::const_iterator _iter503;
    for (_iter503 = this->i16_byte_map.begin(); _iter503 != this->i16_byte_map.end(); ++_iter503)
    {
      xfer += oprot->writeI16(_iter503->first);
      xfer += oprot->writeByte(_iter503->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_byte_map", apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->i32_byte_map.size());
    std::map<int32_t, int8_t> ::const_iterator _iter504;
    for (_iter504 = this->i32_byte_map.begin(); _iter504 != this->i32_byte_map.end(); ++_iter504)
    {
      xfer += oprot->writeI32(_iter504->first);
      xfer += oprot->writeByte(_iter504->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_byte_map", apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_BYTE, this->i64_byte_map.size());
    std::map<int64_t, int8_t> ::const_iterator _iter505;
    for (_iter505 = this->i64_byte_map.begin(); _iter505 != this->i64_byte_map.end(); ++_iter505)
    {
      xfer += oprot->writeI64(_iter505->first);
      xfer += oprot->writeByte(_iter505->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_byte_map", apache::thrift::protocol::T_MAP, 33);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_BYTE, this->double_byte_map.size());
    std::map<double, int8_t> ::const_iterator _iter506;
    for (_iter506 = this->double_byte_map.begin(); _iter506 != this->double_byte_map.end(); ++_iter506)
    {
      xfer += oprot->writeDouble(_iter506->first);
      xfer += oprot->writeByte(_iter506->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_byte_map", apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->string_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter507;
    for (_iter507 = this->string_byte_map.begin(); _iter507 != this->string_byte_map.end(); ++_iter507)
    {
      xfer += oprot->writeString(_iter507->first);
      xfer += oprot->writeByte(_iter507->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_byte_map", apache::thrift::protocol::T_MAP, 35);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->binary_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter508;
    for (_iter508 = this->binary_byte_map.begin(); _iter508 != this->binary_byte_map.end(); ++_iter508)
    {
      xfer += oprot->writeBinary(_iter508->first);
      xfer += oprot->writeByte(_iter508->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_byte_map", apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->boolean_byte_map.size());
    std::map<bool, int8_t> ::const_iterator _iter509;
    for (_iter509 = this->boolean_byte_map.begin(); _iter509 != this->boolean_byte_map.end(); ++_iter509)
    {
      xfer += oprot->writeBool(_iter509->first);
      xfer += oprot->writeByte(_iter509->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i16_map", apache::thrift::protocol::T_MAP, 37);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I16, this->byte_i16_map.size());
    std::map<int8_t, int16_t> ::const_iterator _iter510;
    for (_iter510 = this->byte_i16_map.begin(); _iter510 != this->byte_i16_map.end(); ++_iter510)
    {
      xfer += oprot->writeByte(_iter510->first);
      xfer += oprot->writeI16(_iter510->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i32_map", apache::thrift::protocol::T_MAP, 38);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I32, this->byte_i32_map.size());
    std::map<int8_t, int32_t> ::const_iterator _iter511;
    for (_iter511 = this->byte_i32_map.begin(); _iter511 != this->byte_i32_map.end(); ++_iter511)
    {
      xfer += oprot->writeByte(_iter511->first);
      xfer += oprot->writeI32(_iter511->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i64_map", apache::thrift::protocol::T_MAP, 39);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I64, this->byte_i64_map.size());
    std::map<int8_t, int64_t> ::const_iterator _iter512;
    for (_iter512 = this->byte_i64_map.begin(); _iter512 != this->byte_i64_map.end(); ++_iter512)
    {
      xfer += oprot->writeByte(_iter512->first);
      xfer += oprot->writeI64(_iter512->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_double_map", apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_DOUBLE, this->byte_double_map.size());
    std::map<int8_t, double> ::const_iterator _iter513;
    for (_iter513 = this->byte_double_map.begin(); _iter513 != this->byte_double_map.end(); ++_iter513)
    {
      xfer += oprot->writeByte(_iter513->first);
      xfer += oprot->writeDouble(_iter513->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_string_map", apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_string_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter514;
    for (_iter514 = this->byte_string_map.begin(); _iter514 != this->byte_string_map.end(); ++_iter514)
    {
      xfer += oprot->writeByte(_iter514->first);
      xfer += oprot->writeString(_iter514->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_binary_map", apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_binary_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter515;
    for (_iter515 = this->byte_binary_map.begin(); _iter515 != this->byte_binary_map.end(); ++_iter515)
    {
      xfer += oprot->writeByte(_iter515->first);
      xfer += oprot->writeBinary(_iter515->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_boolean_map", apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->byte_boolean_map.size());
    std::map<int8_t, bool> ::const_iterator _iter516;
    for (_iter516 = this->byte_boolean_map.begin(); _iter516 != this->byte_boolean_map.end(); ++_iter516)
    {
      xfer += oprot->writeByte(_iter516->first);
      xfer += oprot->writeBool(_iter516->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("list_byte_map", apache::thrift::protocol::T_MAP, 44);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BYTE, this->list_byte_map.size());
    std::map<std::vector<int8_t> , int8_t> ::const_iterator _iter517;
    for (_iter517 = this->list_byte_map.begin(); _iter517 != this->list_byte_map.end(); ++_iter517)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter517->first.size());
        std::vector<int8_t> ::const_iterator _iter518;
        for (_iter518 = _iter517->first.begin(); _iter518 != _iter517->first.end(); ++_iter518)
        {
          xfer += oprot->writeByte((*_iter518));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeByte(_iter517->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("set_byte_map", apache::thrift::protocol::T_MAP, 45);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_BYTE, this->set_byte_map.size());
    std::map<std::set<int8_t> , int8_t> ::const_iterator _iter519;
    for (_iter519 = this->set_byte_map.begin(); _iter519 != this->set_byte_map.end(); ++_iter519)
    {
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter519->first.size());
        std::set<int8_t> ::const_iterator _iter520;
        for (_iter520 = _iter519->first.begin(); _iter520 != _iter519->first.end(); ++_iter520)
        {
          xfer += oprot->writeByte((*_iter520));
        }
        xfer += oprot->writeSetEnd();
      }
      xfer += oprot->writeByte(_iter519->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_byte_map", apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_BYTE, this->map_byte_map.size());
    std::map<std::map<int8_t, int8_t> , int8_t> ::const_iterator _iter521;
    for (_iter521 = this->map_byte_map.begin(); _iter521 != this->map_byte_map.end(); ++_iter521)
    {
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter521->first.size());
        std::map<int8_t, int8_t> ::const_iterator _iter522;
        for (_iter522 = _iter521->first.begin(); _iter522 != _iter521->first.end(); ++_iter522)
        {
          xfer += oprot->writeByte(_iter522->first);
          xfer += oprot->writeByte(_iter522->second);
        }
        xfer += oprot->writeMapEnd();
      }
      xfer += oprot->writeByte(_iter521->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_map_map", apache::thrift::protocol::T_MAP, 47);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->byte_map_map.size());
    std::map<int8_t, std::map<int8_t, int8_t> > ::const_iterator _iter523;
    for (_iter523 = this->byte_map_map.begin(); _iter523 != this->byte_map_map.end(); ++_iter523)
    {
      xfer += oprot->writeByte(_iter523->first);
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter523->second.size());
        std::map<int8_t, int8_t> ::const_iterator _iter524;
        for (_iter524 = _iter523->second.begin(); _iter524 != _iter523->second.end(); ++_iter524)
        {
          xfer += oprot->writeByte(_iter524->first);
          xfer += oprot->writeByte(_iter524->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set_map", apache::thrift::protocol::T_MAP, 48);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_SET, this->byte_set_map.size());
    std::map<int8_t, std::set<int8_t> > ::const_iterator _iter525;
    for (_iter525 = this->byte_set_map.begin(); _iter525 != this->byte_set_map.end(); ++_iter525)
    {
      xfer += oprot->writeByte(_iter525->first);
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter525->second.size());
        std::set<int8_t> ::const_iterator _iter526;
        for (_iter526 = _iter525->second.begin(); _iter526 != _iter525->second.end(); ++_iter526)
        {
          xfer += oprot->writeByte((*_iter526));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list_map", apache::thrift::protocol::T_MAP, 49);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_LIST, this->byte_list_map.size());
    std::map<int8_t, std::vector<int8_t> > ::const_iterator _iter527;
    for (_iter527 = this->byte_list_map.begin(); _iter527 != this->byte_list_map.end(); ++_iter527)
    {
      xfer += oprot->writeByte(_iter527->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter527->second.size());
        std::vector<int8_t> ::const_iterator _iter528;
        for (_iter528 = _iter527->second.begin(); _iter528 != _iter527->second.end(); ++_iter528)
        {
          xfer += oprot->writeByte((*_iter528));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
