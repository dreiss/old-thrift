/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "DebugProtoTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test { namespace debug {

const char* Doubles::ascii_fingerprint = "4B056EA3B3FB01EC41613CEB91B54CE5";
const uint8_t Doubles::binary_fingerprint[16] = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

// double
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0(
  apache::thrift::protocol::T_DOUBLE);

// void
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34(
  apache::thrift::protocol::T_STOP);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5(
  apache::thrift::protocol::T_STRUCT,
  Doubles::binary_fingerprint,
  trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5,
  trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5);

apache::thrift::reflection::local::TypeSpec* Doubles::local_reflection = 
  &trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

uint32_t Doubles::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nan);
          this->__isset.nan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inf);
          this->__isset.inf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->neginf);
          this->__isset.neginf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->repeating);
          this->__isset.repeating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->big);
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->small);
          this->__isset.small = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zero);
          this->__isset.zero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->negzero);
          this->__isset.negzero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Doubles::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Doubles");
  xfer += oprot->writeFieldBegin("nan", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nan);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inf", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("neginf", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->neginf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("repeating", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->repeating);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->big);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->small);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zero", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("negzero", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->negzero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneOfEach::ascii_fingerprint = "DF7CE78394886179BFAFDB65C5A708BC";
const uint8_t OneOfEach::binary_fingerprint[16] = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

// bool
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305(
  apache::thrift::protocol::T_BOOL);

// byte
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091(
  apache::thrift::protocol::T_BYTE);

// i16
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  apache::thrift::protocol::T_I16);

// i32
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  apache::thrift::protocol::T_I32);

// i64
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44(
  apache::thrift::protocol::T_I64);

// string
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  apache::thrift::protocol::T_STRING);

// list<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// list<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// list<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC(
  apache::thrift::protocol::T_STRUCT,
  OneOfEach::binary_fingerprint,
  trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC);

apache::thrift::reflection::local::TypeSpec* OneOfEach::local_reflection = 
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

uint32_t OneOfEach::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_bite);
          this->__isset.a_bite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->integer16);
          this->__isset.integer16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->integer32);
          this->__isset.integer32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->integer64);
          this->__isset.integer64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_precision);
          this->__isset.double_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->some_characters);
          this->__isset.some_characters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zomg_unicode);
          this->__isset.zomg_unicode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->what_who);
          this->__isset.what_who = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->base64);
          this->__isset.base64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size0;
            apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->byte_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->byte_list[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size5;
            apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->i16_list.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI16(this->i16_list[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size10;
            apache::thrift::protocol::TType _etype13;
            iprot->readListBegin(_etype13, _size10);
            this->i64_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->i64_list[_i14]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneOfEach::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneOfEach");
  xfer += oprot->writeFieldBegin("im_true", apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_bite", apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->a_bite);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer16", apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->integer16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer32", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->integer32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer64", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->integer64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_precision", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->double_precision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("some_characters", apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->some_characters);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zomg_unicode", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->zomg_unicode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("what_who", apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->what_who);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base64", apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeBinary(this->base64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter15;
    for (_iter15 = this->byte_list.begin(); _iter15 != this->byte_list.end(); ++_iter15)
    {
      xfer += oprot->writeByte((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter16;
    for (_iter16 = this->i16_list.begin(); _iter16 != this->i16_list.end(); ++_iter16)
    {
      xfer += oprot->writeI16((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter17;
    for (_iter17 = this->i64_list.begin(); _iter17 != this->i64_list.end(); ++_iter17)
    {
      xfer += oprot->writeI64((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bonk::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Bonk::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3(
  apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3);

apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Bonk::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("type", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nesting::ascii_fingerprint = "9D961D015265DA7A88BA69FB2A7ACDA9";
const uint8_t Nesting::binary_fingerprint[16] = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9(
  apache::thrift::protocol::T_STRUCT,
  Nesting::binary_fingerprint,
  trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9,
  trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9);

apache::thrift::reflection::local::TypeSpec* Nesting::local_reflection = 
  &trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

uint32_t Nesting::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_bonk.read(iprot);
          this->__isset.my_bonk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_ooe.read(iprot);
          this->__isset.my_ooe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nesting::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nesting");
  xfer += oprot->writeFieldBegin("my_bonk", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->my_bonk.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("my_ooe", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->my_ooe.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HolyMoley::ascii_fingerprint = "63B6C93A44D5393BB40AF7623EA1919F";
const uint8_t HolyMoley::binary_fingerprint[16] = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  NULL);

// list<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<list<string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  NULL);

// list<{1:i32;2:string;}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  NULL);

// map<string,list<{1:i32;2:string;}>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  &trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A,
  &trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F,
  &trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F(
  apache::thrift::protocol::T_STRUCT,
  HolyMoley::binary_fingerprint,
  trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F,
  trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F);

apache::thrift::reflection::local::TypeSpec* HolyMoley::local_reflection = 
  &trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

uint32_t HolyMoley::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->big.clear();
            uint32_t _size18;
            apache::thrift::protocol::TType _etype21;
            iprot->readListBegin(_etype21, _size18);
            this->big.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->big[_i22].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->contain.clear();
            uint32_t _size23;
            apache::thrift::protocol::TType _etype26;
            iprot->readSetBegin(_etype26, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::vector<std::string>  _elem28;
              {
                _elem28.clear();
                uint32_t _size29;
                apache::thrift::protocol::TType _etype32;
                iprot->readListBegin(_etype32, _size29);
                _elem28.resize(_size29);
                uint32_t _i33;
                for (_i33 = 0; _i33 < _size29; ++_i33)
                {
                  xfer += iprot->readString(_elem28[_i33]);
                }
                iprot->readListEnd();
              }
              this->contain.insert(_elem28);
            }
            iprot->readSetEnd();
          }
          this->__isset.contain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->bonks.clear();
            uint32_t _size34;
            apache::thrift::protocol::TType _ktype35;
            apache::thrift::protocol::TType _vtype36;
            iprot->readMapBegin(_ktype35, _vtype36, _size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              std::string _key39;
              xfer += iprot->readString(_key39);
              std::vector<Bonk> & _val40 = this->bonks[_key39];
              {
                _val40.clear();
                uint32_t _size41;
                apache::thrift::protocol::TType _etype44;
                iprot->readListBegin(_etype44, _size41);
                _val40.resize(_size41);
                uint32_t _i45;
                for (_i45 = 0; _i45 < _size41; ++_i45)
                {
                  xfer += _val40[_i45].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.bonks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HolyMoley::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HolyMoley");
  xfer += oprot->writeFieldBegin("big", apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->big.size());
    std::vector<OneOfEach> ::const_iterator _iter46;
    for (_iter46 = this->big.begin(); _iter46 != this->big.end(); ++_iter46)
    {
      xfer += (*_iter46).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contain", apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_LIST, this->contain.size());
    std::set<std::vector<std::string> > ::const_iterator _iter47;
    for (_iter47 = this->contain.begin(); _iter47 != this->contain.end(); ++_iter47)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, (*_iter47).size());
        std::vector<std::string> ::const_iterator _iter48;
        for (_iter48 = (*_iter47).begin(); _iter48 != (*_iter47).end(); ++_iter48)
        {
          xfer += oprot->writeString((*_iter48));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bonks", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->bonks.size());
    std::map<std::string, std::vector<Bonk> > ::const_iterator _iter49;
    for (_iter49 = this->bonks.begin(); _iter49 != this->bonks.end(); ++_iter49)
    {
      xfer += oprot->writeString(_iter49->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, _iter49->second.size());
        std::vector<Bonk> ::const_iterator _iter50;
        for (_iter50 = _iter49->second.begin(); _iter50 != _iter49->second.end(); ++_iter50)
        {
          xfer += (*_iter50).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Backwards::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t Backwards::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3(
  apache::thrift::protocol::T_STRUCT,
  Backwards::binary_fingerprint,
  trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3);

apache::thrift::reflection::local::TypeSpec* Backwards::local_reflection = 
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3;

uint32_t Backwards::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_tag1);
          this->__isset.second_tag1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_tag2);
          this->__isset.first_tag2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Backwards::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Backwards");
  xfer += oprot->writeFieldBegin("second_tag1", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->second_tag1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first_tag2", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_tag2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Empty::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Empty::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B(
  apache::thrift::protocol::T_STRUCT,
  Empty::binary_fingerprint,
  trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B);

apache::thrift::reflection::local::TypeSpec* Empty::local_reflection = 
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t Empty::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Empty");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Wrapper::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t Wrapper::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD(
  apache::thrift::protocol::T_STRUCT,
  Wrapper::binary_fingerprint,
  trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::TypeSpec* Wrapper::local_reflection = 
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

uint32_t Wrapper::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->foo.read(iprot);
          this->__isset.foo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wrapper::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Wrapper");
  xfer += oprot->writeFieldBegin("foo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->foo.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RandomStuff::ascii_fingerprint = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
const uint8_t RandomStuff::binary_fingerprint[16] = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

// list<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,{1:{};}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE(
  apache::thrift::protocol::T_STRUCT,
  RandomStuff::binary_fingerprint,
  trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE);

apache::thrift::reflection::local::TypeSpec* RandomStuff::local_reflection = 
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

uint32_t RandomStuff::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->myintlist.clear();
            uint32_t _size51;
            apache::thrift::protocol::TType _etype54;
            iprot->readListBegin(_etype54, _size51);
            this->myintlist.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readI32(this->myintlist[_i55]);
            }
            iprot->readListEnd();
          }
          this->__isset.myintlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->maps.clear();
            uint32_t _size56;
            apache::thrift::protocol::TType _ktype57;
            apache::thrift::protocol::TType _vtype58;
            iprot->readMapBegin(_ktype57, _vtype58, _size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              int32_t _key61;
              xfer += iprot->readI32(_key61);
              Wrapper& _val62 = this->maps[_key61];
              xfer += _val62.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bigint);
          this->__isset.bigint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->triple);
          this->__isset.triple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RandomStuff::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RandomStuff");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("myintlist", apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->myintlist.size());
    std::vector<int32_t> ::const_iterator _iter63;
    for (_iter63 = this->myintlist.begin(); _iter63 != this->myintlist.end(); ++_iter63)
    {
      xfer += oprot->writeI32((*_iter63));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maps", apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, this->maps.size());
    std::map<int32_t, Wrapper> ::const_iterator _iter64;
    for (_iter64 = this->maps.begin(); _iter64 != this->maps.end(); ++_iter64)
    {
      xfer += oprot->writeI32(_iter64->first);
      xfer += _iter64->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bigint", apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->bigint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("triple", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->triple);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Base64::ascii_fingerprint = "D6983CD9C5C18EAC36C957E4BED331AE";
const uint8_t Base64::binary_fingerprint[16] = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE(
  apache::thrift::protocol::T_STRUCT,
  Base64::binary_fingerprint,
  trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE,
  trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE);

apache::thrift::reflection::local::TypeSpec* Base64::local_reflection = 
  &trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

uint32_t Base64::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b1);
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b2);
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b3);
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b4);
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b5);
          this->__isset.b5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b6);
          this->__isset.b6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base64::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Base64");
  xfer += oprot->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->b1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->b2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->b3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->b4);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b5", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->b5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b6", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->b6);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CompactProtoTestStruct::ascii_fingerprint = "FECB06442E1E082EBF36FB8CB75EB414";
const uint8_t CompactProtoTestStruct::binary_fingerprint[16] = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

// list<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// list<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// list<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE(
  apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// set<byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// set<i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// set<i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// set<i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

// set<double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// set<string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// set<{}>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// map<byte,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i16,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i32,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i64,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<double,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<string,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<bool,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,i16>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5);

// map<byte,i32>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

// map<byte,i64>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44);

// map<byte,double>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0);

// map<byte,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// map<byte,bool>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305);

// map<list<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<set<byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<map<byte,byte>,byte>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,map<byte,byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C);

// map<byte,set<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485);

// map<byte,list<byte>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 15, false },
  { 16, false },
  { 17, false },
  { 18, false },
  { 19, false },
  { 20, false },
  { 21, false },
  { 22, false },
  { 23, false },
  { 24, false },
  { 25, false },
  { 26, false },
  { 27, false },
  { 28, false },
  { 29, false },
  { 30, false },
  { 31, false },
  { 32, false },
  { 33, false },
  { 34, false },
  { 35, false },
  { 36, false },
  { 37, false },
  { 38, false },
  { 39, false },
  { 40, false },
  { 41, false },
  { 42, false },
  { 43, false },
  { 44, false },
  { 45, false },
  { 46, false },
  { 47, false },
  { 48, false },
  { 49, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645,
  &trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569,
  &trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F,
  &trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758,
  &trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A,
  &trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451,
  &trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC,
  &trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373,
  &trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9,
  &trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD,
  &trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF,
  &trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2,
  &trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36,
  &trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2,
  &trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82,
  &trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21,
  &trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414(
  apache::thrift::protocol::T_STRUCT,
  CompactProtoTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414,
  trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414);

apache::thrift::reflection::local::TypeSpec* CompactProtoTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

uint32_t CompactProtoTestStruct::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_byte);
          this->__isset.a_byte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->a_i16);
          this->__isset.a_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a_i32);
          this->__isset.a_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->a_i64);
          this->__isset.a_i64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_double);
          this->__isset.a_double = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_string);
          this->__isset.a_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->a_binary);
          this->__isset.a_binary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->true_field);
          this->__isset.true_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->false_field);
          this->__isset.false_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->empty_struct_field.read(iprot);
          this->__isset.empty_struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size86;
            apache::thrift::protocol::TType _etype89;
            iprot->readListBegin(_etype89, _size86);
            this->byte_list.resize(_size86);
            uint32_t _i90;
            for (_i90 = 0; _i90 < _size86; ++_i90)
            {
              xfer += iprot->readByte(this->byte_list[_i90]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size91;
            apache::thrift::protocol::TType _etype94;
            iprot->readListBegin(_etype94, _size91);
            this->i16_list.resize(_size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              xfer += iprot->readI16(this->i16_list[_i95]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i32_list.clear();
            uint32_t _size96;
            apache::thrift::protocol::TType _etype99;
            iprot->readListBegin(_etype99, _size96);
            this->i32_list.resize(_size96);
            uint32_t _i100;
            for (_i100 = 0; _i100 < _size96; ++_i100)
            {
              xfer += iprot->readI32(this->i32_list[_i100]);
            }
            iprot->readListEnd();
          }
          this->__isset.i32_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size101;
            apache::thrift::protocol::TType _etype104;
            iprot->readListBegin(_etype104, _size101);
            this->i64_list.resize(_size101);
            uint32_t _i105;
            for (_i105 = 0; _i105 < _size101; ++_i105)
            {
              xfer += iprot->readI64(this->i64_list[_i105]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->double_list.clear();
            uint32_t _size106;
            apache::thrift::protocol::TType _etype109;
            iprot->readListBegin(_etype109, _size106);
            this->double_list.resize(_size106);
            uint32_t _i110;
            for (_i110 = 0; _i110 < _size106; ++_i110)
            {
              xfer += iprot->readDouble(this->double_list[_i110]);
            }
            iprot->readListEnd();
          }
          this->__isset.double_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->string_list.clear();
            uint32_t _size111;
            apache::thrift::protocol::TType _etype114;
            iprot->readListBegin(_etype114, _size111);
            this->string_list.resize(_size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              xfer += iprot->readString(this->string_list[_i115]);
            }
            iprot->readListEnd();
          }
          this->__isset.string_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->binary_list.clear();
            uint32_t _size116;
            apache::thrift::protocol::TType _etype119;
            iprot->readListBegin(_etype119, _size116);
            this->binary_list.resize(_size116);
            uint32_t _i120;
            for (_i120 = 0; _i120 < _size116; ++_i120)
            {
              xfer += iprot->readBinary(this->binary_list[_i120]);
            }
            iprot->readListEnd();
          }
          this->__isset.binary_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->boolean_list.clear();
            uint32_t _size121;
            apache::thrift::protocol::TType _etype124;
            iprot->readListBegin(_etype124, _size121);
            this->boolean_list.resize(_size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              xfer += iprot->readBool(this->boolean_list[_i125]);
            }
            iprot->readListEnd();
          }
          this->__isset.boolean_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size126;
            apache::thrift::protocol::TType _etype129;
            iprot->readListBegin(_etype129, _size126);
            this->struct_list.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += this->struct_list[_i130].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->byte_set.clear();
            uint32_t _size131;
            apache::thrift::protocol::TType _etype134;
            iprot->readSetBegin(_etype134, _size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              int8_t _elem136;
              xfer += iprot->readByte(_elem136);
              this->byte_set.insert(_elem136);
            }
            iprot->readSetEnd();
          }
          this->__isset.byte_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i16_set.clear();
            uint32_t _size137;
            apache::thrift::protocol::TType _etype140;
            iprot->readSetBegin(_etype140, _size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              int16_t _elem142;
              xfer += iprot->readI16(_elem142);
              this->i16_set.insert(_elem142);
            }
            iprot->readSetEnd();
          }
          this->__isset.i16_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size143;
            apache::thrift::protocol::TType _etype146;
            iprot->readSetBegin(_etype146, _size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              int32_t _elem148;
              xfer += iprot->readI32(_elem148);
              this->i32_set.insert(_elem148);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->i64_set.clear();
            uint32_t _size149;
            apache::thrift::protocol::TType _etype152;
            iprot->readSetBegin(_etype152, _size149);
            uint32_t _i153;
            for (_i153 = 0; _i153 < _size149; ++_i153)
            {
              int64_t _elem154;
              xfer += iprot->readI64(_elem154);
              this->i64_set.insert(_elem154);
            }
            iprot->readSetEnd();
          }
          this->__isset.i64_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->double_set.clear();
            uint32_t _size155;
            apache::thrift::protocol::TType _etype158;
            iprot->readSetBegin(_etype158, _size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              double _elem160;
              xfer += iprot->readDouble(_elem160);
              this->double_set.insert(_elem160);
            }
            iprot->readSetEnd();
          }
          this->__isset.double_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->string_set.clear();
            uint32_t _size161;
            apache::thrift::protocol::TType _etype164;
            iprot->readSetBegin(_etype164, _size161);
            uint32_t _i165;
            for (_i165 = 0; _i165 < _size161; ++_i165)
            {
              std::string _elem166;
              xfer += iprot->readString(_elem166);
              this->string_set.insert(_elem166);
            }
            iprot->readSetEnd();
          }
          this->__isset.string_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->binary_set.clear();
            uint32_t _size167;
            apache::thrift::protocol::TType _etype170;
            iprot->readSetBegin(_etype170, _size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              std::string _elem172;
              xfer += iprot->readBinary(_elem172);
              this->binary_set.insert(_elem172);
            }
            iprot->readSetEnd();
          }
          this->__isset.binary_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->boolean_set.clear();
            uint32_t _size173;
            apache::thrift::protocol::TType _etype176;
            iprot->readSetBegin(_etype176, _size173);
            uint32_t _i177;
            for (_i177 = 0; _i177 < _size173; ++_i177)
            {
              bool _elem178;
              xfer += iprot->readBool(_elem178);
              this->boolean_set.insert(_elem178);
            }
            iprot->readSetEnd();
          }
          this->__isset.boolean_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == apache::thrift::protocol::T_SET) {
          {
            this->struct_set.clear();
            uint32_t _size179;
            apache::thrift::protocol::TType _etype182;
            iprot->readSetBegin(_etype182, _size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              Empty _elem184;
              xfer += _elem184.read(iprot);
              this->struct_set.insert(_elem184);
            }
            iprot->readSetEnd();
          }
          this->__isset.struct_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_byte_map.clear();
            uint32_t _size185;
            apache::thrift::protocol::TType _ktype186;
            apache::thrift::protocol::TType _vtype187;
            iprot->readMapBegin(_ktype186, _vtype187, _size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              int8_t _key190;
              xfer += iprot->readByte(_key190);
              int8_t& _val191 = this->byte_byte_map[_key190];
              xfer += iprot->readByte(_val191);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i16_byte_map.clear();
            uint32_t _size192;
            apache::thrift::protocol::TType _ktype193;
            apache::thrift::protocol::TType _vtype194;
            iprot->readMapBegin(_ktype193, _vtype194, _size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              int16_t _key197;
              xfer += iprot->readI16(_key197);
              int8_t& _val198 = this->i16_byte_map[_key197];
              xfer += iprot->readByte(_val198);
            }
            iprot->readMapEnd();
          }
          this->__isset.i16_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i32_byte_map.clear();
            uint32_t _size199;
            apache::thrift::protocol::TType _ktype200;
            apache::thrift::protocol::TType _vtype201;
            iprot->readMapBegin(_ktype200, _vtype201, _size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              int32_t _key204;
              xfer += iprot->readI32(_key204);
              int8_t& _val205 = this->i32_byte_map[_key204];
              xfer += iprot->readByte(_val205);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->i64_byte_map.clear();
            uint32_t _size206;
            apache::thrift::protocol::TType _ktype207;
            apache::thrift::protocol::TType _vtype208;
            iprot->readMapBegin(_ktype207, _vtype208, _size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              int64_t _key211;
              xfer += iprot->readI64(_key211);
              int8_t& _val212 = this->i64_byte_map[_key211];
              xfer += iprot->readByte(_val212);
            }
            iprot->readMapEnd();
          }
          this->__isset.i64_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->double_byte_map.clear();
            uint32_t _size213;
            apache::thrift::protocol::TType _ktype214;
            apache::thrift::protocol::TType _vtype215;
            iprot->readMapBegin(_ktype214, _vtype215, _size213);
            uint32_t _i217;
            for (_i217 = 0; _i217 < _size213; ++_i217)
            {
              double _key218;
              xfer += iprot->readDouble(_key218);
              int8_t& _val219 = this->double_byte_map[_key218];
              xfer += iprot->readByte(_val219);
            }
            iprot->readMapEnd();
          }
          this->__isset.double_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->string_byte_map.clear();
            uint32_t _size220;
            apache::thrift::protocol::TType _ktype221;
            apache::thrift::protocol::TType _vtype222;
            iprot->readMapBegin(_ktype221, _vtype222, _size220);
            uint32_t _i224;
            for (_i224 = 0; _i224 < _size220; ++_i224)
            {
              std::string _key225;
              xfer += iprot->readString(_key225);
              int8_t& _val226 = this->string_byte_map[_key225];
              xfer += iprot->readByte(_val226);
            }
            iprot->readMapEnd();
          }
          this->__isset.string_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->binary_byte_map.clear();
            uint32_t _size227;
            apache::thrift::protocol::TType _ktype228;
            apache::thrift::protocol::TType _vtype229;
            iprot->readMapBegin(_ktype228, _vtype229, _size227);
            uint32_t _i231;
            for (_i231 = 0; _i231 < _size227; ++_i231)
            {
              std::string _key232;
              xfer += iprot->readBinary(_key232);
              int8_t& _val233 = this->binary_byte_map[_key232];
              xfer += iprot->readByte(_val233);
            }
            iprot->readMapEnd();
          }
          this->__isset.binary_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->boolean_byte_map.clear();
            uint32_t _size234;
            apache::thrift::protocol::TType _ktype235;
            apache::thrift::protocol::TType _vtype236;
            iprot->readMapBegin(_ktype235, _vtype236, _size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              bool _key239;
              xfer += iprot->readBool(_key239);
              int8_t& _val240 = this->boolean_byte_map[_key239];
              xfer += iprot->readByte(_val240);
            }
            iprot->readMapEnd();
          }
          this->__isset.boolean_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i16_map.clear();
            uint32_t _size241;
            apache::thrift::protocol::TType _ktype242;
            apache::thrift::protocol::TType _vtype243;
            iprot->readMapBegin(_ktype242, _vtype243, _size241);
            uint32_t _i245;
            for (_i245 = 0; _i245 < _size241; ++_i245)
            {
              int8_t _key246;
              xfer += iprot->readByte(_key246);
              int16_t& _val247 = this->byte_i16_map[_key246];
              xfer += iprot->readI16(_val247);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i16_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i32_map.clear();
            uint32_t _size248;
            apache::thrift::protocol::TType _ktype249;
            apache::thrift::protocol::TType _vtype250;
            iprot->readMapBegin(_ktype249, _vtype250, _size248);
            uint32_t _i252;
            for (_i252 = 0; _i252 < _size248; ++_i252)
            {
              int8_t _key253;
              xfer += iprot->readByte(_key253);
              int32_t& _val254 = this->byte_i32_map[_key253];
              xfer += iprot->readI32(_val254);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_i64_map.clear();
            uint32_t _size255;
            apache::thrift::protocol::TType _ktype256;
            apache::thrift::protocol::TType _vtype257;
            iprot->readMapBegin(_ktype256, _vtype257, _size255);
            uint32_t _i259;
            for (_i259 = 0; _i259 < _size255; ++_i259)
            {
              int8_t _key260;
              xfer += iprot->readByte(_key260);
              int64_t& _val261 = this->byte_i64_map[_key260];
              xfer += iprot->readI64(_val261);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i64_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_double_map.clear();
            uint32_t _size262;
            apache::thrift::protocol::TType _ktype263;
            apache::thrift::protocol::TType _vtype264;
            iprot->readMapBegin(_ktype263, _vtype264, _size262);
            uint32_t _i266;
            for (_i266 = 0; _i266 < _size262; ++_i266)
            {
              int8_t _key267;
              xfer += iprot->readByte(_key267);
              double& _val268 = this->byte_double_map[_key267];
              xfer += iprot->readDouble(_val268);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_double_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_string_map.clear();
            uint32_t _size269;
            apache::thrift::protocol::TType _ktype270;
            apache::thrift::protocol::TType _vtype271;
            iprot->readMapBegin(_ktype270, _vtype271, _size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              int8_t _key274;
              xfer += iprot->readByte(_key274);
              std::string& _val275 = this->byte_string_map[_key274];
              xfer += iprot->readString(_val275);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_string_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_binary_map.clear();
            uint32_t _size276;
            apache::thrift::protocol::TType _ktype277;
            apache::thrift::protocol::TType _vtype278;
            iprot->readMapBegin(_ktype277, _vtype278, _size276);
            uint32_t _i280;
            for (_i280 = 0; _i280 < _size276; ++_i280)
            {
              int8_t _key281;
              xfer += iprot->readByte(_key281);
              std::string& _val282 = this->byte_binary_map[_key281];
              xfer += iprot->readBinary(_val282);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_binary_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_boolean_map.clear();
            uint32_t _size283;
            apache::thrift::protocol::TType _ktype284;
            apache::thrift::protocol::TType _vtype285;
            iprot->readMapBegin(_ktype284, _vtype285, _size283);
            uint32_t _i287;
            for (_i287 = 0; _i287 < _size283; ++_i287)
            {
              int8_t _key288;
              xfer += iprot->readByte(_key288);
              bool& _val289 = this->byte_boolean_map[_key288];
              xfer += iprot->readBool(_val289);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_boolean_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->list_byte_map.clear();
            uint32_t _size290;
            apache::thrift::protocol::TType _ktype291;
            apache::thrift::protocol::TType _vtype292;
            iprot->readMapBegin(_ktype291, _vtype292, _size290);
            uint32_t _i294;
            for (_i294 = 0; _i294 < _size290; ++_i294)
            {
              std::vector<int8_t>  _key295;
              {
                _key295.clear();
                uint32_t _size297;
                apache::thrift::protocol::TType _etype300;
                iprot->readListBegin(_etype300, _size297);
                _key295.resize(_size297);
                uint32_t _i301;
                for (_i301 = 0; _i301 < _size297; ++_i301)
                {
                  xfer += iprot->readByte(_key295[_i301]);
                }
                iprot->readListEnd();
              }
              int8_t& _val296 = this->list_byte_map[_key295];
              xfer += iprot->readByte(_val296);
            }
            iprot->readMapEnd();
          }
          this->__isset.list_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->set_byte_map.clear();
            uint32_t _size302;
            apache::thrift::protocol::TType _ktype303;
            apache::thrift::protocol::TType _vtype304;
            iprot->readMapBegin(_ktype303, _vtype304, _size302);
            uint32_t _i306;
            for (_i306 = 0; _i306 < _size302; ++_i306)
            {
              std::set<int8_t>  _key307;
              {
                _key307.clear();
                uint32_t _size309;
                apache::thrift::protocol::TType _etype312;
                iprot->readSetBegin(_etype312, _size309);
                uint32_t _i313;
                for (_i313 = 0; _i313 < _size309; ++_i313)
                {
                  int8_t _elem314;
                  xfer += iprot->readByte(_elem314);
                  _key307.insert(_elem314);
                }
                iprot->readSetEnd();
              }
              int8_t& _val308 = this->set_byte_map[_key307];
              xfer += iprot->readByte(_val308);
            }
            iprot->readMapEnd();
          }
          this->__isset.set_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->map_byte_map.clear();
            uint32_t _size315;
            apache::thrift::protocol::TType _ktype316;
            apache::thrift::protocol::TType _vtype317;
            iprot->readMapBegin(_ktype316, _vtype317, _size315);
            uint32_t _i319;
            for (_i319 = 0; _i319 < _size315; ++_i319)
            {
              std::map<int8_t, int8_t>  _key320;
              {
                _key320.clear();
                uint32_t _size322;
                apache::thrift::protocol::TType _ktype323;
                apache::thrift::protocol::TType _vtype324;
                iprot->readMapBegin(_ktype323, _vtype324, _size322);
                uint32_t _i326;
                for (_i326 = 0; _i326 < _size322; ++_i326)
                {
                  int8_t _key327;
                  xfer += iprot->readByte(_key327);
                  int8_t& _val328 = _key320[_key327];
                  xfer += iprot->readByte(_val328);
                }
                iprot->readMapEnd();
              }
              int8_t& _val321 = this->map_byte_map[_key320];
              xfer += iprot->readByte(_val321);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_map_map.clear();
            uint32_t _size329;
            apache::thrift::protocol::TType _ktype330;
            apache::thrift::protocol::TType _vtype331;
            iprot->readMapBegin(_ktype330, _vtype331, _size329);
            uint32_t _i333;
            for (_i333 = 0; _i333 < _size329; ++_i333)
            {
              int8_t _key334;
              xfer += iprot->readByte(_key334);
              std::map<int8_t, int8_t> & _val335 = this->byte_map_map[_key334];
              {
                _val335.clear();
                uint32_t _size336;
                apache::thrift::protocol::TType _ktype337;
                apache::thrift::protocol::TType _vtype338;
                iprot->readMapBegin(_ktype337, _vtype338, _size336);
                uint32_t _i340;
                for (_i340 = 0; _i340 < _size336; ++_i340)
                {
                  int8_t _key341;
                  xfer += iprot->readByte(_key341);
                  int8_t& _val342 = _val335[_key341];
                  xfer += iprot->readByte(_val342);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_map_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_set_map.clear();
            uint32_t _size343;
            apache::thrift::protocol::TType _ktype344;
            apache::thrift::protocol::TType _vtype345;
            iprot->readMapBegin(_ktype344, _vtype345, _size343);
            uint32_t _i347;
            for (_i347 = 0; _i347 < _size343; ++_i347)
            {
              int8_t _key348;
              xfer += iprot->readByte(_key348);
              std::set<int8_t> & _val349 = this->byte_set_map[_key348];
              {
                _val349.clear();
                uint32_t _size350;
                apache::thrift::protocol::TType _etype353;
                iprot->readSetBegin(_etype353, _size350);
                uint32_t _i354;
                for (_i354 = 0; _i354 < _size350; ++_i354)
                {
                  int8_t _elem355;
                  xfer += iprot->readByte(_elem355);
                  _val349.insert(_elem355);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_set_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->byte_list_map.clear();
            uint32_t _size356;
            apache::thrift::protocol::TType _ktype357;
            apache::thrift::protocol::TType _vtype358;
            iprot->readMapBegin(_ktype357, _vtype358, _size356);
            uint32_t _i360;
            for (_i360 = 0; _i360 < _size356; ++_i360)
            {
              int8_t _key361;
              xfer += iprot->readByte(_key361);
              std::vector<int8_t> & _val362 = this->byte_list_map[_key361];
              {
                _val362.clear();
                uint32_t _size363;
                apache::thrift::protocol::TType _etype366;
                iprot->readListBegin(_etype366, _size363);
                _val362.resize(_size363);
                uint32_t _i367;
                for (_i367 = 0; _i367 < _size363; ++_i367)
                {
                  xfer += iprot->readByte(_val362[_i367]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_list_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactProtoTestStruct::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompactProtoTestStruct");
  xfer += oprot->writeFieldBegin("a_byte", apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->a_byte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i16", apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->a_i16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i32", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->a_i32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i64", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->a_i64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_double", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a_double);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_string", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->a_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_binary", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->a_binary);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("true_field", apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->true_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("false_field", apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->false_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("empty_struct_field", apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->empty_struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, this->byte_list.size());
    std::vector<int8_t> ::const_iterator _iter368;
    for (_iter368 = this->byte_list.begin(); _iter368 != this->byte_list.end(); ++_iter368)
    {
      xfer += oprot->writeByte((*_iter368));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I16, this->i16_list.size());
    std::vector<int16_t> ::const_iterator _iter369;
    for (_iter369 = this->i16_list.begin(); _iter369 != this->i16_list.end(); ++_iter369)
    {
      xfer += oprot->writeI16((*_iter369));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_list", apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, this->i32_list.size());
    std::vector<int32_t> ::const_iterator _iter370;
    for (_iter370 = this->i32_list.begin(); _iter370 != this->i32_list.end(); ++_iter370)
    {
      xfer += oprot->writeI32((*_iter370));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64, this->i64_list.size());
    std::vector<int64_t> ::const_iterator _iter371;
    for (_iter371 = this->i64_list.begin(); _iter371 != this->i64_list.end(); ++_iter371)
    {
      xfer += oprot->writeI64((*_iter371));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_list", apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->double_list.size());
    std::vector<double> ::const_iterator _iter372;
    for (_iter372 = this->double_list.begin(); _iter372 != this->double_list.end(); ++_iter372)
    {
      xfer += oprot->writeDouble((*_iter372));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_list", apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->string_list.size());
    std::vector<std::string> ::const_iterator _iter373;
    for (_iter373 = this->string_list.begin(); _iter373 != this->string_list.end(); ++_iter373)
    {
      xfer += oprot->writeString((*_iter373));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_list", apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->binary_list.size());
    std::vector<std::string> ::const_iterator _iter374;
    for (_iter374 = this->binary_list.begin(); _iter374 != this->binary_list.end(); ++_iter374)
    {
      xfer += oprot->writeBinary((*_iter374));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_list", apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_BOOL, this->boolean_list.size());
    std::vector<bool> ::const_iterator _iter375;
    for (_iter375 = this->boolean_list.begin(); _iter375 != this->boolean_list.end(); ++_iter375)
    {
      xfer += oprot->writeBool((*_iter375));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->struct_list.size());
    std::vector<Empty> ::const_iterator _iter376;
    for (_iter376 = this->struct_list.begin(); _iter376 != this->struct_list.end(); ++_iter376)
    {
      xfer += (*_iter376).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set", apache::thrift::protocol::T_SET, 20);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, this->byte_set.size());
    std::set<int8_t> ::const_iterator _iter377;
    for (_iter377 = this->byte_set.begin(); _iter377 != this->byte_set.end(); ++_iter377)
    {
      xfer += oprot->writeByte((*_iter377));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_set", apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I16, this->i16_set.size());
    std::set<int16_t> ::const_iterator _iter378;
    for (_iter378 = this->i16_set.begin(); _iter378 != this->i16_set.end(); ++_iter378)
    {
      xfer += oprot->writeI16((*_iter378));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", apache::thrift::protocol::T_SET, 22);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I32, this->i32_set.size());
    std::set<int32_t> ::const_iterator _iter379;
    for (_iter379 = this->i32_set.begin(); _iter379 != this->i32_set.end(); ++_iter379)
    {
      xfer += oprot->writeI32((*_iter379));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_set", apache::thrift::protocol::T_SET, 23);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_I64, this->i64_set.size());
    std::set<int64_t> ::const_iterator _iter380;
    for (_iter380 = this->i64_set.begin(); _iter380 != this->i64_set.end(); ++_iter380)
    {
      xfer += oprot->writeI64((*_iter380));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_set", apache::thrift::protocol::T_SET, 24);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_DOUBLE, this->double_set.size());
    std::set<double> ::const_iterator _iter381;
    for (_iter381 = this->double_set.begin(); _iter381 != this->double_set.end(); ++_iter381)
    {
      xfer += oprot->writeDouble((*_iter381));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_set", apache::thrift::protocol::T_SET, 25);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->string_set.size());
    std::set<std::string> ::const_iterator _iter382;
    for (_iter382 = this->string_set.begin(); _iter382 != this->string_set.end(); ++_iter382)
    {
      xfer += oprot->writeString((*_iter382));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_set", apache::thrift::protocol::T_SET, 26);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRING, this->binary_set.size());
    std::set<std::string> ::const_iterator _iter383;
    for (_iter383 = this->binary_set.begin(); _iter383 != this->binary_set.end(); ++_iter383)
    {
      xfer += oprot->writeBinary((*_iter383));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_set", apache::thrift::protocol::T_SET, 27);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BOOL, this->boolean_set.size());
    std::set<bool> ::const_iterator _iter384;
    for (_iter384 = this->boolean_set.begin(); _iter384 != this->boolean_set.end(); ++_iter384)
    {
      xfer += oprot->writeBool((*_iter384));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_set", apache::thrift::protocol::T_SET, 28);
  {
    xfer += oprot->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->struct_set.size());
    std::set<Empty> ::const_iterator _iter385;
    for (_iter385 = this->struct_set.begin(); _iter385 != this->struct_set.end(); ++_iter385)
    {
      xfer += (*_iter385).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_byte_map", apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->byte_byte_map.size());
    std::map<int8_t, int8_t> ::const_iterator _iter386;
    for (_iter386 = this->byte_byte_map.begin(); _iter386 != this->byte_byte_map.end(); ++_iter386)
    {
      xfer += oprot->writeByte(_iter386->first);
      xfer += oprot->writeByte(_iter386->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_byte_map", apache::thrift::protocol::T_MAP, 30);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_BYTE, this->i16_byte_map.size());
    std::map<int16_t, int8_t> ::const_iterator _iter387;
    for (_iter387 = this->i16_byte_map.begin(); _iter387 != this->i16_byte_map.end(); ++_iter387)
    {
      xfer += oprot->writeI16(_iter387->first);
      xfer += oprot->writeByte(_iter387->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_byte_map", apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->i32_byte_map.size());
    std::map<int32_t, int8_t> ::const_iterator _iter388;
    for (_iter388 = this->i32_byte_map.begin(); _iter388 != this->i32_byte_map.end(); ++_iter388)
    {
      xfer += oprot->writeI32(_iter388->first);
      xfer += oprot->writeByte(_iter388->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_byte_map", apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_BYTE, this->i64_byte_map.size());
    std::map<int64_t, int8_t> ::const_iterator _iter389;
    for (_iter389 = this->i64_byte_map.begin(); _iter389 != this->i64_byte_map.end(); ++_iter389)
    {
      xfer += oprot->writeI64(_iter389->first);
      xfer += oprot->writeByte(_iter389->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_byte_map", apache::thrift::protocol::T_MAP, 33);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_BYTE, this->double_byte_map.size());
    std::map<double, int8_t> ::const_iterator _iter390;
    for (_iter390 = this->double_byte_map.begin(); _iter390 != this->double_byte_map.end(); ++_iter390)
    {
      xfer += oprot->writeDouble(_iter390->first);
      xfer += oprot->writeByte(_iter390->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_byte_map", apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->string_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter391;
    for (_iter391 = this->string_byte_map.begin(); _iter391 != this->string_byte_map.end(); ++_iter391)
    {
      xfer += oprot->writeString(_iter391->first);
      xfer += oprot->writeByte(_iter391->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_byte_map", apache::thrift::protocol::T_MAP, 35);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->binary_byte_map.size());
    std::map<std::string, int8_t> ::const_iterator _iter392;
    for (_iter392 = this->binary_byte_map.begin(); _iter392 != this->binary_byte_map.end(); ++_iter392)
    {
      xfer += oprot->writeBinary(_iter392->first);
      xfer += oprot->writeByte(_iter392->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_byte_map", apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->boolean_byte_map.size());
    std::map<bool, int8_t> ::const_iterator _iter393;
    for (_iter393 = this->boolean_byte_map.begin(); _iter393 != this->boolean_byte_map.end(); ++_iter393)
    {
      xfer += oprot->writeBool(_iter393->first);
      xfer += oprot->writeByte(_iter393->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i16_map", apache::thrift::protocol::T_MAP, 37);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I16, this->byte_i16_map.size());
    std::map<int8_t, int16_t> ::const_iterator _iter394;
    for (_iter394 = this->byte_i16_map.begin(); _iter394 != this->byte_i16_map.end(); ++_iter394)
    {
      xfer += oprot->writeByte(_iter394->first);
      xfer += oprot->writeI16(_iter394->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i32_map", apache::thrift::protocol::T_MAP, 38);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I32, this->byte_i32_map.size());
    std::map<int8_t, int32_t> ::const_iterator _iter395;
    for (_iter395 = this->byte_i32_map.begin(); _iter395 != this->byte_i32_map.end(); ++_iter395)
    {
      xfer += oprot->writeByte(_iter395->first);
      xfer += oprot->writeI32(_iter395->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i64_map", apache::thrift::protocol::T_MAP, 39);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_I64, this->byte_i64_map.size());
    std::map<int8_t, int64_t> ::const_iterator _iter396;
    for (_iter396 = this->byte_i64_map.begin(); _iter396 != this->byte_i64_map.end(); ++_iter396)
    {
      xfer += oprot->writeByte(_iter396->first);
      xfer += oprot->writeI64(_iter396->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_double_map", apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_DOUBLE, this->byte_double_map.size());
    std::map<int8_t, double> ::const_iterator _iter397;
    for (_iter397 = this->byte_double_map.begin(); _iter397 != this->byte_double_map.end(); ++_iter397)
    {
      xfer += oprot->writeByte(_iter397->first);
      xfer += oprot->writeDouble(_iter397->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_string_map", apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_string_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter398;
    for (_iter398 = this->byte_string_map.begin(); _iter398 != this->byte_string_map.end(); ++_iter398)
    {
      xfer += oprot->writeByte(_iter398->first);
      xfer += oprot->writeString(_iter398->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_binary_map", apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->byte_binary_map.size());
    std::map<int8_t, std::string> ::const_iterator _iter399;
    for (_iter399 = this->byte_binary_map.begin(); _iter399 != this->byte_binary_map.end(); ++_iter399)
    {
      xfer += oprot->writeByte(_iter399->first);
      xfer += oprot->writeBinary(_iter399->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_boolean_map", apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->byte_boolean_map.size());
    std::map<int8_t, bool> ::const_iterator _iter400;
    for (_iter400 = this->byte_boolean_map.begin(); _iter400 != this->byte_boolean_map.end(); ++_iter400)
    {
      xfer += oprot->writeByte(_iter400->first);
      xfer += oprot->writeBool(_iter400->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("list_byte_map", apache::thrift::protocol::T_MAP, 44);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BYTE, this->list_byte_map.size());
    std::map<std::vector<int8_t> , int8_t> ::const_iterator _iter401;
    for (_iter401 = this->list_byte_map.begin(); _iter401 != this->list_byte_map.end(); ++_iter401)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter401->first.size());
        std::vector<int8_t> ::const_iterator _iter402;
        for (_iter402 = _iter401->first.begin(); _iter402 != _iter401->first.end(); ++_iter402)
        {
          xfer += oprot->writeByte((*_iter402));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeByte(_iter401->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("set_byte_map", apache::thrift::protocol::T_MAP, 45);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_BYTE, this->set_byte_map.size());
    std::map<std::set<int8_t> , int8_t> ::const_iterator _iter403;
    for (_iter403 = this->set_byte_map.begin(); _iter403 != this->set_byte_map.end(); ++_iter403)
    {
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter403->first.size());
        std::set<int8_t> ::const_iterator _iter404;
        for (_iter404 = _iter403->first.begin(); _iter404 != _iter403->first.end(); ++_iter404)
        {
          xfer += oprot->writeByte((*_iter404));
        }
        xfer += oprot->writeSetEnd();
      }
      xfer += oprot->writeByte(_iter403->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_byte_map", apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_BYTE, this->map_byte_map.size());
    std::map<std::map<int8_t, int8_t> , int8_t> ::const_iterator _iter405;
    for (_iter405 = this->map_byte_map.begin(); _iter405 != this->map_byte_map.end(); ++_iter405)
    {
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter405->first.size());
        std::map<int8_t, int8_t> ::const_iterator _iter406;
        for (_iter406 = _iter405->first.begin(); _iter406 != _iter405->first.end(); ++_iter406)
        {
          xfer += oprot->writeByte(_iter406->first);
          xfer += oprot->writeByte(_iter406->second);
        }
        xfer += oprot->writeMapEnd();
      }
      xfer += oprot->writeByte(_iter405->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_map_map", apache::thrift::protocol::T_MAP, 47);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->byte_map_map.size());
    std::map<int8_t, std::map<int8_t, int8_t> > ::const_iterator _iter407;
    for (_iter407 = this->byte_map_map.begin(); _iter407 != this->byte_map_map.end(); ++_iter407)
    {
      xfer += oprot->writeByte(_iter407->first);
      {
        xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, _iter407->second.size());
        std::map<int8_t, int8_t> ::const_iterator _iter408;
        for (_iter408 = _iter407->second.begin(); _iter408 != _iter407->second.end(); ++_iter408)
        {
          xfer += oprot->writeByte(_iter408->first);
          xfer += oprot->writeByte(_iter408->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set_map", apache::thrift::protocol::T_MAP, 48);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_SET, this->byte_set_map.size());
    std::map<int8_t, std::set<int8_t> > ::const_iterator _iter409;
    for (_iter409 = this->byte_set_map.begin(); _iter409 != this->byte_set_map.end(); ++_iter409)
    {
      xfer += oprot->writeByte(_iter409->first);
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_BYTE, _iter409->second.size());
        std::set<int8_t> ::const_iterator _iter410;
        for (_iter410 = _iter409->second.begin(); _iter410 != _iter409->second.end(); ++_iter410)
        {
          xfer += oprot->writeByte((*_iter410));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list_map", apache::thrift::protocol::T_MAP, 49);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_LIST, this->byte_list_map.size());
    std::map<int8_t, std::vector<int8_t> > ::const_iterator _iter411;
    for (_iter411 = this->byte_list_map.begin(); _iter411 != this->byte_list_map.end(); ++_iter411)
    {
      xfer += oprot->writeByte(_iter411->first);
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_BYTE, _iter411->second.size());
        std::vector<int8_t> ::const_iterator _iter412;
        for (_iter412 = _iter411->second.begin(); _iter412 != _iter411->second.end(); ++_iter412)
        {
          xfer += oprot->writeByte((*_iter412));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlowUp::ascii_fingerprint = "C31E40A0D0B3CC76A374729E31FB848F";
const uint8_t BlowUp::binary_fingerprint[16] = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

// map<i32,string>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// set<map<i32,string>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37(
  apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// map<list<i32>,set<map<i32,string>>>
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64(
  apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37);

apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F(
  apache::thrift::protocol::T_STRUCT,
  BlowUp::binary_fingerprint,
  trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F,
  trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F);

apache::thrift::reflection::local::TypeSpec* BlowUp::local_reflection = 
  &trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

uint32_t BlowUp::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b1.clear();
            uint32_t _size413;
            apache::thrift::protocol::TType _ktype414;
            apache::thrift::protocol::TType _vtype415;
            iprot->readMapBegin(_ktype414, _vtype415, _size413);
            uint32_t _i417;
            for (_i417 = 0; _i417 < _size413; ++_i417)
            {
              std::vector<int32_t>  _key418;
              {
                _key418.clear();
                uint32_t _size420;
                apache::thrift::protocol::TType _etype423;
                iprot->readListBegin(_etype423, _size420);
                _key418.resize(_size420);
                uint32_t _i424;
                for (_i424 = 0; _i424 < _size420; ++_i424)
                {
                  xfer += iprot->readI32(_key418[_i424]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val419 = this->b1[_key418];
              {
                _val419.clear();
                uint32_t _size425;
                apache::thrift::protocol::TType _etype428;
                iprot->readSetBegin(_etype428, _size425);
                uint32_t _i429;
                for (_i429 = 0; _i429 < _size425; ++_i429)
                {
                  std::map<int32_t, std::string>  _elem430;
                  {
                    _elem430.clear();
                    uint32_t _size431;
                    apache::thrift::protocol::TType _ktype432;
                    apache::thrift::protocol::TType _vtype433;
                    iprot->readMapBegin(_ktype432, _vtype433, _size431);
                    uint32_t _i435;
                    for (_i435 = 0; _i435 < _size431; ++_i435)
                    {
                      int32_t _key436;
                      xfer += iprot->readI32(_key436);
                      std::string& _val437 = _elem430[_key436];
                      xfer += iprot->readString(_val437);
                    }
                    iprot->readMapEnd();
                  }
                  _val419.insert(_elem430);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b2.clear();
            uint32_t _size438;
            apache::thrift::protocol::TType _ktype439;
            apache::thrift::protocol::TType _vtype440;
            iprot->readMapBegin(_ktype439, _vtype440, _size438);
            uint32_t _i442;
            for (_i442 = 0; _i442 < _size438; ++_i442)
            {
              std::vector<int32_t>  _key443;
              {
                _key443.clear();
                uint32_t _size445;
                apache::thrift::protocol::TType _etype448;
                iprot->readListBegin(_etype448, _size445);
                _key443.resize(_size445);
                uint32_t _i449;
                for (_i449 = 0; _i449 < _size445; ++_i449)
                {
                  xfer += iprot->readI32(_key443[_i449]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val444 = this->b2[_key443];
              {
                _val444.clear();
                uint32_t _size450;
                apache::thrift::protocol::TType _etype453;
                iprot->readSetBegin(_etype453, _size450);
                uint32_t _i454;
                for (_i454 = 0; _i454 < _size450; ++_i454)
                {
                  std::map<int32_t, std::string>  _elem455;
                  {
                    _elem455.clear();
                    uint32_t _size456;
                    apache::thrift::protocol::TType _ktype457;
                    apache::thrift::protocol::TType _vtype458;
                    iprot->readMapBegin(_ktype457, _vtype458, _size456);
                    uint32_t _i460;
                    for (_i460 = 0; _i460 < _size456; ++_i460)
                    {
                      int32_t _key461;
                      xfer += iprot->readI32(_key461);
                      std::string& _val462 = _elem455[_key461];
                      xfer += iprot->readString(_val462);
                    }
                    iprot->readMapEnd();
                  }
                  _val444.insert(_elem455);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b3.clear();
            uint32_t _size463;
            apache::thrift::protocol::TType _ktype464;
            apache::thrift::protocol::TType _vtype465;
            iprot->readMapBegin(_ktype464, _vtype465, _size463);
            uint32_t _i467;
            for (_i467 = 0; _i467 < _size463; ++_i467)
            {
              std::vector<int32_t>  _key468;
              {
                _key468.clear();
                uint32_t _size470;
                apache::thrift::protocol::TType _etype473;
                iprot->readListBegin(_etype473, _size470);
                _key468.resize(_size470);
                uint32_t _i474;
                for (_i474 = 0; _i474 < _size470; ++_i474)
                {
                  xfer += iprot->readI32(_key468[_i474]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val469 = this->b3[_key468];
              {
                _val469.clear();
                uint32_t _size475;
                apache::thrift::protocol::TType _etype478;
                iprot->readSetBegin(_etype478, _size475);
                uint32_t _i479;
                for (_i479 = 0; _i479 < _size475; ++_i479)
                {
                  std::map<int32_t, std::string>  _elem480;
                  {
                    _elem480.clear();
                    uint32_t _size481;
                    apache::thrift::protocol::TType _ktype482;
                    apache::thrift::protocol::TType _vtype483;
                    iprot->readMapBegin(_ktype482, _vtype483, _size481);
                    uint32_t _i485;
                    for (_i485 = 0; _i485 < _size481; ++_i485)
                    {
                      int32_t _key486;
                      xfer += iprot->readI32(_key486);
                      std::string& _val487 = _elem480[_key486];
                      xfer += iprot->readString(_val487);
                    }
                    iprot->readMapEnd();
                  }
                  _val469.insert(_elem480);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->b4.clear();
            uint32_t _size488;
            apache::thrift::protocol::TType _ktype489;
            apache::thrift::protocol::TType _vtype490;
            iprot->readMapBegin(_ktype489, _vtype490, _size488);
            uint32_t _i492;
            for (_i492 = 0; _i492 < _size488; ++_i492)
            {
              std::vector<int32_t>  _key493;
              {
                _key493.clear();
                uint32_t _size495;
                apache::thrift::protocol::TType _etype498;
                iprot->readListBegin(_etype498, _size495);
                _key493.resize(_size495);
                uint32_t _i499;
                for (_i499 = 0; _i499 < _size495; ++_i499)
                {
                  xfer += iprot->readI32(_key493[_i499]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val494 = this->b4[_key493];
              {
                _val494.clear();
                uint32_t _size500;
                apache::thrift::protocol::TType _etype503;
                iprot->readSetBegin(_etype503, _size500);
                uint32_t _i504;
                for (_i504 = 0; _i504 < _size500; ++_i504)
                {
                  std::map<int32_t, std::string>  _elem505;
                  {
                    _elem505.clear();
                    uint32_t _size506;
                    apache::thrift::protocol::TType _ktype507;
                    apache::thrift::protocol::TType _vtype508;
                    iprot->readMapBegin(_ktype507, _vtype508, _size506);
                    uint32_t _i510;
                    for (_i510 = 0; _i510 < _size506; ++_i510)
                    {
                      int32_t _key511;
                      xfer += iprot->readI32(_key511);
                      std::string& _val512 = _elem505[_key511];
                      xfer += iprot->readString(_val512);
                    }
                    iprot->readMapEnd();
                  }
                  _val494.insert(_elem505);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlowUp::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlowUp");
  xfer += oprot->writeFieldBegin("b1", apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b1.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter513;
    for (_iter513 = this->b1.begin(); _iter513 != this->b1.end(); ++_iter513)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter513->first.size());
        std::vector<int32_t> ::const_iterator _iter514;
        for (_iter514 = _iter513->first.begin(); _iter514 != _iter513->first.end(); ++_iter514)
        {
          xfer += oprot->writeI32((*_iter514));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter513->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter515;
        for (_iter515 = _iter513->second.begin(); _iter515 != _iter513->second.end(); ++_iter515)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter515).size());
            std::map<int32_t, std::string> ::const_iterator _iter516;
            for (_iter516 = (*_iter515).begin(); _iter516 != (*_iter515).end(); ++_iter516)
            {
              xfer += oprot->writeI32(_iter516->first);
              xfer += oprot->writeString(_iter516->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b2.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter517;
    for (_iter517 = this->b2.begin(); _iter517 != this->b2.end(); ++_iter517)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter517->first.size());
        std::vector<int32_t> ::const_iterator _iter518;
        for (_iter518 = _iter517->first.begin(); _iter518 != _iter517->first.end(); ++_iter518)
        {
          xfer += oprot->writeI32((*_iter518));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter517->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter519;
        for (_iter519 = _iter517->second.begin(); _iter519 != _iter517->second.end(); ++_iter519)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter519).size());
            std::map<int32_t, std::string> ::const_iterator _iter520;
            for (_iter520 = (*_iter519).begin(); _iter520 != (*_iter519).end(); ++_iter520)
            {
              xfer += oprot->writeI32(_iter520->first);
              xfer += oprot->writeString(_iter520->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b3.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter521;
    for (_iter521 = this->b3.begin(); _iter521 != this->b3.end(); ++_iter521)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter521->first.size());
        std::vector<int32_t> ::const_iterator _iter522;
        for (_iter522 = _iter521->first.begin(); _iter522 != _iter521->first.end(); ++_iter522)
        {
          xfer += oprot->writeI32((*_iter522));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter521->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter523;
        for (_iter523 = _iter521->second.begin(); _iter523 != _iter521->second.end(); ++_iter523)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter523).size());
            std::map<int32_t, std::string> ::const_iterator _iter524;
            for (_iter524 = (*_iter523).begin(); _iter524 != (*_iter523).end(); ++_iter524)
            {
              xfer += oprot->writeI32(_iter524->first);
              xfer += oprot->writeString(_iter524->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_SET, this->b4.size());
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter525;
    for (_iter525 = this->b4.begin(); _iter525 != this->b4.end(); ++_iter525)
    {
      {
        xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32, _iter525->first.size());
        std::vector<int32_t> ::const_iterator _iter526;
        for (_iter526 = _iter525->first.begin(); _iter526 != _iter525->first.end(); ++_iter526)
        {
          xfer += oprot->writeI32((*_iter526));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(apache::thrift::protocol::T_MAP, _iter525->second.size());
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter527;
        for (_iter527 = _iter525->second.begin(); _iter527 != _iter525->second.end(); ++_iter527)
        {
          {
            xfer += oprot->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRING, (*_iter527).size());
            std::map<int32_t, std::string> ::const_iterator _iter528;
            for (_iter528 = (*_iter527).begin(); _iter528 != (*_iter527).end(); ++_iter528)
            {
              xfer += oprot->writeI32(_iter528->first);
              xfer += oprot->writeString(_iter528->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
