/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef DebugProtoTest_TYPES_H
#define DebugProtoTest_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace thrift { namespace test { namespace debug {

enum SomeEnum {
  ONE = 1,
  TWO = 2
};

// enum
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778;

typedef std::map<int32_t, int32_t>  SomeMap;

class Doubles {
 public:

  static const char* ascii_fingerprint; // = "4B056EA3B3FB01EC41613CEB91B54CE5";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

  Doubles() : nan(0), inf(0), neginf(0), repeating(0), big(0), small(0), zero(0), negzero(0) {
  }

  virtual ~Doubles() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  double nan;
  double inf;
  double neginf;
  double repeating;
  double big;
  double small;
  double zero;
  double negzero;

  struct __isset {
    __isset() : nan(false), inf(false), neginf(false), repeating(false), big(false), small(false), zero(false), negzero(false) {}
    bool nan;
    bool inf;
    bool neginf;
    bool repeating;
    bool big;
    bool small;
    bool zero;
    bool negzero;
  } __isset;

  bool operator == (const Doubles & rhs) const
  {
    if (!(nan == rhs.nan))
      return false;
    if (!(inf == rhs.inf))
      return false;
    if (!(neginf == rhs.neginf))
      return false;
    if (!(repeating == rhs.repeating))
      return false;
    if (!(big == rhs.big))
      return false;
    if (!(small == rhs.small))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(negzero == rhs.negzero))
      return false;
    return true;
  }
  bool operator != (const Doubles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Doubles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// double
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0;

// void
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34;

// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

class OneOfEach {
 public:

  static const char* ascii_fingerprint; // = "DF7CE78394886179BFAFDB65C5A708BC";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

  OneOfEach() : im_true(0), im_false(0), a_bite(200), integer16(33000), integer32(0), integer64(10000000000LL), double_precision(0), some_characters(""), zomg_unicode(""), what_who(0), base64("") {
    byte_list.push_back(1);
    byte_list.push_back(2);
    byte_list.push_back(3);

    i16_list.push_back(1);
    i16_list.push_back(2);
    i16_list.push_back(3);

    i64_list.push_back(1LL);
    i64_list.push_back(2LL);
    i64_list.push_back(3LL);

  }

  virtual ~OneOfEach() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  bool im_true;
  bool im_false;
  int8_t a_bite;
  int16_t integer16;
  int32_t integer32;
  int64_t integer64;
  double double_precision;
  std::string some_characters;
  std::string zomg_unicode;
  bool what_who;
  std::string base64;
  std::vector<int8_t>  byte_list;
  std::vector<int16_t>  i16_list;
  std::vector<int64_t>  i64_list;

  struct __isset {
    __isset() : im_true(false), im_false(false), a_bite(false), integer16(false), integer32(false), integer64(false), double_precision(false), some_characters(false), zomg_unicode(false), what_who(false), base64(false), byte_list(false), i16_list(false), i64_list(false) {}
    bool im_true;
    bool im_false;
    bool a_bite;
    bool integer16;
    bool integer32;
    bool integer64;
    bool double_precision;
    bool some_characters;
    bool zomg_unicode;
    bool what_who;
    bool base64;
    bool byte_list;
    bool i16_list;
    bool i64_list;
  } __isset;

  bool operator == (const OneOfEach & rhs) const
  {
    if (!(im_true == rhs.im_true))
      return false;
    if (!(im_false == rhs.im_false))
      return false;
    if (!(a_bite == rhs.a_bite))
      return false;
    if (!(integer16 == rhs.integer16))
      return false;
    if (!(integer32 == rhs.integer32))
      return false;
    if (!(integer64 == rhs.integer64))
      return false;
    if (!(double_precision == rhs.double_precision))
      return false;
    if (!(some_characters == rhs.some_characters))
      return false;
    if (!(zomg_unicode == rhs.zomg_unicode))
      return false;
    if (!(what_who == rhs.what_who))
      return false;
    if (!(base64 == rhs.base64))
      return false;
    if (!(byte_list == rhs.byte_list))
      return false;
    if (!(i16_list == rhs.i16_list))
      return false;
    if (!(i64_list == rhs.i64_list))
      return false;
    return true;
  }
  bool operator != (const OneOfEach &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OneOfEach & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// bool
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305;

// byte
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091;

// i16
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5;

// i32
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A;

// i64
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44;

// string
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21;

// list<byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859;

// list<i16>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9;

// list<i64>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0;

// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

class Bonk {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Bonk() : type(0), message("") {
  }

  virtual ~Bonk() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t type;
  std::string message;

  struct __isset {
    __isset() : type(false), message(false) {}
    bool type;
    bool message;
  } __isset;

  bool operator == (const Bonk & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Bonk &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bonk & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:i32;2:string;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

class Nesting {
 public:

  static const char* ascii_fingerprint; // = "9D961D015265DA7A88BA69FB2A7ACDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

  Nesting() {
  }

  virtual ~Nesting() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  Bonk my_bonk;
  OneOfEach my_ooe;

  struct __isset {
    __isset() : my_bonk(false), my_ooe(false) {}
    bool my_bonk;
    bool my_ooe;
  } __isset;

  bool operator == (const Nesting & rhs) const
  {
    if (!(my_bonk == rhs.my_bonk))
      return false;
    if (!(my_ooe == rhs.my_ooe))
      return false;
    return true;
  }
  bool operator != (const Nesting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Nesting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

class HolyMoley {
 public:

  static const char* ascii_fingerprint; // = "63B6C93A44D5393BB40AF7623EA1919F";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

  HolyMoley() {
  }

  virtual ~HolyMoley() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::vector<OneOfEach>  big;
  std::set<std::vector<std::string> >  contain;
  std::map<std::string, std::vector<Bonk> >  bonks;

  struct __isset {
    __isset() : big(false), contain(false), bonks(false) {}
    bool big;
    bool contain;
    bool bonks;
  } __isset;

  bool operator == (const HolyMoley & rhs) const
  {
    if (!(big == rhs.big))
      return false;
    if (!(contain == rhs.contain))
      return false;
    if (!(bonks == rhs.bonks))
      return false;
    return true;
  }
  bool operator != (const HolyMoley &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HolyMoley & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A;

// list<string>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233;

// set<list<string>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F;

// list<{1:i32;2:string;}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A;

// map<string,list<{1:i32;2:string;}>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD;

// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

class Backwards {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Backwards() : first_tag2(0), second_tag1(0) {
  }

  virtual ~Backwards() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t first_tag2;
  int32_t second_tag1;

  struct __isset {
    __isset() : first_tag2(false), second_tag1(false) {}
    bool first_tag2;
    bool second_tag1;
  } __isset;

  bool operator == (const Backwards & rhs) const
  {
    if (!(first_tag2 == rhs.first_tag2))
      return false;
    if (!(second_tag1 == rhs.second_tag1))
      return false;
    return true;
  }
  bool operator != (const Backwards &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Backwards & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:i32;2:i32;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3;

class Empty {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Empty() {
  }

  virtual ~Empty() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Empty & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Empty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Empty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

class Wrapper {
 public:

  static const char* ascii_fingerprint; // = "2C32A565725135A023CB591D1A993CFD";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

  Wrapper() {
  }

  virtual ~Wrapper() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  Empty foo;

  struct __isset {
    __isset() : foo(false) {}
    bool foo;
  } __isset;

  bool operator == (const Wrapper & rhs) const
  {
    if (!(foo == rhs.foo))
      return false;
    return true;
  }
  bool operator != (const Wrapper &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Wrapper & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:{};}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

class RandomStuff {
 public:

  static const char* ascii_fingerprint; // = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

  RandomStuff() : a(0), b(0), c(0), d(0), bigint(0), triple(0) {
  }

  virtual ~RandomStuff() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t a;
  int32_t b;
  int32_t c;
  int32_t d;
  std::vector<int32_t>  myintlist;
  std::map<int32_t, Wrapper>  maps;
  int64_t bigint;
  double triple;

  struct __isset {
    __isset() : a(false), b(false), c(false), d(false), myintlist(false), maps(false), bigint(false), triple(false) {}
    bool a;
    bool b;
    bool c;
    bool d;
    bool myintlist;
    bool maps;
    bool bigint;
    bool triple;
  } __isset;

  bool operator == (const RandomStuff & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(myintlist == rhs.myintlist))
      return false;
    if (!(maps == rhs.maps))
      return false;
    if (!(bigint == rhs.bigint))
      return false;
    if (!(triple == rhs.triple))
      return false;
    return true;
  }
  bool operator != (const RandomStuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RandomStuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// list<i32>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D;

// map<i32,{1:{};}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E;

// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

class Base64 {
 public:

  static const char* ascii_fingerprint; // = "D6983CD9C5C18EAC36C957E4BED331AE";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

  Base64() : a(0), b1(""), b2(""), b3(""), b4(""), b5(""), b6("") {
  }

  virtual ~Base64() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t a;
  std::string b1;
  std::string b2;
  std::string b3;
  std::string b4;
  std::string b5;
  std::string b6;

  struct __isset {
    __isset() : a(false), b1(false), b2(false), b3(false), b4(false), b5(false), b6(false) {}
    bool a;
    bool b1;
    bool b2;
    bool b3;
    bool b4;
    bool b5;
    bool b6;
  } __isset;

  bool operator == (const Base64 & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b1 == rhs.b1))
      return false;
    if (!(b2 == rhs.b2))
      return false;
    if (!(b3 == rhs.b3))
      return false;
    if (!(b4 == rhs.b4))
      return false;
    if (!(b5 == rhs.b5))
      return false;
    if (!(b6 == rhs.b6))
      return false;
    return true;
  }
  bool operator != (const Base64 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Base64 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

class CompactProtoTestStruct {
 public:

  static const char* ascii_fingerprint; // = "FECB06442E1E082EBF36FB8CB75EB414";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

  CompactProtoTestStruct() : a_byte(0), a_i16(0), a_i32(0), a_i64(0), a_double(0), a_string(""), a_binary(""), true_field(0), false_field(0) {
  }

  virtual ~CompactProtoTestStruct() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int8_t a_byte;
  int16_t a_i16;
  int32_t a_i32;
  int64_t a_i64;
  double a_double;
  std::string a_string;
  std::string a_binary;
  bool true_field;
  bool false_field;
  Empty empty_struct_field;
  std::vector<int8_t>  byte_list;
  std::vector<int16_t>  i16_list;
  std::vector<int32_t>  i32_list;
  std::vector<int64_t>  i64_list;
  std::vector<double>  double_list;
  std::vector<std::string>  string_list;
  std::vector<std::string>  binary_list;
  std::vector<bool>  boolean_list;
  std::vector<Empty>  struct_list;
  std::set<int8_t>  byte_set;
  std::set<int16_t>  i16_set;
  std::set<int32_t>  i32_set;
  std::set<int64_t>  i64_set;
  std::set<double>  double_set;
  std::set<std::string>  string_set;
  std::set<std::string>  binary_set;
  std::set<bool>  boolean_set;
  std::set<Empty>  struct_set;
  std::map<int8_t, int8_t>  byte_byte_map;
  std::map<int16_t, int8_t>  i16_byte_map;
  std::map<int32_t, int8_t>  i32_byte_map;
  std::map<int64_t, int8_t>  i64_byte_map;
  std::map<double, int8_t>  double_byte_map;
  std::map<std::string, int8_t>  string_byte_map;
  std::map<std::string, int8_t>  binary_byte_map;
  std::map<bool, int8_t>  boolean_byte_map;
  std::map<int8_t, int16_t>  byte_i16_map;
  std::map<int8_t, int32_t>  byte_i32_map;
  std::map<int8_t, int64_t>  byte_i64_map;
  std::map<int8_t, double>  byte_double_map;
  std::map<int8_t, std::string>  byte_string_map;
  std::map<int8_t, std::string>  byte_binary_map;
  std::map<int8_t, bool>  byte_boolean_map;
  std::map<std::vector<int8_t> , int8_t>  list_byte_map;
  std::map<std::set<int8_t> , int8_t>  set_byte_map;
  std::map<std::map<int8_t, int8_t> , int8_t>  map_byte_map;
  std::map<int8_t, std::map<int8_t, int8_t> >  byte_map_map;
  std::map<int8_t, std::set<int8_t> >  byte_set_map;
  std::map<int8_t, std::vector<int8_t> >  byte_list_map;

  struct __isset {
    __isset() : a_byte(false), a_i16(false), a_i32(false), a_i64(false), a_double(false), a_string(false), a_binary(false), true_field(false), false_field(false), empty_struct_field(false), byte_list(false), i16_list(false), i32_list(false), i64_list(false), double_list(false), string_list(false), binary_list(false), boolean_list(false), struct_list(false), byte_set(false), i16_set(false), i32_set(false), i64_set(false), double_set(false), string_set(false), binary_set(false), boolean_set(false), struct_set(false), byte_byte_map(false), i16_byte_map(false), i32_byte_map(false), i64_byte_map(false), double_byte_map(false), string_byte_map(false), binary_byte_map(false), boolean_byte_map(false), byte_i16_map(false), byte_i32_map(false), byte_i64_map(false), byte_double_map(false), byte_string_map(false), byte_binary_map(false), byte_boolean_map(false), list_byte_map(false), set_byte_map(false), map_byte_map(false), byte_map_map(false), byte_set_map(false), byte_list_map(false) {}
    bool a_byte;
    bool a_i16;
    bool a_i32;
    bool a_i64;
    bool a_double;
    bool a_string;
    bool a_binary;
    bool true_field;
    bool false_field;
    bool empty_struct_field;
    bool byte_list;
    bool i16_list;
    bool i32_list;
    bool i64_list;
    bool double_list;
    bool string_list;
    bool binary_list;
    bool boolean_list;
    bool struct_list;
    bool byte_set;
    bool i16_set;
    bool i32_set;
    bool i64_set;
    bool double_set;
    bool string_set;
    bool binary_set;
    bool boolean_set;
    bool struct_set;
    bool byte_byte_map;
    bool i16_byte_map;
    bool i32_byte_map;
    bool i64_byte_map;
    bool double_byte_map;
    bool string_byte_map;
    bool binary_byte_map;
    bool boolean_byte_map;
    bool byte_i16_map;
    bool byte_i32_map;
    bool byte_i64_map;
    bool byte_double_map;
    bool byte_string_map;
    bool byte_binary_map;
    bool byte_boolean_map;
    bool list_byte_map;
    bool set_byte_map;
    bool map_byte_map;
    bool byte_map_map;
    bool byte_set_map;
    bool byte_list_map;
  } __isset;

  bool operator == (const CompactProtoTestStruct & rhs) const
  {
    if (!(a_byte == rhs.a_byte))
      return false;
    if (!(a_i16 == rhs.a_i16))
      return false;
    if (!(a_i32 == rhs.a_i32))
      return false;
    if (!(a_i64 == rhs.a_i64))
      return false;
    if (!(a_double == rhs.a_double))
      return false;
    if (!(a_string == rhs.a_string))
      return false;
    if (!(a_binary == rhs.a_binary))
      return false;
    if (!(true_field == rhs.true_field))
      return false;
    if (!(false_field == rhs.false_field))
      return false;
    if (!(empty_struct_field == rhs.empty_struct_field))
      return false;
    if (!(byte_list == rhs.byte_list))
      return false;
    if (!(i16_list == rhs.i16_list))
      return false;
    if (!(i32_list == rhs.i32_list))
      return false;
    if (!(i64_list == rhs.i64_list))
      return false;
    if (!(double_list == rhs.double_list))
      return false;
    if (!(string_list == rhs.string_list))
      return false;
    if (!(binary_list == rhs.binary_list))
      return false;
    if (!(boolean_list == rhs.boolean_list))
      return false;
    if (!(struct_list == rhs.struct_list))
      return false;
    if (!(byte_set == rhs.byte_set))
      return false;
    if (!(i16_set == rhs.i16_set))
      return false;
    if (!(i32_set == rhs.i32_set))
      return false;
    if (!(i64_set == rhs.i64_set))
      return false;
    if (!(double_set == rhs.double_set))
      return false;
    if (!(string_set == rhs.string_set))
      return false;
    if (!(binary_set == rhs.binary_set))
      return false;
    if (!(boolean_set == rhs.boolean_set))
      return false;
    if (!(struct_set == rhs.struct_set))
      return false;
    if (!(byte_byte_map == rhs.byte_byte_map))
      return false;
    if (!(i16_byte_map == rhs.i16_byte_map))
      return false;
    if (!(i32_byte_map == rhs.i32_byte_map))
      return false;
    if (!(i64_byte_map == rhs.i64_byte_map))
      return false;
    if (!(double_byte_map == rhs.double_byte_map))
      return false;
    if (!(string_byte_map == rhs.string_byte_map))
      return false;
    if (!(binary_byte_map == rhs.binary_byte_map))
      return false;
    if (!(boolean_byte_map == rhs.boolean_byte_map))
      return false;
    if (!(byte_i16_map == rhs.byte_i16_map))
      return false;
    if (!(byte_i32_map == rhs.byte_i32_map))
      return false;
    if (!(byte_i64_map == rhs.byte_i64_map))
      return false;
    if (!(byte_double_map == rhs.byte_double_map))
      return false;
    if (!(byte_string_map == rhs.byte_string_map))
      return false;
    if (!(byte_binary_map == rhs.byte_binary_map))
      return false;
    if (!(byte_boolean_map == rhs.byte_boolean_map))
      return false;
    if (!(list_byte_map == rhs.list_byte_map))
      return false;
    if (!(set_byte_map == rhs.set_byte_map))
      return false;
    if (!(map_byte_map == rhs.map_byte_map))
      return false;
    if (!(byte_map_map == rhs.byte_map_map))
      return false;
    if (!(byte_set_map == rhs.byte_set_map))
      return false;
    if (!(byte_list_map == rhs.byte_list_map))
      return false;
    return true;
  }
  bool operator != (const CompactProtoTestStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompactProtoTestStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// list<double>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442;

// list<bool>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645;

// list<{}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE;

// set<byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485;

// set<i16>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F;

// set<i32>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491;

// set<i64>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569;

// set<double>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9;

// set<string>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A;

// set<bool>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F;

// set<{}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582;

// map<byte,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C;

// map<i16,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758;

// map<i32,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A;

// map<i64,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451;

// map<double,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496;

// map<string,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D;

// map<bool,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC;

// map<byte,i16>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373;

// map<byte,i32>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9;

// map<byte,i64>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD;

// map<byte,double>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1;

// map<byte,string>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04;

// map<byte,bool>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF;

// map<list<byte>,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2;

// map<set<byte>,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36;

// map<map<byte,byte>,byte>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2;

// map<byte,map<byte,byte>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82;

// map<byte,set<byte>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21;

// map<byte,list<byte>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A;

// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

class ExceptionWithAMap : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "F7C641917C22B35AE581CCD54910B00D";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

  ExceptionWithAMap() : blah("") {
  }

  virtual ~ExceptionWithAMap() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string blah;
  std::map<std::string, std::string>  map_field;

  struct __isset {
    __isset() : blah(false), map_field(false) {}
    bool blah;
    bool map_field;
  } __isset;

  bool operator == (const ExceptionWithAMap & rhs) const
  {
    if (!(blah == rhs.blah))
      return false;
    if (!(map_field == rhs.map_field))
      return false;
    return true;
  }
  bool operator != (const ExceptionWithAMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExceptionWithAMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// map<string,string>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E525259F38EF383401EB0A958458F19C;

// {1:string;2:map<string,string>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D;

class BlowUp {
 public:

  static const char* ascii_fingerprint; // = "C31E40A0D0B3CC76A374729E31FB848F";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

  BlowUp() {
  }

  virtual ~BlowUp() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > >  b1;
  std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > >  b2;
  std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > >  b3;
  std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > >  b4;

  struct __isset {
    __isset() : b1(false), b2(false), b3(false), b4(false) {}
    bool b1;
    bool b2;
    bool b3;
    bool b4;
  } __isset;

  bool operator == (const BlowUp & rhs) const
  {
    if (!(b1 == rhs.b1))
      return false;
    if (!(b2 == rhs.b2))
      return false;
    if (!(b3 == rhs.b3))
      return false;
    if (!(b4 == rhs.b4))
      return false;
    return true;
  }
  bool operator != (const BlowUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlowUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// map<i32,string>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9;

// set<map<i32,string>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37;

// map<list<i32>,set<map<i32,string>>>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64;

// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

class ReverseOrderStruct {
 public:

  static const char* ascii_fingerprint; // = "BA93DC8E0310101D81517021CB327269";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x93,0xDC,0x8E,0x03,0x10,0x10,0x1D,0x81,0x51,0x70,0x21,0xCB,0x32,0x72,0x69};

  ReverseOrderStruct() : first(""), second(0), third(0), fourth(0) {
  }

  virtual ~ReverseOrderStruct() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string first;
  int16_t second;
  int32_t third;
  int64_t fourth;

  struct __isset {
    __isset() : first(false), second(false), third(false), fourth(false) {}
    bool first;
    bool second;
    bool third;
    bool fourth;
  } __isset;

  bool operator == (const ReverseOrderStruct & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    if (!(third == rhs.third))
      return false;
    if (!(fourth == rhs.fourth))
      return false;
    return true;
  }
  bool operator != (const ReverseOrderStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReverseOrderStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:i64;2:i32;3:i16;4:string;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BA93DC8E0310101D81517021CB327269;

class StructWithSomeEnum {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  StructWithSomeEnum() {
  }

  virtual ~StructWithSomeEnum() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  SomeEnum blah;

  struct __isset {
    __isset() : blah(false) {}
    bool blah;
  } __isset;

  bool operator == (const StructWithSomeEnum & rhs) const
  {
    if (!(blah == rhs.blah))
      return false;
    return true;
  }
  bool operator != (const StructWithSomeEnum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructWithSomeEnum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:enum;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA;

class TestUnion {
 public:

  static const char* ascii_fingerprint; // = "C3BAABE17F67FD55972D483A983C1A69";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xBA,0xAB,0xE1,0x7F,0x67,0xFD,0x55,0x97,0x2D,0x48,0x3A,0x98,0x3C,0x1A,0x69};

  TestUnion() : string_field(""), i32_field(0), other_i32_field(0) {
  }

  virtual ~TestUnion() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string string_field;
  int32_t i32_field;
  OneOfEach struct_field;
  std::vector<RandomStuff>  struct_list;
  int32_t other_i32_field;
  SomeEnum enum_field;

  struct __isset {
    __isset() : string_field(false), i32_field(false), struct_field(false), struct_list(false), other_i32_field(false), enum_field(false) {}
    bool string_field;
    bool i32_field;
    bool struct_field;
    bool struct_list;
    bool other_i32_field;
    bool enum_field;
  } __isset;

  bool operator == (const TestUnion & rhs) const
  {
    if (!(string_field == rhs.string_field))
      return false;
    if (!(i32_field == rhs.i32_field))
      return false;
    if (!(struct_field == rhs.struct_field))
      return false;
    if (!(struct_list == rhs.struct_list))
      return false;
    if (!(other_i32_field == rhs.other_i32_field))
      return false;
    if (!(enum_field == rhs.enum_field))
      return false;
    return true;
  }
  bool operator != (const TestUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA;

// {1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C3BAABE17F67FD55972D483A983C1A69;

class TestUnionMinusStringField {
 public:

  static const char* ascii_fingerprint; // = "3B8E0C3533F9A1C56A7220946DA3B98E";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x8E,0x0C,0x35,0x33,0xF9,0xA1,0xC5,0x6A,0x72,0x20,0x94,0x6D,0xA3,0xB9,0x8E};

  TestUnionMinusStringField() : i32_field(0), other_i32_field(0) {
  }

  virtual ~TestUnionMinusStringField() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t i32_field;
  OneOfEach struct_field;
  std::vector<RandomStuff>  struct_list;
  int32_t other_i32_field;
  SomeEnum enum_field;

  struct __isset {
    __isset() : i32_field(false), struct_field(false), struct_list(false), other_i32_field(false), enum_field(false) {}
    bool i32_field;
    bool struct_field;
    bool struct_list;
    bool other_i32_field;
    bool enum_field;
  } __isset;

  bool operator == (const TestUnionMinusStringField & rhs) const
  {
    if (!(i32_field == rhs.i32_field))
      return false;
    if (!(struct_field == rhs.struct_field))
      return false;
    if (!(struct_list == rhs.struct_list))
      return false;
    if (!(other_i32_field == rhs.other_i32_field))
      return false;
    if (!(enum_field == rhs.enum_field))
      return false;
    return true;
  }
  bool operator != (const TestUnionMinusStringField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestUnionMinusStringField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3B8E0C3533F9A1C56A7220946DA3B98E;

class ComparableUnion {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ComparableUnion() : string_field(""), binary_field("") {
  }

  virtual ~ComparableUnion() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string string_field;
  std::string binary_field;

  struct __isset {
    __isset() : string_field(false), binary_field(false) {}
    bool string_field;
    bool binary_field;
  } __isset;

  bool operator == (const ComparableUnion & rhs) const
  {
    if (!(string_field == rhs.string_field))
      return false;
    if (!(binary_field == rhs.binary_field))
      return false;
    return true;
  }
  bool operator != (const ComparableUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComparableUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:string;2:string;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_07A9615F837F7D0A952B595DD3020972;

class StructWithAUnion {
 public:

  static const char* ascii_fingerprint; // = "1A688CE2C0C91267D6985843A61FB562";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x68,0x8C,0xE2,0xC0,0xC9,0x12,0x67,0xD6,0x98,0x58,0x43,0xA6,0x1F,0xB5,0x62};

  StructWithAUnion() {
  }

  virtual ~StructWithAUnion() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  TestUnion test_union;

  struct __isset {
    __isset() : test_union(false) {}
    bool test_union;
  } __isset;

  bool operator == (const StructWithAUnion & rhs) const
  {
    if (!(test_union == rhs.test_union))
      return false;
    return true;
  }
  bool operator != (const StructWithAUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructWithAUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:{1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;};}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1A688CE2C0C91267D6985843A61FB562;

class PrimitiveThenStruct {
 public:

  static const char* ascii_fingerprint; // = "B9601C7CD703F4F4C7ACF14F3E733CB6";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x60,0x1C,0x7C,0xD7,0x03,0xF4,0xF4,0xC7,0xAC,0xF1,0x4F,0x3E,0x73,0x3C,0xB6};

  PrimitiveThenStruct() : blah(0), blah2(0) {
  }

  virtual ~PrimitiveThenStruct() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t blah;
  int32_t blah2;
  Backwards bw;

  struct __isset {
    __isset() : blah(false), blah2(false), bw(false) {}
    bool blah;
    bool blah2;
    bool bw;
  } __isset;

  bool operator == (const PrimitiveThenStruct & rhs) const
  {
    if (!(blah == rhs.blah))
      return false;
    if (!(blah2 == rhs.blah2))
      return false;
    if (!(bw == rhs.bw))
      return false;
    return true;
  }
  bool operator != (const PrimitiveThenStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrimitiveThenStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:i32;2:i32;3:{1:i32;2:i32;};}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6;

class StructWithASomemap {
 public:

  static const char* ascii_fingerprint; // = "A1B22BA1EA8D0BB473B653537D9E88F8";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0xB2,0x2B,0xA1,0xEA,0x8D,0x0B,0xB4,0x73,0xB6,0x53,0x53,0x7D,0x9E,0x88,0xF8};

  StructWithASomemap() {
  }

  virtual ~StructWithASomemap() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  SomeMap somemap_field;

  bool operator == (const StructWithASomemap & rhs) const
  {
    if (!(somemap_field == rhs.somemap_field))
      return false;
    return true;
  }
  bool operator != (const StructWithASomemap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructWithASomemap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// map<i32,i32>
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C;

// {1:map<i32,i32>;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8;

class BigFieldIdStruct {
 public:

  static const char* ascii_fingerprint; // = "EF3223317B4B691FF07BBCAE5AE4BE58";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x32,0x23,0x31,0x7B,0x4B,0x69,0x1F,0xF0,0x7B,0xBC,0xAE,0x5A,0xE4,0xBE,0x58};

  BigFieldIdStruct() : field1(""), field2("") {
  }

  virtual ~BigFieldIdStruct() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string field1;
  std::string field2;

  struct __isset {
    __isset() : field1(false), field2(false) {}
    bool field1;
    bool field2;
  } __isset;

  bool operator == (const BigFieldIdStruct & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    return true;
  }
  bool operator != (const BigFieldIdStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BigFieldIdStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:string;45:string;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58;

class BreaksRubyCompactProtocol {
 public:

  static const char* ascii_fingerprint; // = "F8C71AB013693CB292A4A3589EB448B4";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0xC7,0x1A,0xB0,0x13,0x69,0x3C,0xB2,0x92,0xA4,0xA3,0x58,0x9E,0xB4,0x48,0xB4};

  BreaksRubyCompactProtocol() : field1(""), field3(0) {
  }

  virtual ~BreaksRubyCompactProtocol() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  std::string field1;
  BigFieldIdStruct field2;
  int32_t field3;

  struct __isset {
    __isset() : field1(false), field2(false), field3(false) {}
    bool field1;
    bool field2;
    bool field3;
  } __isset;

  bool operator == (const BreaksRubyCompactProtocol & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(field3 == rhs.field3))
      return false;
    return true;
  }
  bool operator != (const BreaksRubyCompactProtocol &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BreaksRubyCompactProtocol & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

// {1:string;2:{1:string;45:string;};3:i32;}
extern ::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4;

}}} // namespace

#endif
